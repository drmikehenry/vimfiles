*grep.txt*     Plugin for grep, fgrep, egrep, and agrep tools.  *grep-plugin*


NOTE: This is a direct copy-and-paste from the web page for
the grep.vim plugin, found here:
http://www.vim.org/scripts/script.php?script_id=311

(Associated with version 1.9)

Overview

The grep plugin integrates the grep, fgrep, egrep, and agrep tools with
Vim and allows you to search for a pattern in one or more files and jump
to them.

To use this plugin, you need the grep, fgrep, egrep, agrep, find and
xargs utilities. These tools are present in most of the Unix installations.
For MS-Windows systems, you can download the GNU grep and find utilities
from the following sites:

   http://gnuwin32.sourceforge.net/packages/grep.htm
   http://gnuwin32.sourceforge.net/packages/findutils.htm

Usage

The grep.vim plugin introduces the following Vim commands:

:Grep          - Search for the specified pattern in the specified files
:GrepAdd       - Same as ":Grep" but adds the results to the current results
:Rgrep         - Run recursive grep
:RgrepAdd      - Same as ":Rgrep" but adds the results to the current results
:GrepBuffer    - Search for a pattern on all open buffers
:GrepBufferAdd - Same as ":GrepBuffer" but adds the results to the current
                 results
:Bgrep         - Same as :GrepBuffer
:BgrepAdd      - Same as :GrepBufferAdd
:GrepArgs      - Search for a pattern on all the Vim argument
                 filenames (:args)
:GrepArgsAdd   - Same as ":GrepArgs" but adds the results to the current
                 results
:Fgrep         - Run fgrep
:FgrepAdd      - Same as ":Fgrep" but adds the results to the current
                 results
:Rfgrep        - Run recursive fgrep
:RfgrepAdd     - Same as ":Rfgrep" but adds the results to the current
                 results
:Egrep         - Run egrep
:EgrepAdd      - Same as ":Egrep" but adds the results to the current
                 results
:Regrep        - Run recursive egrep
:RegrepAdd     - Same as ":Regrep" but adds the results to the current
                 results
:Agrep         - Run agrep
:AgrepAdd      - Same as ":Agrep" but adds the results to the current
                 results
:Ragrep        - Run recursive agrep
:RagrepAdd     - Same as ":Ragrep" but adds the results to the current
                 results

The above commands can be invoked like this:

   :Grep   [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Rgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Fgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Rfgrep [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Egrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Regrep [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Agrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Ragrep [<grep_options>] [<search_pattern> [<file_name(s)>]]

   :GrepAdd   [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :FgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RfgrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :EgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RegrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :AgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RagrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]

   :GrepBuffer [<grep_options>] [<search_pattern>]
   :Bgrep [<grep_options>] [<search_pattern>]
   :GrepArgs [<grep_options>] [<search_pattern>]

   :GrepBufferAdd [<grep_options>] [<search_pattern>]
   :BgrepAdd [<grep_options>] [<search_pattern>]
   :GrepArgsAdd [<grep_options>] [<search_pattern>]

In the above commands, all the arguments are optional.

You can specify grep options like -i (ignore case) or -w (search for a word)
to the above commands.  If the <grep_options> are not specified, then the
default grep options specified by the variable Grep_Default_Options is
used.

You can specify the grep pattern to search as an argument to the above
commands.  If the <search_pattern> is not specified, then you will be
prompted to enter a search pattern. By default, the keyword under the cursor
is displayed for the search pattern prompt. You can accept the default or
modify it.

The search pattern is automatically enclosed by the character specified in
the Grep_Shell_Quote_Char variable. You should not enclose the search
pattern with a shell escape character.

If you want to specify a search pattern with space characters or a
multi-word pattern, then you should use the Grep command pattern input
prompt to supply the pattern.

You can specify one or more file names (or file patterns) to the above
commands.  If the <file_names> are not specified, then you will be prompted
to enter file names.  By default, the pattern specified by the
Grep_Default_Filelist variable is used. To specify the file name(s) as an
argument to the above commands, you have to specify the search pattern also.

When you enter only the command name, you will be prompted to enter the
search pattern and the files in which to search for the pattern. By default,
the keyword under the cursor is displayed for the search pattern prompt.
Depending on the command, you may prompted for additional parameters like
the directories to search for the pattern.

You can retrieve previously entered values for the Grep prompts using the up
and down arrow keys. You can cancel the command by pressing the escape key.
You can use CTRL-U to erase the default shown for the prompt and CTRL-W to
erase the previous word in the prompt. For more information about editing
the prompt, read ':help cmdline-editing' Vim help topic.

After invoking any of the grep commands, you can cancel the command, when
you are prompted for a search pattern or file names or a directory by
pressing the <Esc> key. You cannot cancel (or kill) the
grep/fgrep/egrep/agrep commands after the external command is invoked.

The GrepAdd, RgrepAdd and other *Add commands append the search output to
the current search output. This is useful if you want to see the search
results for multiple patterns at the same time. These commands are available
only in Vim version 7.0 and above.

You can map a key to invoke any of the above commands. For example, the
following map invokes the :Grep command to search for the keyword under the
cursor:

      nnoremap <silent> <F3> :Grep<CR>

The output of the grep command will be listed in the Vim quickfix window.
1. You can select a line in the quickfix window and press <Enter> or double
   click on a match to jump to that line.
2. You can use the ":cnext" and ":cprev" commands to the jump to the next or
   previous output line.
3. You can use the ":colder" and ":cnewer" commands to go between multiple
   grep quickfix output windows.
4. The quickfix window need not be opened always to use the grep output.
   You can close the quickfix window and use the quickfix commands to jump
   to the grep matches.  Use the ":copen" command to open the quickfix
   window again.

For more information about other quickfix commands read ":help quickfix"

When using GUI Vim, the Tools->Search menu item with a few sub-menu items is
created for few variations of the search command.

Configuration

By changing the following variables you can configure the behavior of this
plugin. Set the following variables in your .vimrc file using the 'let'
command.

The 'Grep_Path' variable is used to locate the grep utility. By default,
this is set to grep. You can change this using the let command:

      :let Grep_Path = 'd:\tools\grep.exe'

The 'Fgrep_Path' variable is used to locate the fgrep utility. By default,
this is set to fgrep. You can change this using the let command:

      :let Fgrep_Path = 'd:\tools\fgrep.exe'

The 'Egrep_Path' variable is used to locate the egrep utility. By default,
this is set to egrep. You can change this using the let command:

      :let Egrep_Path = 'd:\tools\egrep.exe'

The 'Agrep_Path' variable is used to locate the agrep utility. By default,
this is set to agrep. You can change this using the let command:

      :let Agrep_Path = 'd:\tools\agrep.exe'

The 'Grep_Find_Path' variable is used to locate the find utility. By
default, this is set to d:\tools\find.exe. You can change this using the let
command:

      :let Grep_Find_Path = 'd:\tools\find.exe'

The 'Grep_Xargs_Path' variable is used to locate the xargs utility. By
default, this is set to xargs. You can change this using the let
command:

      :let Grep_Xargs_Path = 'd:\tools\xargs.exe'

When running any one of the Grep commands, you will be prompted for the
files in which to search for the pattern. The 'Grep_Default_Filelist'
variable is used to specify to default for this prompt. By default, this
variable is set to '*'. You can specify multiple matching patterns separated
by spaces. You can change this settings using the let command:

      :let Grep_Default_Filelist = '*.[chS]'
      :let Grep_Default_Filelist = '*.c *.cpp *.asm'

The 'Grep_Default_Options' is used to pass default command line options to
the grep/fgrep/egrep/agrep utilities. By default, this is set to an empty
string. You can change this using the let command:

      :let Grep_Default_Options = '-i'

The 'Grep_Skip_Dirs' variable specifies the list of directories to skip
while doing recursive searches. By default, this is set to 'RCS CVS SCCS'.
You can change this using the let command:

      :let Grep_Skip_Dirs = 'dir1 dir2 dir3'

The 'Grep_Skip_Files' variable specifies the list of files to skip while
doing recursive searches. By default, this is set to '*~ *,v s.*'. You can
change this using the let command:

      :let Grep_Skip_Files = '*.bak *~'

By default, when you invoke the Grep commands the quickfix window will be
opened with the grep output.  You can disable opening the quickfix window,
by setting the 'Grep_OpenQuickfixWindow' variable  to zero:

      :let Grep_OpenQuickfixWindow = 0

You can manually open the quickfix window using the :cwindow command.

By default, for recursive searches, the 'find' and 'xargs' utilities are
used.  If you don't have the 'xargs' utility or don't want to use the
'xargs' utility, " then you can set the 'Grep_Find_Use_Xargs' variable to
zero. If this is set to zero, then only the 'find' utility is used for
recursive searches:

      :let Grep_Find_Use_Xargs = 0

To handle file names with space characters in them, the xargs utility
is invoked with the '--null' argument. If the xargs utility in your system
doesn't accept the '--null' argument, then you can change the
Grep_Xargs_Options variable. For example, to use the '--print0' xargs
argument, you can use the following command:

:let Grep_Xargs_Options = '--print0'

The Grep_Cygwin_Find variable should be set to 1, if you are using the find
utility from the cygwin package. This setting is used to handle the
difference between the backslash and forward slash path separators.

      :let Grep_Cygwin_Find = 1

The 'Grep_Null_Device' variable specifies the name of the null device to
pass to the grep commands. This is needed to force the grep commands to
print the name of the file in which a match is found, if only one filename
is specified. For Unix systems, this is set to /dev/null and for MS-Windows
systems, this is set to NUL. You can modify this by using the let command:

      :let Grep_Null_Device = '/dev/null'

The 'Grep_Shell_Quote_Char' variable specifies the quote character to use
for protecting patterns from being interpreted by the shell. For Unix
systems, this is set to "'" and for MS-Window systems, this is set to an
empty string.  You can change this using the let command:

      :let Grep_Shell_Quote_Char = "'"

The 'Grep_Shell_Escape_Char' variable specifies the escape character to use
for protecting special characters from being interpreted by the shell.  For
Unix systems, this is set to '' and for MS-Window systems, this is set to
an empty string.  You can change this using the let command:

      :let Grep_Shell_Escape_Char = "'"
 
install details
1. Copy the grep.vim file to the $HOME/.vim/plugin or $HOME/vimfiles/plugin
   or $VIM/vimfiles/plugin directory.
   Refer to the following Vim help topics for more information about Vim
   plugins:
      :help add-plugin
      :help add-global-plugin
      :help runtimepath
2. If the grep executables are not already present in one of the directories
   in the PATH environment variable, then set the Grep_Path and other _Path
   variables to point to the location of the grep utilites in the .vimrc
   file.
3. Restart Vim.
4. You can now use the ":Grep" and other commands to search for patterns in
   files.
 

vim:sts=2:et:ai:tw=78:fo=tcq2:ft=help
