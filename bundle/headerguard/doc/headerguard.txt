*headerguard.txt*   Plugin for adding header guards to C/C++ header files
*headerguard*       Version 0.2.2

==============================================================================
1.  Introduction                                    |headerguard-intro|
2.  Installation                                    |headerguard-installation|
3.  Usage                                           |headerguard-usage|
4.  Customization                                   |headerguard-customization|
5.  ChangeLog                                       |headerguard-changelog|
6.  Credits                                         |headerguard-credits|

==============================================================================
1.  Introduction                                    *headerguard-intro*

It is a common practice to insert header guards into C/C++ header files to
allow a header to be included multiple times.  A header guard for file
HeaderName.h typically looks something like this: >

  #ifndef HEADERNAME_H
  #define HEADERNAME_H

    ...header content...

  #endif /* HEADERNAME_H */

Headerguard provides methods for inserting and updating header guards, and for
tailoring the header guard style to fit local conventions.  It checks for a
pre-existing header guard, and if found, modifies the existing guard in-place.

===============================================================================
2.  Installation                                    *headerguard-installation*

To install directly in your personal |vimfiles| directory (~/.vim under
unix or %HOMEPATH%\vimfiles under windows), unpack the downloaded archive
to yield these files: >

  plugin/headerguard.vim
  doc/headerguard.txt

Then, re-generate your help tags with Vim's |:helptags| command, e.g.: >

  :helptags ~/.vim/doc

You may also install headerguard using a tool like pathogen[1] by unpacking
the downloaded archive into a bundle directory, e.g.: >

  ~/.vim/bundle/headerguard

[1]: https://github.com/tpope/vim-pathogen

==============================================================================
3.  Usage                                           *headerguard-usage*

The following command is provided:                  *HeaderguardAdd*  >

  :HeaderguardAdd

This will add a new header guard to the current file.  It checks for a
pre-existing header guard, and if found, modifies the existing guard in-place.

Detection of pre-existing header guards is somewhat primitive.  The first two
pre-processor directives in the file must be the pre-existing header guard's
#ifndef (or #if !defined()) and #define directives, and the final directive in
the file must be the corresponding #endif.  Pre-existing header guards not
following this form won't be recognized and thus cannot be converted in-place.
To avoid mistakenly adding another header guard with the same guard name,
|HeaderguardAdd| will refuse to add a new header guard if it can find a
#define of the guard name macro anywhere in the file.

===============================================================================
4.  Customization                                   *headerguard-customization*

You may customize the format of the generated header guards by defining
any combination of the following functions in your |.vimrc| file: >

  Function                  Returns
  =====================     =================================
  g:HeaderguardName()       HEADERNAME_H
  g:HeaderguardLine1()      #ifndef HEADERNAME_H
  g:HeaderguardLine2()      #define HEADERNAME_H
  g:HeaderguardLine3()      #endif /* HEADERNAME_H */

If not overridden, headerguard.vim will create definitions that generate
guards in this style: >

  #ifndef HEADERNAME_H
  #define HEADERNAME_H

    ...header content...

  #endif /* HEADERNAME_H */

To change the name of the macro, define the g:HeaderguardName() function.
The default function looks like this: >

  function! g:HeaderguardName()
      return toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
  endfunction

It uses the |expand()| function to get the current filename, convert it
to uppercase, and convert invalid macro character to underscores ("_").

Each of the three lines in the header guard idiom are controlled
by separately overridable functions, defined in terms of g:HeaderguardName().
These functions are: >

  g:HeaderguardLine1()
  g:HeaderguardLine2()
  g:HeaderguardLine3()

As an example, to create guards for file HeaderName.h in this format: >

  #if !defined(INCLUDED_FILENAME_H)
  #define INCLUDED_FILENAME_H  1

    ...header content...

  #endif /* !defined(INCLUDED_FILENAME_H) */

You could use the following overrides: >

  function! g:HeaderguardName()
      return "INCLUDED_" . toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
  endfunction

  function! g:HeaderguardLine1()
      return "#if !defined(" . g:HeaderguardName() . ")"
  endfunction

  function! g:HeaderguardLine2()
      return "#define " . g:HeaderguardName() . "  1"
  endfunction

  function! g:HeaderguardLine3()
      return "#endif /* !defined(" . g:HeaderguardName() . ") */"
  endfunction

For finer-grained control, headerguard will first check for buffer-local
versions of the above functions, then global versions, then finally the
script-local versions found within headerguard itself.  So, for example, the
below buffer-local function will take precedence over g:HeaderguardName(): >

  function! b:HeaderguardName()
      return "_" . toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
  endfunction

There is also a possibility to fine-tune the behavior without overriding
functions. The comments at the end can be changed by setting the value of
g:headerguard_use_cpp_comments to 1. In this case, the default header guard
looks like this: >

  #ifndef HEADERNAME_H
  #define HEADERNAME_H

    ...header content...

  #endif // HEADERNAME_H

===============================================================================
5.  ChangeLog                                       |headerguard-changelog|

Version 0.2.2    Date    2015-04-27               *headerguard-changelog-0.2.2*

  - Add g:headerguard_use_cpp_comments to use C++ comments in #endif
    (thanks to Péter Szabados).

Version 0.2.1    Date    2013-10-03               *headerguard-changelog-0.2.1*

  - Documentation reorganization.

Version 0.2.0    Date    2013-10-03               *headerguard-changelog-0.2.0*

  - Convert to bundle-based installation.

  - Allow for buffer-local overrides of global guard definitions.

Version 0.1.1    Date    2013-09-24               *headerguard-changelog-0.1.1*

  - Properly restore cpoptions.

Version 0.1.0    Date    2007-09-14               *headerguard-changelog-0.1.0*

  - Initial release.

===============================================================================
6.  Credits                                         |headerguard-credits|

Developed by Michael Henry (vim at drmikehenry.com).

Distributed under Vim's |license|.

Git repository:       https://github.com/drmikehenry/vim-headerguard

Contributors (in chronological order)

- Péter Szabados

===============================================================================
vim:sts=2:et:ai:tw=78:fo=tcq2:ft=help:
