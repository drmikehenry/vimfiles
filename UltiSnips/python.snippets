# DO NOT EDIT - file generated by corresponding .py file
snippet #! "#!/usr/bin/env python..." b
#!/usr/bin/env python
# vim:set fileencoding=utf8: #

endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet if "if ...:<CR>" b
if $1:
    $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet else "else:<CR>" b
else:
    $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet el "else:<CR>" b
else:
    $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet elif "elif ...:<CR>" b
elif $1:
    $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ei "elif ...:<CR>" b
elif $1:
    $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet im "import " b
import 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet from "from module import " b
from ${1:module} import $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ifmain "if __name__ == '__main__':..." b
if __name__ == '__main__':
    ${1:main()}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet def "def func(...):..." b
def ${1:funcName}($2):
    """${3:Description of function $1.}"""
    ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet func "def func(...):..." b
def ${1:funcName}($2):
    """${3:Description of function $1.}"""
    ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet __ "__init__" w
__${1:init}__
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet try "try/except" b
try:
    ${1:pass}
except ${2:Exception}, e:
    ${3:raise e}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet trye "try/except" b
try:
    ${1:pass}
except ${2:Exception}, e:
    ${3:raise e}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet tryf "try/finally" b
try:
    ${1:pass}
finally:
    ${2:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet tryef "try/except/finally" b
try:
    ${1:pass}
except ${2:Exception}, e:
    ${3:raise e}
finally:
    ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet tryee "try/except/else" b
try:
    ${1:pass}
except ${2:Exception}, e:
    ${3:raise e}
else:
    ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet tryeef "try/except/else/finally" b
try:
    ${1:pass}
except ${2:Exception}, e:
    ${3:raise e}
else:
    ${4:pass}
finally:
    ${5:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet except "except" b
except ${1:Exception}, e:
    ${2:raise e}

endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet exc "except" b
except ${1:Exception}, e:
    ${2:raise e}

endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet finally "finally" b
finally:
    $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fin "finally" b
finally:
    $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet class "class definition" b
class ${1:MyClass}(${2:object}):
    """${3:Docstring for $1.}"""

    def __init__(self${4/([^,])?(.*)/(?1:, )/}${4:arg}):
        """
        @todo Document $1.__init__ (along with arguments).
${4/.+/(?0:\n)/}${4/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][A-Za-z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:        $2 - @todo Document argument $2.\n)/g}        """
${2/object$|(.+)/(?1:        $0.__init__\(self\)\n\n)/}${4/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][A-Za-z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:        self._$2 = $2\n)/g}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet cl "class definition" b
class ${1:MyClass}(${2:object}):
    """${3:Docstring for $1.}"""

    def __init__(self${4/([^,])?(.*)/(?1:, )/}${4:arg}):
        """
        @todo Document $1.__init__ (along with arguments).
${4/.+/(?0:\n)/}${4/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][A-Za-z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:        $2 - @todo Document argument $2.\n)/g}        """
${2/object$|(.+)/(?1:        $0.__init__\(self\)\n\n)/}${4/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][A-Za-z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:        self._$2 = $2\n)/g}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet for "for i in ..." b
for ${1:i} in ${2:range(${3:10})}:
    ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet while "while expr:..." b
while ${1:True}:
    ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet wh "while expr:..." b
while ${1:True}:
    ${4:pass}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet as "assert " b
assert $0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ae "self.assertEqual(..., ...)" b
self.assertEqual(${1:first}, ${2:second})
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet at "self.assertTrue(...)" b
self.assertTrue(${1:expression})
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet af "self.assertFalse(...)" b
self.assertFalse(${1:expression})
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet aae "self.assertAlmostEqual(..., ...)" b
self.assertAlmostEqual(${1:first}, ${2:second})
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ar "self.assertRaises(..., ...)" b
self.assertRaises(${1:exception}, ${2:func}${3/.+/, /}${3:arguments})
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet property "property" b
def ${1:propName}():
    doc = """${2:Docstring for $1.}"""
    def fget(self):
        return self._$1
    def fset(self, value):
        self._$1 = value
    return locals()
$1 = property(**$1())

endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @property "property" b
def ${1:propName}():
    doc = """${2:Docstring for $1.}"""
    def fget(self):
        return self._$1
    def fset(self, value):
        self._$1 = value
    return locals()
$1 = property(**$1())

endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet prop "property" b
def ${1:propName}():
    doc = """${2:Docstring for $1.}"""
    def fget(self):
        return self._$1
    def fset(self, value):
        self._$1 = value
    return locals()
$1 = property(**$1())

endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @prop "property" b
def ${1:propName}():
    doc = """${2:Docstring for $1.}"""
    def fget(self):
        return self._$1
    def fset(self, value):
        self._$1 = value
    return locals()
$1 = property(**$1())

endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pdb "pdb.set_trace()" b
import pdb; pdb.set_trace()
endsnippet
