
priority -5

global !p
from sniputil import betterVisual
endglobal
# DO NOT EDIT - file generated by corresponding .py file
snippet fn "fn name(?) -> ? {}" b
fn ${1:function_name}($2)${3/..*/ -> /}${3:Result<${4:()}, Box<dyn std::error::Error>>} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pfn "pub fn name(?) -> ? {}" b
pub fn ${1:function_name}($2)${3/..*/ -> /}${3:Result<${4:()}, Box<dyn std::error::Error>>} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet new "pub fn new(?) -> Self {}" b
pub fn new($1) -> Self {
    Self { $0 }
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pr "println!(...)" w
println!("${1:{}}"${1/[^{]*({)?.*/(?1:, :\);)/}$2${1/[^{]*({)?.*/(?1:\);:)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet prd "println!( :? ...)" w
println!("{:?}", $1);$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pri "print!(...)" w
print!("${1:{}}"${1/[^{]*({)?.*/(?1:, :\);)/}$2${1/[^{]*({)?.*/(?1:\);:)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet prid "print!( :? ...)" w
print!("{:?}", $1);$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet epr "eprintln!(...)" w
eprintln!("${1:{}}"${1/[^{]*({)?.*/(?1:, :\);)/}$2${1/[^{]*({)?.*/(?1:\);:)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet eprd "eprintln!( :? ...)" w
eprintln!("{:?}", $1);$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet epri "eprint!(...)" w
eprint!("${1:{}}"${1/[^{]*({)?.*/(?1:, :\);)/}$2${1/[^{]*({)?.*/(?1:\);:)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet eprid "eprint!( :? ...)" w
eprint!("{:?}", $1);$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fmt "format!(...)" w
format!("$1"${1/[^{]*({)?.*/(?1:, :\);)/}$2${1/[^{]*({)?.*/(?1:\);:)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet if "if ... {...}" w
if $1 {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet else "else {...}" w
else {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet el "else {...}" w
else {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet elif "else if ... {...}" w
else if $1 {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ei "else if ... {...}" w
else if $1 {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet match "match pattern { ? => ? }" w
match ${1:expression} {
    ${2:Some(thing)} => ${3:result}
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet m "match pattern { ? => ? }" w
match ${1:expression} {
    ${2:Some(thing)} => ${3:result}
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet for "for ... in ... {...}" b
for ${1:var} in ${2:iter} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet while "while ... {...}" b
while $1 {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet wh "while ... {...}" b
while $1 {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet loop "loop {...}" b
loop {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet todo "// TODO comment" w
// TODO: $0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fixme "// FIXME comment" w
// FIXME: $0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet re "return " w
return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet struct "struct {...}" b
struct ${1:Name} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet st "struct {...}" b
struct ${1:Name} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet impl "impl Type/Trait for Type {...}" b
impl ${1:Type/Trait} for ${2:Type} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet sti "struct {...} with impl" bm
struct ${1:Name} {
    `!p betterVisual(snip)`$0
}

impl $1 {
    pub fn new() -> Self {
        Self { }
    }
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet enum "enum {...}" b
enum ${1:Name} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet trait "trait {...}" b
trait ${1:Name} {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet drop "impl Drop for Type {...}" b
impl Drop for ${1:Name} {
    fn drop(&mut self) {
        `!p betterVisual(snip)`$0
    }
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet { "multi-line brace" 
{
    $0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet as "assert!(...)" w
assert!($1);
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ase "assert_eq!(..., ...)" w
assert_eq!($1, $2);
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet asne "assert_ne!(..., ...)" w
assert_ne!($1, $2);
endsnippet
