
global !p
def better_visual(snip):
    import textwrap, vim

    n = vim.current.window.cursor[1] / int(vim.eval('&shiftwidth'), 10)
    text = textwrap.dedent(snip.v.text)

    lines = []
    for i, line in enumerate(text.splitlines()):
        lines.append(snip.mkline(line))
        if i == 0:
            snip >> n
    return '\n'.join(lines)
endglobal
# DO NOT EDIT - file generated by corresponding .py file
snippet if "if (...) {...}" b
if ($1)
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet else "else {...}" b
else
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet el "else {...}" b
else
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet elif "else if (...) {...}" b
else if ($1)
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ei "else if (...) {...}" b
else if ($1)
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet while "while (...) {...}" b
while ($1)
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet wh "while (...) {...}" b
while ($1)
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fore "for (;;) {...}" b
for (;;)
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet forever "for (;;) {...}" b
for (;;)
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet for "for (i = 0; i < N; i++) {...}" b
for (${1:i}${1/(.*;.*)|(.*=.*)|(.+)|.*/(?1::(?2:;:(?3: = 0;:;)))/} ${1/\s*[=;].*//}${2/(.*;.*)|(^[<>!=].*)|.*/(?1::(?2: : < ))/}${2:N}${2/(.*;.*)|.*/(?1::;)/} ${1/\s*[=;].*//}${3:${2/(^>.*)|.*/(?1:--:++)/}})
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet forr "for (...) {...}" b
for (${1:})
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet switch "switch (...) { ... }" b
switch (${1:var})
{
case ${2:val}:
    $0
    break;

default:
    break;
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet sw "switch (...) { ... }" b
switch (${1:var})
{
case ${2:val}:
    $0
    break;

default:
    break;
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet case "case ...: break;" b
case ${1:val}:
    $0
    break;
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet re "return " b
return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet main "main(...)" b
/** @brief Main program entry point.
    @param[in] argc  Number of arguments in @c argv.
    @param[in] argv  Command-line arguments.
    @retval 0
        Success.
*/
int
main(int argc, char *argv[])
{
    $0
    return 0;
}
endsnippet

snippet fprintf "fprintf(..., '...', ...);" w!
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf('...', ...);" w!
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# DO NOT EDIT - file generated by corresponding .py file
snippet func "type func(...) {...}" b
/*******************************************************************************
    [docimport ${1:funcName}]
*//**
    @brief ${2:Description.}
*******************************************************************************/
${3:void}
$1(${4:void})
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet def "type func(...) {...}" b
/*******************************************************************************
    [docimport ${1:funcName}]
*//**
    @brief ${2:Description.}
*******************************************************************************/
${3:void}
$1(${4:void})
{
    `!p snip.rv = better_visual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet struct "typedef struct name {...} name;" b
/** @brief ${2:@todo Description of $1.}
*/
typedef struct ${1:name}
{
    $0
} $1;
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet inc "#include 'Header.h'" b
#include "${1:`!p res=re.sub(r'\.[^.]+$', '', fn)+'.h'`}"
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet Inc "#include <Header.h>" b
#include <${1:.h}>
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @param "@param[in] inParam  @todo Description of ...." b
@param[in] ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @p "@param[in] inParam  @todo Description of ...." b
@param[in] ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @pi "@param[in] inParam  @todo Description of ...." b
@param[in] ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @po "@param[out] outParam  @todo Description of ...." b
@param[out] ${1:outParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @pio "@param[in,out] inOutParam  @todo Description of ...." b
@param[in,out] ${1:inOutParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @b "@brief Description." b
@brief ${0:Description.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @return "@return " b
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @re "@return " b
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @ret "@return " b
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @retval "@retval value, Description" b
@retval ${1:returnValue}
    ${0:Reason to return $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @rv "@retval value, Description" b
@retval ${1:returnValue}
    ${0:Reason to return $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet /** "/** @brief Brief description with period. */" b
/** @brief ${1:Brief description with period.} */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet todo "/** @todo Description of what's TO DO. */" b
/** @todo ${1:Description of what's TO DO.} */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet bug "/** @bug Description of BUG. */" b
/** @bug ${1:Description of BUG.} */
endsnippet
