
priority -5

global !p
from sniputil import betterVisual
from sniputil import autoPeriod
endglobal
# DO NOT EDIT - file generated by corresponding .py file
snippet if "if (...) {...}" b
if ($1)
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet else "else {...}" b
else
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet el "else {...}" b
else
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet elif "else if (...) {...}" b
else if ($1)
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ei "else if (...) {...}" b
else if ($1)
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet while "while (...) {...}" b
while ($1)
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet wh "while (...) {...}" b
while ($1)
{
    `!p betterVisual(snip)`$0
}
endsnippet

global !p
def snip_c_forLoopVariable(s):
    # Junk semi-colon and onward.
    s = s.split(";")[0]

    # Junk everything through final comma (if any).
    s = s.split(",")[-1]

    # Clobber initializer (if any).
    s = s.split("=")[0]

    # Keep final whitespace-delimited word.
    s = s.strip()
    if s:
        s = s.split()[-1]
    return s

def snip_c_forLoopInitializer(s):
    if ";" in s:
        return ""
    elif "=" in s:
        return ";"
    else:
        return " = 0;"

def snip_c_forLoopComparator(s):
    if ";" in s:
        return ""
    for op in ["<", ">", "!", "="]:
        if s.startswith(op):
            return " "
    return " < "

endglobal
# DO NOT EDIT - file generated by corresponding .py file
snippet forever "for (;;) {...}" b
for (;;)
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet forev "for (;;) {...}" b
for (;;)
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet for "for (i = 0; i < N; i++) {...}" b
for (${1:i}`!p snip.rv = snip_c_forLoopInitializer(t[1])` `!p snip.rv = snip_c_forLoopVariable(t[1])``!p snip.rv = snip_c_forLoopComparator(t[2])`${2:N}${2/(.*;.*)|.*/(?1::;)/} `!p snip.rv = snip_c_forLoopVariable(t[1])`${3:${2/(^>.*)|.*/(?1:--:++)/}})
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet forr "for (...) {...}" b
for (${1:})
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet switch "switch (...) { ... }" bm
switch (${1:var})
{
case ${2:val}:
    $0
    break;

default:
    break;
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet sw "switch (...) { ... }" bm
switch (${1:var})
{
case ${2:val}:
    $0
    break;

default:
    break;
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet case "case ...: break;" b
case ${1:val}:
    $0
    break;
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet re "return " b
return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet main "main(...)" b
/** @brief Main program entry point.
    @param[in] argc  Number of arguments in @c argv.
    @param[in] argv  Command-line arguments.
    @retval 0
        Success.
*/
int
main(int argc, char *argv[])
{
    $0
    return 0;
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet printf "printf('...', ...);" w
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pr "printf('...', ...);" w
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet dprintf "dprintf(fd, '...', ...);" w
dprintf(${1:fd}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet dpr "dprintf(fd, '...', ...);" w
dprintf(${1:fd}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fprintf "fprintf(FILE, '...', ...);" w
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fpr "fprintf(FILE, '...', ...);" w
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet sprintf "sprintf(buf, '...', ...);" w
sprintf(${1:buf}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet spr "sprintf(buf, '...', ...);" w
sprintf(${1:buf}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet snprintf "snprintf(buf, sizeof(buf), '...', ...);" w
snprintf(${1:buf}, ${2:sizeof($1)}, "${3:%s}\n"${3/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$4${3/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet snpr "snprintf(buf, sizeof(buf), '...', ...);" w
snprintf(${1:buf}, ${2:sizeof($1)}, "${3:%s}\n"${3/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$4${3/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet Func "type func(...);" b
/******************************************************************************
    [docexport ${1:funcName}]
*//**
    @brief ${2:Description}`!p snip.rv = autoPeriod(t[2])`
******************************************************************************/
${3:void}
$1(${4:void});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet func "type func(...) {...}" b
/******************************************************************************
    [docimport ${1:funcName}]
*//**
    @brief ${2:Description}`!p snip.rv = autoPeriod(t[2])`
******************************************************************************/
${3:void}
$1(${4:void})
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet def "type func(...) {...}" b
/******************************************************************************
    [docimport ${1:funcName}]
*//**
    @brief ${2:Description}`!p snip.rv = autoPeriod(t[2])`
******************************************************************************/
${3:void}
$1(${4:void})
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet sfunc "static type func(...) {...}" b
/******************************************************************************
    ${1:funcName}
*//**
    @brief ${2:Description}`!p snip.rv = autoPeriod(t[2])`
******************************************************************************/
static ${3:void}
$1(${4:void})
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet static "static type func(...) {...}" b
/******************************************************************************
    ${1:funcName}
*//**
    @brief ${2:Description}`!p snip.rv = autoPeriod(t[2])`
******************************************************************************/
static ${3:void}
$1(${4:void})
{
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet struct "typedef struct name {...} name;" b
/** @brief ${2:@todo Description of $1}`!p snip.rv = autoPeriod(t[2])`
*/
typedef struct ${1:name}
{
    $0
} $1;
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet enum "typedef enum name {...} name;" b
/** @brief ${2:@todo Description of $1}`!p snip.rv = autoPeriod(t[2])`
*/
typedef enum ${1:name}
{
    $0
} $1;
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet inc "#include 'Header.h'" b
#include "${1:`!p res=re.sub(r'\.[^.]+$', '', fn)+'.h'`}"
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet Inc "#include <Header.h>" b
#include <${1:.h}>
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet i8 "int8_t" w
int8_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ui8 "uint8_t" w
uint8_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet 8 "uint8_t" w
uint8_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet i16 "int16_t" w
int16_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ui16 "uint16_t" w
uint16_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet 16 "uint16_t" w
uint16_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet i32 "int32_t" w
int32_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ui32 "uint32_t" w
uint32_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet 32 "uint32_t" w
uint32_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet i64 "int64_t" w
int64_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ui64 "uint64_t" w
uint64_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet 64 "uint64_t" w
uint64_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet st "size_t" w
size_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet sst "ssize_t" w
ssize_t
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet un "unsigned" w
unsigned
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet uc "unsigned char" w
unsigned char
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @param "@param[in] inParam  @todo Description of ...." b
@param[in] ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @p "@param[in] inParam  @todo Description of ...." b
@param[in] ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @pi "@param[in] inParam  @todo Description of ...." b
@param[in] ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @po "@param[out] outParam  @todo Description of ...." b
@param[out] ${1:outParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @pio "@param[in,out] inOutParam  @todo Description of ...." b
@param[in,out] ${1:inOutParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @b "@brief Description." b
@brief ${0:Description.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @return "@return " b
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @re "@return " b
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @ret "@return " b
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @retval "@retval value, Description" b
@retval ${1:returnValue}
    ${0:Reason to return $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @rv "@retval value, Description" b
@retval ${1:returnValue}
    ${0:Reason to return $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet /** "/** @brief Brief description`!p snip.rv = autoPeriod(t[1])` */" b
/** @brief ${1:Brief description}`!p snip.rv = autoPeriod(t[1])` */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet todo "/** @todo Description of what's TO DO`!p snip.rv = autoPeriod(t[1])` */" b
/** @todo ${1:Description of what's TO DO}`!p snip.rv = autoPeriod(t[1])` */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet bug "/** @bug Description of BUG`!p snip.rv = autoPeriod(t[1])` */" b
/** @bug ${1:Description of BUG}`!p snip.rv = autoPeriod(t[1])` */
endsnippet
