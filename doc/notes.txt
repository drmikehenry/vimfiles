*notes.txt*     Notes on Vim installation and usage

*notes*

1.  Introduction                                        |notes_intro|
2.  Installation                                        |notes_installation|
3.  Plugins                                             |notes_plugins|
    Align - Align things into columns                   |notes_align|
    BufExplorer - Buffer switcher and manager           |notes_bufexplorer|
    bufmru - Most-recently-used buffer switcher         |notes_bufmru|
    BufKill - Kill buffer without closing window        |notes_bufkill|
    CloseTag - Close XML and HTML tags automatically    |notes_closetag|
    CtrlP - Fuzzy matches for files, buffers, etc.      |notes_ctrlp|
    ColorSamplerPack - Color schemes and theme menu     |notes_colorsampler|
    Dual - Dual color scheme (gvim, vim)                |notes_dual|
    EnhancedCommentify - comment lines in a program     |notes_enhcommentify|
    Eunuch - helpers for UNIX                           |notes_eunuch|
    Extline - for extending lines                       |notes_extline|
    Fontsize - increment/decrement font size            |notes_fontsize|
    Fugitive - A wrapper for Git in Vim                 |notes_fugitive|
    FSwitch - Filename switching (e.g., .c <=> .h)      |notes_fswitch|
    Grep - Wrapper for grep/xargs                       |notes_grep|
    Gundo - Visualize your undo tree                    |notes_gundo|
    Headerguard - Add guards for header files           |notes_headerguard|
    Keepcase - Search-and-replace keeping case          |notes_keepcase|
    Localvimrc - Override settings via local files      |notes_localvimrc|
    LoremIpsum - Generate dummy text                    |notes_loremipsum|
    LustyExplorer - File/buffer switcher w/incr. search |notes_lustyexplorer|
    LustyJuggler - Quick access to recent buffers       |notes_lustyjuggler|
    Markdown - Markdown syntax highlighting             |notes_markdown|
    Matchit - Extended matching with '%'                |notes_matchit|
    Netrw - File reading and writing across networks    |notes_netrw|
    OmniCppComplete - C/C++ Omnicompletion              |notes_omnicppcomplete|
    Paredit - Structured editing of Lisp S-expressions  |notes_paredit|
    Pathogen - Runtime path management for bundles      |notes_pathogen|
    Powerline - The ultimate vim statusline utility     |notes_powerline|
    Project - Managing "projects" of files              |notes_project|
    Python - Python Syntax file with folding            |notes_python|
    PythonComplete - Python Omnicompletion              |notes_pythoncomplete|
    Repeat - Repeat operations for supported plugins    |notes_repeat|
    RunView - Run lines through filter into buffer      |notes_runview|
    Selfdot - Changes "." to "self." in Python          |notes_selfdot|
    ScrollColor - Scroll through color schemes          |notes_scrollcolor|
    SuperTab - Use <TAB> for all completion             |notes_supertab|
    Surround - Manipulating "surroundings"              |notes_surround|
    Svn - View Subversion diffs while writing commit log|notes_svn|
    SwapIt - Cycle through related words                |notes_swapit|
    Tagbar - Source code browser                        |notes_tagbar|
    TagSignature - Balloon signatures for tags          |notes_tagsignature|
    TextObj-Indent - Indentation-based text objects     |notes_textobj-indent|
    TextObj-User - Supports user-defined text objects   |notes_textobj-user|
    UltiSnips - Support for inserting snippets of text  |notes_ultisnips|
    vcscommand - Version Control System integration     |notes_vcscommand|
    VimBall - Vim "package manager"                     |notes_vimball|
    Vis - The Visual Block Tool                         |notes_vis|
    VisIncr - Increment visually selected areas         |notes_visincr|
    VisSort - Sort visually selected areas              |notes_vissort|
    VisSwap - Swap visually selected areas              |notes_visswap|
4.  Customizations                                      |notes_customizations|
5.  Tips                                                |notes_tips|


==============================================================================
1.  Introduction                                        *notes_intro*

These are notes for Vim usage and setup.


==============================================================================
2.  Installation                                        *notes_installation*

Prerequisites for Ubuntu: >
    sudo apt-get install libgpmg1-dev libperl-dev ruby1.8-dev
or, for more automation: >
    sudo apt-get build-dep vim-gnome

Prerequisites for Fedora: >
    sudo yum install -y ruby ruby-devel perl-ExtUtils-Embed python-devel
    sudo yum install -y gtk+-devel gtk2-devel gpm gpm-devel
or, for more automation: >
    sudo yum-builddep -y vim-X11

(Note: this fix is obsolete in modern Vim.)
On 64-bit Linux, Python libraries live in /usr/lib64/pythonx.y,
and Vim's configuration script doesn't find the config directory.
One fix appears to be the following symlink: >

  ln -s /usr/lib64/python2.6/config /usr/lib/python2.6/config

Inspiration taken from:
  http://users.skynet.be/antoine.mechelynck/vim/compunix.htm

The detailed steps for download and building Vim are captured in
the script ~/.vim/buildtool.  See that script for more information.

Update the hg directory (in the default download location) with the latest Vim
source: >

  # From any directory; updates clone in <download>/vim/7.3/hg:
  ~/.vim/buildtool 7.3 update

Unpack, configure, build, and create binary and source tarballs: >

  cd ~/build
  rm -rf vim-7.3
  ~/.vim/buildtool 7.3

Installation of final tarball is done as follows: >
    sudo tar -C / -zxf vim-7.3/vim-7.3.patchlevel.i386.tar.gz

After installation on Linux, the distro-provided global vimrc file will not be
used, so Vim will come up in VI-compatible mode for users (e.g. root) that
don't have a ~/.vimrc file.  To use the distro's global vimrc file, create a
symlink $VIM/vimrc (/usr/local/share/vim/vimrc) that points to the
distro-provided global vimrc.

On Fedora: >
    ln -s /etc/vimrc /usr/local/share/vim/vimrc

On Ubuntu: >
    ln -s /etc/vim/vimrc /usr/local/share/vim/vimrc

To register as the system alternative: >

  for i in gvim gview gvimdiff; do
    update-alternatives --install /usr/bin/$i $i /usr/local/bin/$i 500
  done

If /usr/share/applications/*gvim.desktop exists, it may be necessary to
update this line: >
    Exec=gvim -f %F

to use a full path: >
    Exec=/usr/local/bin/gvim -f %F

Fonts
-----

On Linux, ensure the following fonts are available:

- levien-inconsolata-fonts (Fedora package).  Reference:
  http://www.levien.com/type/myfonts/inconsolata.html

- Bitstream Vera Sans.  Reference:
  http://www.gnome.org/fonts/

Sources
-------

Vim source lives in a mercurial repository as described here:
  http://www.vim.org/download.php

Clone the repository via: >
  cd ~/build
  hg clone https://vim.googlecode.com/hg/ vim

Windows build notes:
--------------------

These are very green at present.

Follow instructions found here:
http://cream.cvs.sourceforge.net/viewvc/cream/misc/

In particular, vim-build.bat is the main build script, and
vim-build-INSTALLS.txt has some pre-requisites.

Acquire and install the following dependencies:

- Cygwin:

  - URL: http://www.cygwin.com/

  - Install to c:\cygwin or ensure that Cygwin's bin directory is in PATH.

  - Install base packages plus:

    - binutils
    - gcc
    - make

- Nullsoft installer:

  - URL: http://nsis.sourceforge.net/Download

  - Install to default location or customize NSIS variable.

- Python 2.7:

  - URL: Python

  - Use 32-bit standard distribution.

  - Install to default location or customize PYTHON variable.

- Perl 5.8:

  - Prefer 32-bit Strawberry Perl distribution.

  - URL: http://strawberryperl.com/

  - Install to default location or customize PERL variable.

- Lua

  - Use Lua's Windows installer.

  - URL: http://code.google.com/p/luaforwindows/
    http://luaforwindows.googlecode.com/files/LuaForWindows_v5.1.4-46.exe

  - Also requires VC2005 runtime:
    http://luaforwindows.googlecode.com/files/vcredist_x86.exe
    Place this in same directory with LUA installer and it will automatically
    be installed along with Lua.

  - Install to default location or customize LUA variable.

- Mercurial:

  - Use Inno Setup installer (either 32-bit or 64-bit).

  - URL: http://mercurial.selenic.com/

  - Allow installer to update PATH.


...FROM HERE DOWN CURRENTLY FAIL...

o Ruby 1.8
  * Fix  C:\ruby\lib\ruby\1.8\i386-mingw32\config.h

      1: #if _MSC_VER != 1200
      2: #error MSC version unmatch
      3: #endif

    to

      1: /*#if _MSC_VER != 1200
      2: #error MSC version unmatch
      3: #endif*/

o TCL 8.5
  * Use ActiveState one-click installer (no registration required)

o MZScheme 4.2 (now Racket (from PLT), not the entire PLT Scheme installer, just the MZ package)


==============================================================================
3.  Plugins                                             *notes_plugins*

For help with plugins:

- Adding local help files |add-local-help|

General bundle installation instructions: *bundle_installation*
- Move to bundle directory: >
  cd ~/.vim/bundle
- Move existing bundle (if any) to a backup directory (optional): >
  mv bundle-name bundle-name~
- Remove existing bundle (if any): >
  git rm -rf bundle-name
- Acquire latest version using one of these techniques: >
  git clone https://github.com/tpope/bundle-name
  tar -zxf .../bundle-name-x.y.z.tar.gz
- Rename extracted directory (if desirable), e.g.: >
  mv Bundle-Name-x.y.z bundle-name
- Enter new bundle directory: >
  cd bundle-name
- Switch to tag (if appropriate): >
  git checkout v2.1.0
- Test bundle until satisfied.
- Remove unwanted hidden directories: >
  rm -rf {.git,.bzr,.hg,.svn,.gitignore}
- Add clean bundle tree to Git: >
  git add .
- Process help tags (if any) in Vim: >
  vim '+Helptags|q'
- Force-add any documentation tag files: >
  git add -f doc/tag*

Installed plugins:

------------------------------------------------------------------------------
ALIGN                                                   *notes_align*
    Align things into columns                           |align|

Align vimball comprises AlignPlugin and AlignMapsPlugin with a combined
version number.

Version 36e_46h from section "Alignment" at
http://mysite.verizon.net/astronaut/vim/index.html

Installation:
- Distributed as a |vimball|  >

    vim .VimballRecord Align-36e_46h.vba.gz
    :RmVimball Align-xxx_yyy
    :n
    :so %
    :q

------------------------------------------------------------------------------
BUFEXPLORER                                             *notes_bufexplorer*
  Buffer switcher and manager                           |bufexplorer|

Version 7.3.2 from http://www.vim.org/scripts/script.php?script_id=42

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
BUFMRU                                                  *notes_bufmru*
  Most-recently-used buffer switcher                    |notes_bufmru|

(Documentation taken from top of bufmru.vim file.)

Usage:
  KEY(S)            ACTION
  <Space>           switch to the most recently used buffer and enter Bufmru
                    mode.

  in BUFMRU MODE:
  f  b              reach more MRU buffers (forward/backward)
  e  <Enter>        accept current choice
  !                 accept current choice (an abandoned modified buffer
                        becomes hidden)
  q  <Esc>          quit the mode, go back to start buffer (forcibly)
  y                 copy file name

  The mode times out after 'timeoutlen' ms.  A key not mapped in the mode
  (e.g. <Space>) quits the mode and executes as usual.

After yanking the filename, in insert mode CTRL-R=@@<CR> will put it in your
buffer.

Version 3.3 from http://www.vim.org/scripts/script.php?script_id=2346

Installation:
- Copy into ~/.vim/plugin/

------------------------------------------------------------------------------
BUFKILL                                                 *notes_bufkill*
  BufKill - Kill buffer without closing window

Usage:

:BUN      - unload a buffer, keeping window
:BD       - delete a buffer, keeping window
:BW       - wipe a buffer, keeping window
:BUNDO    - undo a previous :BUN, :BD, or :BW

See also:
:bun      - unload a buffer, closing window (vim built-in)    |:bunload|
:bd       - delete a buffer, closing window (vim built-in)    |:bdelete|
:bw       - wipe a buffer, closing window (vim built-in)      |:buwipe|

Version 1.1 from http://vim.sourceforge.net/scripts/script.php?script_id=1147

------------------------------------------------------------------------------
CLOSETAG                                                *notes_closetag*
  Close XML and HTML tags automatically


Version 0.9.1 from http://www.vim.org/scripts/script.php?script_id=13

Installation:
- Install as ~/.vim/scripts/closetag.vim
- In ~/.vim/scripts.vim, source the script as part of per-filetype setup: >
    runtime scripts/closetag.vim

------------------------------------------------------------------------------
CTRLP                                                   *notes_ctrlp*
  Fuzzy matches for files, buffers, etc.                |ctrlp|

Local customizations:

- Commands:

    :C [path]  ==> :CtrlP [path]
    :CD [path]  ==> :CtrlPDir [path]

- Normal-mode mappings:

    CTRL-P CTRL-B        CtrlPBookmarkDir
    CTRL-P c             CtrlPChange
    CTRL-P C             CtrlPChangeAll
    CTRL-P CTRL-D        CtrlPDir
    CTRL-P CTRL-F        CtrlP %:h
    CTRL-P CTRL-L        CtrlPLine
    CTRL-P CTRL-M        CtrlPMRU
    CTRL-P m             CtrlPMixed
    CTRL-P CTRL-O        CtrlPBuffer    ; Mnemonic: buffers are "Open" files.
    CTRL-P CTRL-P        CtrlP          ; From current working directory.
    CTRL-P CTRL-Q        CtrlPQuickfix
    CTRL-P CTRL-R        CtrlPRoot      ; From nearest enclosing project root.
    CTRL-P CTRL-T        CtrlPTag
    CTRL-P t             CtrlPBufTag
    CTRL-P T             CtrlPBufTagAll
    CTRL-P CTRL-U        CtrlPUndo

- When CtrlP is active, the pair CTRL-N/CTRL-P moves the cursor vertically to
  make a select, and CTRL-J/CTRL-K move through the command prompt history.

  This is for consistency with other plugins that use CTRL-N/CTRL-P for moving
  around, and to avoid binding a commonly used function to the tmux prefix key
  (CTRL-J).


Version 2012-12-21 (675faa77) from https://github.com/kien/ctrlp.vim

Installation:
- Follow bundle installation instructions (|bundle_installation|), with one
  exception.  You need to apply the following patch to allow centering of
  the selected tag: >

  diff --git a/bundle/ctrlp.vim/autoload/ctrlp/tag.vim b/bundle/ctrlp.vim/autoload/ctrlp/tag.vim
  index 83921a5..2288681 100644
  --- a/bundle/ctrlp.vim/autoload/ctrlp/tag.vim
  +++ b/bundle/ctrlp.vim/autoload/ctrlp/tag.vim
  @@ -108,6 +108,7 @@ fu! ctrlp#tag#accept(mode, str)
    el
      exe cmd tg
    en
  +	sil! norm! zvzz
    cal ctrlp#setlcdir()
   endf
<
------------------------------------------------------------------------------
COLORSAMPLERPACK                                        *notes_colorsampler*
  Color schemes and theme menu

Schemes recommended by Matt Gilbert:
- nuvola
- ps_color
- darkblue2

Version 8.03 from http://www.vim.org/scripts/script.php?script_id=625

Installation:
- Unzip in ~/.vim/

------------------------------------------------------------------------------
DUAL                                                    *notes_dual*
  Dual color scheme (gvim, vim)                         |notes_dual|

Version 1.1 from http://www.vim.org/scripts/script.php?script_id=2688

Installation:
- Copy to ~/.vim/colors/dual.vim

Use: >
    :colorscheme dual

------------------------------------------------------------------------------
EXTLINE                                                 *notes_extline*
  Extend lines (e.g., for underlined titles)            |extline.txt|

CTRL-L CTRL-L     Auto-line update
CTRL-L CTRL-H     Horizontal line update
CTRL-L CTRL-U     Change to underlined title
CTRL-L CTRL-O     Change to overlined title
CTRL-L CTRL-I     Change to underlined and overlined title

Single-line headings:
CTRL-L =          Force Section heading (level 1)
CTRL-L 1
CTRL-L -          Force Subsection heading (level 2)
CTRL-L 2
CTRL-L ^          Force Subsubsection heading (level 3)
CTRL-L 3
CTRL-L "          Force Paragraph heading (level 4)
CTRL-L 4
CTRL-L '          Force level 5 heading
CTRL-L 5

Double-line headings:
CTRL-L #          Force Part heading (level 9)
CTRL-L 9
CTRL-L *          Force Chapter heading (level 0)
CTRL-L 0

(Custom plugin)

------------------------------------------------------------------------------
ENHANCEDCOMMENTIFY                                      *notes_enhcommentify*
  Comment lines in a program                            |EnhancedCommentify|

Toggles comments on current line or in visual range: >
    \x  - toggle comment, stay on current line
    \c  - toggle comment, move down one line

Version 2.3 from http://www.vim.org/scripts/script.php?script_id=23

Installation:
- Untar in ~/.vim/
- Copy contents from EnhancedCommentify-2.3: >
  cp -a EnhancedCommentify-2.3/* .
- Remove EnhancedCommentify-2.3: >
  rm -rf EnhancedCommentify-2.3/*
- Remove license file clutter: >
  rm LICENSE.EnhancedCommentify

------------------------------------------------------------------------------
EUNUCH                                                  *notes_eunuch*
  Helpers for UNIX                                      |eunuch.txt|

Vim sugar for the UNIX shell commands that need it the most. Commands include:

  :Unlink     Delete a buffer and the file on disk simultaneously.
  :Remove     Like :Unlink, but doesn't require a neckbeard.
  :Move       Rename a buffer and the file on disk simultaneously.
  :Chmod      Change the permissions of the current file.
  :Find       Run find and load the results into the quickfix list.
  :Locate     Run locate and load the results into the quickfix list.
  :SudoWrite  Write a privileged file with sudo.
  :W          Write every open window. Handy for kicking off tools like guard.

Version 2012-12-16 (19621140) from https://github.com/tpope/vim-eunuch

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
FONTSIZE                                                *notes_fontsize*
  Fontsize - increment/decrement font size              |fontsize.txt|

  <Leader>++    Increment font size
  <Leader>==    Increment font size
  <Leader>--    Decrement font size
  <Leader>00    Reset to default font size

The above mappings initiate a "font size" mode in which the following
additional individual keys become active:

  +          Increment font size
  =          Increment font size
  -          Decrement font size
  0          Revert to default font size
  !          Save current size as new default
  q          Quit "font size" mode
  <SPACE>    Quit "font size" mode
  <CR>       Quit "font size" mode

Other keys pressed will exit "font size" mode and perform their normal
function.

In addition, "font size" mode will automatically timeout after |timeoutlen|
milliseconds have elapsed without a keypress, because "font size" mode is
based on mappings.

Version 0.1.0 from http://www.vim.org/scripts/script.php?script_id=2809
(Original source in Subversion in ~/.vim/.)

Installation:

- Distributed as a |vimball|  >

    vim fontsize-0.1.0.vba
    :so %
    :q

------------------------------------------------------------------------------
FSWITCH                                                 *notes_fswitch*
  FSwitch - Filename switching (e.g., .c <=> .h)        |fswitch|

Usage:

Mapping       Command
\of           :FSHere      Other file "here" (current window)

\oh           :FSLeft      Other file into existing window on left
\oH           :FSLeft      Other file into new split window on left

\ol           :FSRight     Other file into existing window on right
\oL           :FSRight     Other file into new split window on right

\ok           :FSAbove     Other file into existing window above
\oK           :FSAbove     Other file into new split window above

\oj           :FSBelow     Other file into existing window below
\oJ           :FSBelow     Other file into new split window below

Compatibility command for Alternate.vim:

  :A        Same as :FSHere

Version 0.9.2 from http://www.vim.org/scripts/script.php?script_id=2590

Installation:

- Distributed as a |vimball|  >

    vim FSwitch-0.9.2.vba.gz
    :RmVimball FSwitch          (if upgrading)
    :so %
    :q

------------------------------------------------------------------------------
FUGITIVE                                                *notes_fugitive*
  A wrapper for Git in Vim                              |fugitive|

See |fugitive-commands| for more information on the commands, but some of the
more useful ones are:

  :Gdiff    Perform a diff of the working file with HEAD
  :Gblame   To see what commits modified a set of lines
  :Glog     To get a log of commits that affect the current file
  :Gstatus  To view the current state, stage changes, and many other things.
            See |fugitive-:Gstatus| for more information
  :Git      Run an arbitrary git command from within Vim

Version 2012-12-31 (582eb0d3) from git://github.com/tpope/vim-fugitive.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
GREP                                                    *notes_grep*
  Wrapper for grep/xargs                                |grep-plugin|

Usage:

:Grep          - Search for the specified pattern in the specified files
:GrepAdd       - Same as ":Grep" but adds the results to the current results
:Rgrep         - Run recursive grep
:RgrepAdd      - Same as ":Rgrep" but adds the results to the current results
:GrepBuffer    - Search for a pattern on all open buffers
:GrepBufferAdd - Same as ":GrepBuffer" but adds the results to the current
                 results
:Bgrep         - Same as :GrepBuffer
:BgrepAdd      - Same as :GrepBufferAdd
:GrepArgs      - Search for a pattern on all the Vim argument
                 filenames (:args)
:GrepArgsAdd   - Same as ":GrepArgs" but adds the results to the current
                 results
:Fgrep         - Run fgrep
:FgrepAdd      - Same as ":Fgrep" but adds the results to the current
                 results
:Rfgrep        - Run recursive fgrep
:RfgrepAdd     - Same as ":Rfgrep" but adds the results to the current
                 results
:Egrep         - Run egrep
:EgrepAdd      - Same as ":Egrep" but adds the results to the current
                 results
:Regrep        - Run recursive egrep
:RegrepAdd     - Same as ":Regrep" but adds the results to the current
                 results
:Agrep         - Run agrep
:AgrepAdd      - Same as ":Agrep" but adds the results to the current
                 results
:Ragrep        - Run recursive agrep
:RagrepAdd     - Same as ":Ragrep" but adds the results to the current
                 results

The above commands can be invoked like this:

   :Grep   [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Rgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Fgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Rfgrep [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Egrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Regrep [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Agrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Ragrep [<grep_options>] [<search_pattern> [<file_name(s)>]]

   :GrepAdd   [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :FgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RfgrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :EgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RegrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :AgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RagrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]

   :GrepBuffer [<grep_options>] [<search_pattern>]
   :Bgrep [<grep_options>] [<search_pattern>]
   :GrepArgs [<grep_options>] [<search_pattern>]

   :GrepBufferAdd [<grep_options>] [<search_pattern>]
   :BgrepAdd [<grep_options>] [<search_pattern>]
   :GrepArgsAdd [<grep_options>] [<search_pattern>]

Local customizations

- You can Regrep for the word under the cursor or the visual selection
  by pressing <F3>.

Installation:
- Install grep.vim in ~/.vim/plugin
- Install grep.txt in ~/.vim/doc
- :helptags ~/.vim/doc
- Note: grep.txt is not directly downloadable; it was created from a
  copy-and-paste of the plugin web page

- For Version 1.8: the xargs command is using --null.  OS X's version
  of xargs doesn't support this long alias for -0, so replace --null
  with -0 in grep.vim.  In Version 1.9, the new variable Grep_Xargs_Options
  was added to fix this problem.

Version 1.9 from http://www.vim.org/scripts/script.php?script_id=311

------------------------------------------------------------------------------
GUNDO                                                   *notes_gundo*
  Visualize your undo tree                              |gundo|

Gundo is a Vim plugin for visualizing your undo tree to make it usable.

To toggle the undo view, use :GundoToggle.

Version 2.4.0 from http://www.vim.org/scripts/script.php?script_id=3304

- Unzipped into ~/.vim/bundle.
- :Helptags
------------------------------------------------------------------------------
HEADERGUARD                                             *notes_headerguard*
  Add guards for header files                           |headerguard|

To add or update a header guard in a .h file: >

    :HeaderguardAdd

Version 0.1.0 from http://www.vim.org/scripts/script.php?script_id=2021

------------------------------------------------------------------------------
KEEPCASE                                                *notes_keepcase*
  Search-and-replace keeping case

Usage:

:SubstituteCase/\ctoto\(Titi\)tata/\1Tutu/g  >
    totoTitiTata -> titiTutu
    TotoTitiTata -> TitiTutu
    tototititata -> tititutu
    tototitiTata -> titiTutu
    TototitiTata -> TitiTutu

Can use other delimiters (e.g., #, @, ...)

Use \c to force case-insensitive matching, or use all lowercase in search.

Example: replace MyStruct with YourClass >
    #ifndef MYSTRUCT_H
    #define MYSTRUCT_H

    MyStruct myStruct;

    void
    MyStruct_function(MyStruct *pMyStruct)
    {
    }
    #endif /* MYSTRUCT_H */

Use this command: >
    :%SubstituteCase/mystruct/YourClass/g

Get this output: >
    #ifndef YOURCLASS_H
    #define YOURCLASS_H

    YourClass yourClass;

    void
    YourClass_function(YourClass *pYourClass)
    {
    }
    #endif /* YOURCLASS_H */

Using KeepCase or KeepCaseSameLen defined here, do a substitution like this: >
    %s/\u\<old_word\>/\=KeepCaseSameLen(submatch(0), 'new_word')/g

KeepCase(original_word, new_word)
  returns the new word maintaining case
  simply uses heuristics to work out some different common situations
    given   NewWord
    Word    --> Newword
    WORD    --> NEWWORD
    word    --> newword
    WoRd    --> NewWord
    woRd    --> newWord

KeepCaseSameLen(original_word, new_word)
  Returns the new word maintaining case
    Keeps the case exactly the same letter-for-letter
    It does work if the words aren't the same length, as it truncates or
    just copies the case of the word for the length of the original word.

Installation:
- Install keepcase.vim in ~/.vim/plugin

Version 2.0 from http://www.vim.org/scripts/script.php?script_id=6

------------------------------------------------------------------------------
LOCALVIMRC                                              *notes_localvimrc*
  Override settings via local files                     |localvimrc.txt|

At startup, searches for and sources .lvimrc files starting from the root
directory down to the current working directory.  Then, for each file that is
opened, searches for and sources .lvimrc files from the root directory down to
the file's containing directory.

The .lvimrc files are sourced by default using |:sandbox| (though this may be
changed via g:localvimrc_sandbox).  At present, Vim restricts the use of
|:setlocal| in a sandbox, so to change buffer-local properties, use |:set|
instead.

For example, to use 8-character tabs in "C" source files, create a .lvimrc
file in a parent directory containing the source files.  The .lvimrc file
might contain: >

  if &filetype == 'c'
      set tabstop=8 noexpandtab
  endif

To re-use a group of settings, create a function (say, in the global vimrc
file), then call it from the .lvimrc files.

Version 2.1.0 from git://github.com/embear/vim-localvimrc.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
LOREMIPSUM                                              *notes_loremipsum*
  Generate dummy text                                   |loremipsum.txt|

The Lorem Ipsum is a famous bit of Latin text used by typesetters for
focusing on layout without being distracted by the text's meaning.

See http://lipsum.com/ for details on Lorem Ipsum itself.

Usage:

:Loremipsum[!] [COUNT]     Insert COUNT words (default 100)

With [!], inserts as a single paragraph.

More options exist - see |loremipsum.txt| for details.

Version 0.2 from http://www.vim.org/scripts/script.php?script_id=2289

Installation:
- Distributed as a |vimball|  >

    vim loremipsum.vba.gz
    :so %
    :q

------------------------------------------------------------------------------
LUSTYEXPLORER                                           *notes_lustyexplorer*
  LustyExplorer - File/buffer switcher w/incr. search

Usage (taken from lusty-explorer.vim):

  <Leader>lf  - Opens the filesystem explorer.
  <Leader>lr  - Opens the filesystem explorer from the
                directory of the current file.
  <Leader>lb  - Opens the buffer explorer.
  <Leader>lg  - Opens the buffer grep, for searching through
                all loaded buffers

You can also use the commands:

  ":LustyFilesystemExplorer [optional-path]"
  ":LustyFilesystemExplorerFromHere"
  ":LustyBufferExplorer"
  ":LustyBufferGrep"

To suppress the default mappings, set this option:

  let g:LustyExplorerDefaultMappings = 0

When launched, a new window appears at bottom presenting a
table of files/dirs or buffers, and in the status bar a
prompt:

  >>

As you type, the table updates for possible matches using a
fuzzy matching algorithm (or regex matching, in the case of
grep).  Special keys include:

  <Enter>  open selected match
  <Tab>    open selected match
  <Esc>    cancel
  <C-c>    cancel
  <C-g>    cancel

  <C-t>    open selected match in a new [t]ab
  <C-o>    open selected match in a new h[o]rizontal split
  <C-v>    open selected match in a new [v]ertical split

  <C-n>    select [n]ext match
  <C-p>    select [p]revious match
  <C-f>    select [f]orward one column
  <C-b>    select [b]ack one column

  <C-u>    clear prompt

Additional shortcuts for the filesystem explorer:

  <C-w>    ascend one directory at prompt
  <C-r>    [r]efresh directory contents
  <C-a>    open [a]ll files in current table
  <C-e>    create new buffer with the given name and path

Filesystem Explorer:

 - Directory contents are memoized.  (<C-r> to refresh.)
 - You can recurse into and out of directories by typing the directory name
   and a slash, e.g. "stuff/" or "../".
 - Variable expansion, e.g. "$D" -> "/long/dir/path/".
 - Tilde (~) expansion, e.g. "~/" -> "/home/steve/".
 - Dotfiles are hidden by default, but are shown if the current search term
   begins with a '.'.  To show these file at all times, set this option:

      let g:LustyExplorerAlwaysShowDotFiles = 1

 You can prevent certain files from appearing in the table with the
 following variable:

   set wildignore=*.o,*.fasl,CVS

 The above will mask all object files, compiled lisp files, and
 files/directories named CVS from appearing in the table.  Note that they
 can still be opened by being named explicitly.

 See :help 'wildignore' for more information.

Buffer Explorer:

 - Buffers are sorted first by fuzzy match and then by most-recently used.
 - The currently active buffer is highlighted.

Buffer Grep:

 - Searches all loaded buffers.
 - Uses Ruby-style regexes instead of Vim style.  This means:

   - \b instead of \< or \> for beginning/end of word.
   - (foo|bar) instead of \(foo\|bar\)
   - {2,5} instead of \{2,5}
   - + instead of \+
   - Generally, fewer backslashes. :-)

 - For now, searches are always case-insensitive.
 - Matches from the previous grep are remembered upon relaunch;  clear with
   <C-u>.

Development versions found at: http://github.com/sjbach/lusty

Released versions appear here:
Version 4.0 from http://www.vim.org/scripts/script.php?script_id=1890

Installation:
- Install in ~/.vim/plugin

------------------------------------------------------------------------------
LUSTYJUGGLER                                            *notes_lustyjuggler*
  LustyJuggler - Quick access to recent buffers


Usage (taken from lusty-juggler.vim):

         <Leader>lj  - Opens the buffer juggler.

       You can also use this command:

         ":LustyJuggler"

       To suppress the default mapping, set this option:

         let g:LustyJugglerDefaultMappings = 0

       When launched, the command bar at bottom is replaced with a
       new bar showing the names of currently-opened buffers in
       most-recently-used order.

       The buffers are mapped to these keys:

           1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th
           ----------------------------------------
           a   s   d   f   g   h   j   k   l   ;
           1   2   3   4   5   6   7   8   9   0

       So if you type "f" or "4", the fourth buffer name will be
       highlighted and the bar will shift to center it as necessary
       (and show more of the buffer names on the right).

       If you want to switch to that buffer, press "f" or "4" again
       or press "<ENTER>".  Alternatively, press one of the other
       mapped keys to highlight another buffer.  To open the buffer
       in a new split, press "b" for horizontal or "v" for vertical.

       To display the key with the name of the buffer, add one of
       the following lines to your .vimrc:

         let g:LustyJugglerShowKeys = 'a'   (for alpha characters)
         let g:LustyJugglerShowKeys = 1     (for digits)

       To cancel the juggler, press any of "q", "<ESC>", "<C-c",
       "<BS>", "<Del>", or "<C-h>".

       LustyJuggler can act very much like <A-Tab> window switching.
       To enable this mode, add the following line to your .vimrc:

         let g:LustyJugglerAltTabMode = 1

       Then, given the following mapping:

         noremap <silent> <A-s> :LustyJuggler<CR>

       Pressing "<A-s>" will launch the LustyJuggler with the
       previous buffer highlighted. Typing "<A-s>" again will cycle
       to the next buffer (in most-recently used order), and
       "<ENTER>" will open the highlighted buffer.  For example, the
       sequence "<A-s><Enter>" will open the previous buffer, and
       "<A-s><A-s><Enter>" will open the buffer used just before the
       previous buffer, and so on.

Bonus: This plugin also includes the following command, which will
       immediately switch to your previously used buffer:

         ":LustyJugglePrevious"

       This is similar to the ":b#" command, but accounts for the
       common situation where the previously used buffer (#) has
       been killed and is thus inaccessible.  In that case, it will
       instead switch to the buffer used before that one (and on down
       the line if that buffer has been killed too).


Development versions found at: http://github.com/sjbach/lusty

Released versions appear here:
Version 1.4 from http://www.vim.org/scripts/script.php?script_id=2050

Installation:
- Install in ~/.vim/plugin

------------------------------------------------------------------------------
MARKDOWN                                                *notes_markdown*
  Markdown syntax highlighting

Version 9 from http://www.vim.org/scripts/script.php?script_id=1242

Installation:
- Install into ~/.vim/syntax/mkd.vim

------------------------------------------------------------------------------
MATCHIT                                                 *notes_matchit*
  Extended matching with '%'                            |matchit|

Press '%' to match:
  - Bracket pairs:  () [] {}
  - C-language #if / #else / #endif
  - HTML tags <start> / </end>
  - etc.

Version 1.13.2 from http://www.vim.org/scripts/script.php?script_id=39

Installation:
- Unzip in ~/.vim/
- :helptags ~/.vim/doc

------------------------------------------------------------------------------
NETRW                                                   *notes_netrw*
  File reading and writing across networks              |netrw|

Version 128 from http://www.vim.org/scripts/script.php?script_id=1075
(Also check Dr. Chip's site: http://mysite.verizon.net/astronaut/vim/#NETRW)

Use <Leader>fe to invoke :Explore.  This will explore in the directory
of the current file.

To dismiss netrw buffer, simply wipe it via :bwipe or similar.

Installation:
- Distributed as a |vimball|  >

    vim netrw.vba.gz
    :so %
    :q

------------------------------------------------------------------------------
OMNICPPCOMPLETE                                         *notes_omnicppcomplete*
  C/C++ Omnicompletion                                  |omnicppcomplete|

CTRL-X CTRL-O - Completion of normal identifiers.
"." or "->" - Completion of struct fields.

Within popup completion menu:
CTRL-Y - Yes: accept currently selected match.
CTRL-E - End completion, reverting to what was typed.
CTRL-N - Insert next completion.
CTRL-P - Insert previous completion.
<Down> - Select next match (like CTRL-N), but don't insert it.
<Up>   - Select previous match (like CTRL-P), but don't insert it.

Requires Exuberant ctags database with these options: >
    ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .

For more details on insert-mode completion:|ins-completion|

Version 0.41 from http://www.vim.org/scripts/script.php?script_id=1520

Installation:
- Unzip in ~/.vim/
- :helptags ~/.vim/doc

------------------------------------------------------------------------------
PAREDIT                                               *notes_paredit*
  Structured editing of Lisp S-expressions in Vim     |paredit|

Paredit tries to maintain a balanced state of matched characters, similar to
paredit.el for Emacs.  This is helpful for Lisp programming languages like
Clojure.

Version 0.9.7 from http://www.vim.org/scripts/script.php?script_id=3988

Installation (via pathogen):
- Unzip in ~/.vim/bundle/paredit
- :Helptags

------------------------------------------------------------------------------
PATHOGEN                                                *notes_pathogen*
  Runtime path management for bundles                   |notes_pathogen|

Version 2012-04-29 from https://github.com/tpope/vim-pathogen

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
POWERLINE                                               *notes_powerline*
  The ultimate vim statusline utility                   |Powerline.txt|

The default setup is actually very good.  If you find yourself tweaking the
segments that are available though, make sure to run :PowerlineClearCache,
otherwise you may not see your settings take effect.

Also, the GUI version can make use of a "fancy" patched font.
|Powerline-symbols-fancy| provides some information, but the README in
bundle/vim-powerline/fontpatches/README.rst provides more information.
If you use Droid Sans Mono as your font, a patched version of the font is
available here:
  https://github.com/jszakmeister/etc/blob/master/fonts/DroidSansMonoSlashed-Powerline.ttf

You can also use the following block on Linux and Mac OS X to help detect the
font and use it: >

    " Turn on fancy symbols on the status line
    if has("gui_running")
        if filereadable(expand("~/Library/Fonts/DroidSansMonoSlashed-Powerline.ttf")) ||
           \ filereadable(expand("~/.fonts/DroidSansMonoSlashed-Powerline.ttf"))
            if has("mac") || has("macunix")
                set guifont=Droid\ Sans\ Mono\ Slashed\ for\ Powerline:h14
            else
                set guifont=Droid\ Sans\ Mono\ Slashed\ for\ Powerline\ 14
            endif

            let g:Powerline_symbols = 'fancy'
        endif
    endif
<
Version 2012-08-17 from https://github.com/Lokaltog/vim-powerline

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
PROJECT                                                 *notes_project*
  Managing "projects" of files                          |project|

To invoke the project window: >
    :Project

Local customizations:
  <F8>            - toggles the project window on and off.
  CTRL-Q CTRL-P   - toggles the project window on and off.
  CTRL-Q P        - toggles the project window on and off.

Version 1.4.1 from http://www.vim.org/scripts/script.php?script_id=69

Installation:
- Unzip in ~/.vim/
- :helptags ~/.vim/doc

------------------------------------------------------------------------------
PYTHON                                                  *notes_python*
  Python Syntax file with folding

Version 2.6.6 from http://www.vim.org/scripts/script.php?script_id=790

Installation:
- Install into ~/.vim/syntax/python.vim

------------------------------------------------------------------------------
PYTHONCOMPLETE                                          *notes_pythoncomplete*
  Python Omnicompletion

Although this is distributed with Vim, it lags behind in the official
distribution.

Version 0.9 from http://www.vim.org/scripts/script.php?script_id=1542

Installation:
- Install as ~/.vim/autoload/pythoncomplete.vim

------------------------------------------------------------------------------
REPEAT                                                  *notes_repeat*
  Repeat operations for supported plugins.

Plugins need to support this feature explicitly (such as the
surround plugin).

Version 1.0 from http://www.vim.org/scripts/script.php?script_id=2136

Installation:
- Copy to ~/.vim/plugin/repeat.vim.

------------------------------------------------------------------------------
RUNVIEW                                                 *notes_runview*
  Run lines through filter into buffer                  |RunView|

Version 1e from http://mysite.verizon.net/astronaut/vim/#RUNVIEW

Installation:
- Distributed as a |vimball|  >

    vim RunView.vba.gz
    :so %
    :q

Local customizations: >
  " Setup Bash as default view to run.
  let g:runview_filtcmd="bash"

------------------------------------------------------------------------------
SELFDOT                                                 *notes_selfdot*
  Changes "." to "self." in Python                      |notes_selfdot|

(Temporarily removed, as it's not Python-specific and is impossible
to work around.)

Pressing "." in insert mode will cause "self." to be inserted
in cases where "." would be a syntax error in Python.

Version 1.0.2 from http://www.vim.org/scripts/script.php?script_id=2911

Installation:
- Copy to ~/.vim/plugin

------------------------------------------------------------------------------
SCROLLCOLOR                                             *notes_scrollcolor*
  Scroll through color schemes

Usage: >

  :SCROLLCOLOR  Use arrow keys to scroll through color schemes
  :COLORSCROLL  [Synonym for :SCROLLCOLOR]
  :PREVCOLOR  Move to alphabetically previous color
  :NEXTCOLOR  Move to alphabetically next color

Version 2006-07-19 from http://www.vim.org/scripts/script.php?script_id=1488

Installation:
- Copy ScrollColor.vim to ~/.vim/plugin/ScrollColor.vim

- Edit ScrollColor.vim and comment out these mappings (toward bottom of file): >

    map \n
    map \p
    map \c

------------------------------------------------------------------------------
SURROUND                                                *notes_surround*
  Manipulating "surroundings"                           |surround.txt|

Usage (An asterisk (*) is used to denote the cursor position):
  Old text                  Command     New text ~
  "Hello *world!"           ds"         Hello world!
  [123+4*56]/2              cs])        (123+456)/2
  "Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
  if *x>3 {                 ysW(        if ( x>3 ) {
  my $str = *whee!;         vllllS'     my $str = 'whee!';

See |surround.txt| for more complete examples and documentation.

Local customization: Disabled visual-mode "s" mapping as it will be
removed eventually.  Instead, use visual-mode "S".

Version 1.90 from http://www.vim.org/scripts/script.php?script_id=1697

Installation:
- Unzip to as ~/.vim
- :helptags ~/.vim/doc

------------------------------------------------------------------------------
SVN                                                     *notes_svn*
  View Subversion diffs while writing commit log

Install this plugin as ~/.vim/ftplugin/svn.vim and use Vim as the
editor for Subversion's command-line interface.  When editing a
commit log message, the Subversion diffs will be displayed in a
separate window.

Version 0.5 from http://www.vim.org/scripts/script.php?script_id=978

Note: Named svn-diff.vim in the index, but svn.vim is the new name.

Installation:
- Copy svn.vim to ~/.vim/ftplugin/

------------------------------------------------------------------------------
SWAPIT                                                  *notes_swapit*
  Cycle through related words                           |swapit|

Press CTRL-A to cycle forward through the list of related words
Press CTRL-X to cycle forward through the list of related words

Works in Normal and Visual mode.

E.g., with cursor on "true" pressing CTRL-A changes the word to "false".

Version 0.3 from http://www.vim.org/scripts/script.php?script_id=2294

Installation:
- Untar to ~/.vim
For version 0.3, need the following patch: >

  --- plugin/swapit.vim   (revision 549)
  +++ plugin/swapit.vim   (revision 550)
  @@ -327,14 +327,14 @@
       else

           if a:is_visual == 'yes'
  -            if next_word =~ "\W"
  +            if next_word =~ '\W'
                   let in_visual = 1
                   exec 'norm! gv"sp`[v`]'
               else
                   exec 'norm! gv"spb'
               endif
           else
  -            if next_word =~ "\W"
  +            if next_word =~ '\W'
                   let in_visual = 1
                   exec 'norm! maviw"sp`[v`]'
               else

------------------------------------------------------------------------------
TAGSIGNATURE                                            *notes_tagsignature*
  Balloon signatures for tags

Displays the signature of a tag when you hover the mouse over that tag.
Requires a tags file.

Version r319 from http://www.vim.org/scripts/script.php?script_id=2714

Installation:
- Copy to ~/.vim/plugin/tag_signature.vim

------------------------------------------------------------------------------
TAGBAR                                                  *notes_tagbar*
  Source code browser                                   |tagbar.txt|

Local customizations:
  <S-F8>        - toggle the tagbar (:TagbarToggle)
  CTRL-Q CTRL-T - toggle the tagbar (:TagbarToggle)
  CTRL-Q T      - toggle the tagbar (:TagbarToggle)

Version 2012-11-22 (feebffcd) from https://github.com/majutsushi/tagbar

Installation:
- Follow bundle installation instructions (|bundle_installation|).

Requires ctags.exe to be in the path.  Generally this comes with Linux
distributions.  Compiled binaries may be found at
http://ctags.sourceforge.net/

------------------------------------------------------------------------------
TEXTOBJ-INDENT                                          *notes_textobj-indent*
  Indentation-based text objects                        |textobj-indent.txt|

Support for text objects based on indentation.

Use "i" for text objects based on indentation.

E.g., to select block:
    vii

Version 0.0.3 from http://www.vim.org/scripts/script.php?script_id=2484

Installation:
- Requires textobj-user support
- Unzip in ~/.vim/ (note unfortunate directory prefix vim-textobj-indent-0.0.3)
- :helptags ~/.vim/doc

------------------------------------------------------------------------------
TEXTOBJ-USER                                            *notes_textobj-user*
  Library support for user-defined text objects         |textobj-user.txt|

Library to support construction of user-defined text objects; by itself,
library is not terribly useful.  Enables things like |textobj-indent|

Version 0.3.8 from http://www.vim.org/scripts/script.php?script_id=2100

Installation:
- Unzip in ~/.vim/ (note unfortunate directory prefix vim-textobj-user-0.3.8)
- :helptags ~/.vim/doc

------------------------------------------------------------------------------
ULTISNIPS                                               *notes_ultisnips*
    Support for inserting snippets of text              |UltiSnips|

Provides TextMate-like snippets for inserting text with placeholders.

Configured as follows:

- <Tab>   - Expand trigger
- <Tab>   - Jump forward trigger
- <s-Tab> - Jump backward trigger

To see snippets whose triggers begin with a given prefix, type the prefix
followed by <C-Tab>.

Snippets live in any "UltiSnips" subdirectory on the 'runtimepath'.  Snippets
earlier in the 'runtimepath' take precedence.  For example:

- ~/.vim/UltiSnips         - Snippets common to all configurations
- ~/.vim/local/UltiSnips   - Optional snippets local to an installation

For select languages, the default snippets provided by UltiSnips are
overridden by local snippets.  This is accomplished by putting the directory
~/.vim/pre-bundle/clearsnippets into the 'runtimepath' before the new locally
defined snippets.  In this directory are snippets files using the
"clearsnippets" directive to wipe out the default snippets.

To avoid rampant duplication when defining snippets, a custom set of Python
scripts is used to define snippets.  For example, the file
~/.vim/UltiSnips/c.snippets.py generates the snippets found in
~/.vim/UltiSnips/c.snippets.  All snippets make be "built" via the Makefile in
~/.vim/UltiSnips by executing "make".

Version 2.2 from http://www.vim.org/scripts/script.php?script_id=2715

Installation:
- Follow bundle installation instructions (|bundle_installation|).
- See ~/.vim/vimrc for detailed configuration steps

------------------------------------------------------------------------------
VCSCOMMAND                                               *notes_vcscommand*
  Version Control System integration                     |vcscommand|

Local customizations:
- Using <Leader>s (for "svn") instead of <Leader>c (originally "cvs").
  Avoids conflict with <Leader>c mapping of EnhancedCommentify.

Maps work on file associated with current buffer

\sa VCSAdd                add to source control
\sn VCSAnnotate           perform "svn annotate" (svn blame)
\sc VCSCommit             commit file
\sD VCSDelete             delete from source control
\sd VCSDiff               diff against most CURRENT
\sg VCSGotoOriginal       delete VCS scratch buffer, return to original file
\sG VCSGotoOriginal!      as above, but wipeout all scratch buffers
\si VCSInfo               "svn info"
\sl VCSLog                "svn log"
\sL VCSLock               "svn lock"
\sr VCSReview             show version of current file (default: most recent)
\ss VCSStatus             "svn status"
\su VCSUpdate             "svn update"
\sU VCSUnlock             "svn unlock"
\sv VCSVimDiff            use vimdiff to show differences

The ex commands allow additional parameters which are generally passed to
the underlying source control system.

Version 1.99.46 from http://www.vim.org/scripts/script.php?script_id=90

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
VIMBALL                                                 *notes_vimball*
  "Package manager" for supporting .vba VimBalls        |vimball|

Version 26 from http://vim.sourceforge.net/scripts/script.php?script_id=1502

Installation:
- Untar in ~/.vim/

------------------------------------------------------------------------------
VIMCLOJURE                                              *notes_vimclojure*
  Support for the Clojure programming language          |VimClojure|

Version 2.3.1 from http://www.vim.org/scripts/script.php?script_id=2501

Installation:
- Ran "unzip /path/to/vimclojure-<version>.zip -x LICENSE.txt README.markdown"
  in ~/.vim/
- Ran :helptags ~/.vim/doc

------------------------------------------------------------------------------
VIS                                                     *notes_vis*
  The Visual Block Tool                                 |vis.txt|

Performs an arbitrary Ex command on a visual highlighted block.

Mark visual block (CTRL-V) or visual character (v),
  press ':B ' and enter an Ex command [cmd].

  ex. Use ctrl-v to visually mark the block then use
    :B cmd     (will appear as   :'<,'>B cmd )

  ex. Use v to visually mark the block then use
    :B cmd     (will appear as   :'<,'>B cmd )

Popular uses for this command include: >

  :B s/pattern/output/
  :B left
  :B right

Using // and ?? after a visual selection (the // is only available
if you have g:vis_WantSlashSlash=1 in your <.vimrc> file):
>
  ex. select region via V, v, or ctrl-v
      //pattern
<
You'll actually get a long leader string of commands to restrict
searches to the requested visual block first.  You may then enter
the pattern afterwards.  For example, using "v" to select this
paragraph, you'll see something like: >

  /\%(\%(\%80l\%>12v\)\|\%(\%83l\%<53v\)\|\%(\%>80l\%<83l\)\)\&
<
You may enter whatever pattern you want after the \&, and the
pattern search will be restricted to the requested region.

The "S" command in visual mode:
>
  ex. select region via V, v, or ctrl-v
      :S pattern
<
    The ":S pattern" will appear as ":'<,'>S pattern".  This
    command will move the cursor to the next instance of the
    pattern, restricted to the visually selected block.

Installation:
- Distributed as a |vimball|  >

    vim vis.vba.gz
    :so %
    :q

Version 20a from section "Visual Block Commands" at
http://mysite.verizon.net/astronaut/vim/index.html

------------------------------------------------------------------------------
VISINCR                                                 *notes_visincr*
  Increment visually selected areas                     |visincr.txt|

Using block visual mode (CTRL-v), visually select a column of numbers,
then use one of the following:

    :I [#]  will use the first line's number as a starting point
      default increment (#) is 1
      will justify left (pad right)
      For more see |visincr-I|

    :II [# [zfill]]
      will use the first line's number as a starting point
      default increment (#) is 1
      default zfill         is a blank (ex. :II 1 0)
      will justify right (pad left)
      For more see |visincr-II|

         ORIG      I        II
         +---+   +----+   +----+
         | 8 |   | 8  |   |  8 |
         | 8 |   | 9  |   |  9 |
         | 8 |   | 10 |   | 10 |
         | 8 |   | 11 |   | 11 |
         +---+   +----+   +----+

Also try the "restricted" variants (:RI, :RII) which skip over lines
that don't have numbers.  Can help to renumber paragraphs.
See the following:

  Restricted left-justified incrementing......|visincr-RI|
  Restricted right-justified incrementing.....|visincr-RII|


Installation:
- Distributed as a |vimball|  >

    vim visincr.vba.gz
    :so %
    :q

Version 20b from section "Visual Incrementing" at
http://mysite.verizon.net/astronaut/vim/index.html

------------------------------------------------------------------------------
VISSORT                                                 *notes_vissort*
  Sort visually selected areas                          |vissort.txt|

   :[range]Vissort   actually same as Bisort
   :'<,'>Vissort     apply sort to visual-block only

   Select a block of text with visual-block mode; use the Vissort command to
   sort the block.  This function sorts the lines *based on the selected
   column*.

   EXAMPLE

    Original Text:
    one      two      three   four
    five     six      seven   eight
    nine     ten      eleven  twelve
    thirteen fourteen fifteen sixteen

    Use ctrl-v (Visual-Block) to select two..fourteen column,
    then Vissort:
    thirteen fourteen fifteen sixteen
    five     six      seven   eight
    nine     ten      eleven  twelve
    one      two      three   four

More commands available at |vissort.txt|

Installation:
- Distributed as a |vimball|  >

    vim vissort.vba.gz
    :so %
    :q

Version 4c from section "Visual Block Sorting" at
http://mysite.verizon.net/astronaut/vim/index.html

------------------------------------------------------------------------------
VISSWAP                                                 *notes_visswap*
  Swap visually selected areas                          |visswap.txt|

Visually select a region and press CTRL-y to "yank".
Visually select another region and press CTRL-t to "trade"
the two regions.
(The default is CTRL-x to "exchange" the regions, but this conflicts with the
swapit plugin.)

Installation:
- Distributed as a |vimball|  >

    vim visswap.vba.gz
    :so %
    :q

Version 4e from section "Visual Mode Based Swap" at
http://mysite.verizon.net/astronaut/vim/index.html

==============================================================================
4.  Customizations                                      *notes_customizations*

------------------------------------------------------------------------------
Spell checking

In order to allow per-user overriding of spell-check settings, there are two
variables for configuring spell-checking.  Adjust these variables in per-user
configuration files (e.g., ~/.vim/user/someuser-after.vim).

To disable automatic configuration of the 'spell' setting entirely: >

  let g:Spell = 0

To turn off spell-checking for just "C" source code: >
  let g:SpellMap["c"] = "<off>"

Turn off spell-checking for the entire "<source>" group: >
  let g:SpellMap["<source>"] = "<off>"

Turn on spell-checking for files of type "javascript": >
  let g:SpellMap["javascript"] = "<on>"

Add "perl" filetype to the "<source>" group: >
  let g:SpellMap["perl"] = "<source>"

See g:SpellMap documentation in vimrc for more detail.

------------------------------------------------------------------------------
Buffer switchers and filesystem navigators

Lusty Juggler - rapidly switch among buffers

  <M-s>  Launch Lusty Juggler; while in juggler, press again to cycle
         through most-recently-used buffers.
  \lj    Launch Lusty Juggler (default mapping, doesn't do MRU cycling).

BufMRU - most-recently-used buffer switcher

  <space> Switch to MRU buffer and enter Bufmru mode.

  See |notes_bufmru| for more details.

Buf Explorer - display all buffers in a list, switch or delete buffers, etc.

  \be    Invoke BufExplorer.

------------------------------------------------------------------------------
Building and Running

Press <F9> to save all buffers and execute :make in current directory.

Press <F5> to execute current buffer (useful when editing Python scripts,
for example).

Press <F12> to execute the fifosignal command (a separate program).  Useful
in combination with a separate command prompt using the fifowait command,
commonly used to trigger a build outside of Vim.  For example: >

    while fifowait; do echo "Building"; ./buildall; done

------------------------------------------------------------------------------
QuickFix window, diff mode

Use <F4> and <S-F4> to navigate forward and backward through the QuickFix
list, or through diffs when diff mode is active (:help :diffthis).

Use :DiffOrig to compare unsaved changes against original on-disk.
Use :diffoff to remove diff mode.
Use :diffthis to put current window into diff mode (do on two windows
separately to do a diff between them).

------------------------------------------------------------------------------
Dragging text in four directions

Text may be "dragged" in any of the four directions (Up, Down, Left, or
Right).  In normal and insert modes, the current line will be dragged; in
select mode, the selection will be dragged.

Lines dragged vertically move as whole lines.

Lines dragged horizontally are shifted one space to the left or right,
generally as if the standard "<<" or ">>" operator had been invoked with the
shift width ('sw') variable temporarily set to one.  For block-wise
selections, this implies that only the selected block is shifted.

Dragging up:
  <M-Up>        (select mode, insert mode, normal mode)
  <M-K>         (select mode, insert mode, normal mode)
  -             (select mode)

Dragging down:
  <M-Down>      (select mode, insert mode, normal mode)
  <M-J>         (select mode, insert mode, normal mode)
  +             (select mode)

Dragging left:
  <M-Left>      (select mode, insert mode, normal mode)
  <M-H>         (select mode, insert mode, normal mode)
  <Backspace>   (select mode)

Dragging right:
  <M-Left>      (select mode, insert mode, normal mode)
  <M-H>         (select mode, insert mode, normal mode)
  <Space>       (select mode)

------------------------------------------------------------------------------
Deleting "Rubbish" Whitespace

The normal-mode mapping "drw" deletes "rubbish" whitespace, bringing a
run of spaces down to a single space character, or a group of consecutive
blank lines down to a single blank line.

------------------------------------------------------------------------------
Deleting Trailing Whitespace

The normal-mode command :StripTrailingWhitespace will remove all trailing
whitepsace from the current buffer.  It accepts a line range as well, such
that selecting a visual range first followed by typing
:StripTrailingWhitespace will strip only the selected lines.

<Leader><Leader>$ is mapped to :StripTrailingWhitespace for convenience.

------------------------------------------------------------------------------
Re-formatting paragraphs

The useless key "Q" is mapped to the "gq" reformatting operator.  Pressing
"QQ" on a line reformats that line.  Pressing "Q" in visual mode reformats the
selection.

<M-q> is mapped to "gqip", which formats an "inner paragraph" similar to the
Emacs feature bound to the same key.

------------------------------------------------------------------------------
Moving "out" hierarchically

Press <C-O><C-O> in insert or visual modes to exit "out" to the containing
context.  For example, if your cursor is between parentheses, pressing
<C-O><C-O> will move out just beyond the parentheses.  This is helpful for
getting outside text that was automatically inserted (e.g., from a snippet).

The following may be "exited": >

  (Parentheses)
  [Brackets]
  {CurlyBraces}
  break;

------------------------------------------------------------------------------
Additional CTRL-O mappings

<C-O>o      - Open a line below this one
<C-O>;      - Append ";" to the current line
<C-O>:      - Append ":" to the current line
<C-O>.      - Append "." to the current line
<C-O><CR>   - Append "." and <CR> to the current line unless overridden by a
              filetype-specific mapping
<C-O><C-H>  - Exit visual modes at start of selected text
<C-O><C-L>  - Exit visual modes at end of selected text

------------------------------------------------------------------------------
Movement by screen lines

The standard movement keys have been remapped to move by screen lines instead
of logical lines.  For "short" lines, there is no difference, but for wrapped
lines, this reverses the default behavior of using logical lines.  Use "g" and
the original key to move by logical lines.

------------------------------------------------------------------------------
Emacs-style command-line editing

The standard Emacs-style command-line editing keys as used in Bash have been
mapped for command-line mode.  These include:

<C-A>   Start of line
<C-B>   Move left one character
<C-D>   Delete character under cursor
<C-F>   Move right one character
<C-N>   Next command history line
<C-P>   Previous command history line
<M-b>   Move left one word
<M-f>   Move right one word

<C-G>   Edit command-line history (used to be <C-F>)

The original meanings for these keys may be activated by first pressing <C-O>
(mnemonic: "Original").

Original meanings:
<C-A>   Insert all matching filenames
<C-B>   <Home>
<C-D>   List matching names
<C-F>   Edit command-line history
<C-G>   Nothing
<C-N>   Next match after wildchar, or recall next command-line history
<C-O>   Nothing
<C-P>   Prev. match after wildchar, or recall prev. command-line history

------------------------------------------------------------------------------
Windows-style clipboard support

Because the Windows standard keys for clipboard support are already taken in
Vim, they have been mapped to the same keys using Alt:

<M-a>         Select all
<M-z>         Undo
<M-x>         Cut to clipboard
<M-c>         Copy to clipboard
<M-v>         Paste from clipboard

In addition, old-style mappings exist:

<S-Insert>    Paste from clipboard
<C-S-Insert>  Paste from primary X selection
<C-Insert>    Copy to clipboard

------------------------------------------------------------------------------
Putting most-recently-yanked text

By default, yanking (e.g, "yy") copies your text into the unnamed register,
and putting (e.g., "p") puts text from the unnamed register into your
buffer.  Putting text onto a visual selection replaces that selection with
your text, but it also has the sometimes undesirable effect of overwriting
your unnamed register with the previously selected text.  Subsequent "put"
operations will then use the overwritten text instead of your previously
yanked text.

The manual work-around for this problem is to explicitly use register 0 when
putting, via: >

  "0p

To make this easier, a visual mode mapping of capital P performs a put from
register 0.  This allows a yank followed by repeated selections and puts.

------------------------------------------------------------------------------
Search for word under cursor

Vim's standard "*" operator (which searches for the word under the cursor) has
been modified to leave the cursor unmoved.  In visual mode, the selection
becomes the search text.

Use <F3> to begin a :Regrep command on the word under the cursor (or the
selection in Visual mode).  See :help grep.txt for details on the grep plugin
and the :Regrep command.

Use the mapping \z after a search to fold all but the matching lines.

------------------------------------------------------------------------------
Pasting lines into Vim

When pasting lines copied from outside Vim, the content is subject to
auto-indentation at each <CR>.  The |'paste'| variable may be set to
prevent these unintended effects during pasting.

Press <S-F12> key to toggle the state of the |'paste'| variable; it may be set
or cleared manually via: >
    :set paste
    :set nopaste
Be sure to exit insert mode when pasting with :set paste active because
mappings are disabled, so <S-INSERT> won't be interpreted as the paste
operation.

------------------------------------------------------------------------------
Tag files

Tag files (named "tags") will now be searched starting in the current working
directory and all parent directories toward the root.

The "gf" command ("goto file") will use any filename tags to augment the
search path (:help 'path').

The custom :Ctags command will launch "ctags-std" in the current directory to
update the tags.

------------------------------------------------------------------------------
Cscope

Key bindings have been setup for cscope (:help cscope):

<C-\>c     :cs find c on current word under cursor
<C-\>d     :cs find d on current word under cursor
<C-\>e     :cs find e on current word under cursor
<C-\>f     :cs find f on current word under cursor
<C-\>g     :cs find g on current word under cursor
<C-\>i     :cs find i on current word under cursor
<C-\>s     :cs find s on current word under cursor
<C-\>t     :cs find t on current word under cursor

------------------------------------------------------------------------------
Window Layout

Usage:

:L          Layout windows nicely using current number of columns.
:L <n>      Layout windows in an <n>-column format.
:L1         Layout windows in a one-column format.
:L2         Layout windows in a two-column format.
:L3         Layout windows in a three-column format.
:L4         Layout windows in a four-column format.
:L5         Layout windows in a five-column format.

Performs the following:
- Sets number of character columns for the requested number of window
  columns, e.g.:
  - :L1  ==> 80 characters
  - :L2  ==> 161 characters (2 * 80 + 1)
  - :L3  ==> 242 characters (3 * 80 + 2)
  - :L4  ==> 323 characters (4 * 80 + 3)
  - :L5  ==> 404 characters (5 * 80 + 4)
  - :L n ==> n * 80 + (n - 1)

  This leaves room for n windows with (n - 1) dividing lines between them.

- Moves quickfix window to the bottom, re-sizes to 10 lines (if already open).
- Makes all windows equally sized (via Ctrl-w_=).
- Moves current window to the top (L1 only).

*NOTE* If your Gvim window isn't positioned to span the edges of your monitor,
the number of character columns may be truncated to keep Gvim on a single
monitor.  To work around this, move Gvim to straddle the boundary between
monitors before executing the above commands.

<C-Q><C-Q>  Toggle the QuickFix window on or off (gvim only)

------------------------------------------------------------------------------
Alternatives to :bufdo, :windo, :tabdo

These behave as their built-in counterparts but restore the current
window, buffer, or tab when they complete.

Usage:

:Windo command
:Bufdo command
:Tabdo command

------------------------------------------------------------------------------
Highlight command

The custom command :Highlight provides highlighting of non-conforming coding
styles to make it easier to locate problems during editing.

Highlights tabs, long lines, etc.: >
    :Highlight *          ; enable all
    :Highlight no*        ; disable all
    :Highlight <Tab>      ; command-line completion to show all options

Options include: >
    commas
    keywordspace
    longlines
    tabs
    trailingspace


==============================================================================
5.  Tips                                                *notes_tips*

Use the following command: >
    :help quickref
to get a nice quick reference guide.

- Use filetype=Wikipedia for MediaWiki files.

Set 'path' variable to include **/pubinc, **/src: >
    set path+=**/pubinc,**/src

Use |gf| to jump to file under cursor (powerful in combination with setting
the 'path' variable).

Use |:find| instead of |:edit| to use 'path' to locate a file.

Use |]p| and |]P| to perform |p| and |P| with re-indentation of the pasted text.
(Or can use |]p| and |[p| for paste-after and paste-before.)

Try @: to repeat the last ex-mode command; to repeat again, use @@.

Use g& to repeat the last Search-and-replace.

If your syntax highlighting gets out of sync, try the command: >
    :syntax sync fromstart

------------------------------------------------------------------------------
Command-line window

Special window for editing current and historical command and searches.

From command-line mode or while editing a search pattern, press CTRL-G to open
the window (Note: Vim default is to use CTRL-F, but this has been remapped).

From normal mode, press "q:" or "q/" to open the command-history or
search-history window, respectively.

You can edit, cut, paste, yank, etc., from these history windows.  Press
CTRL-C to exit.

Press <CR> on a line in the window to execute it.

------------------------------------------------------------------------------
Debugging Vim problems

- To disable plugins, ~/.vimrc, and ~/.gvimrc, use ``-u NONE``.
- Use -N to set nocompatible.

Standard invocation for bare-vim testing: >

    vim -u NONE -N

Displaying characters under cursor: >
    ga  - decimal, hexadecimal, octal
    g8  - bytes in UTF-8 character

------------------------------------------------------------------------------
Quitting with non-zero return code

When using Vim as the "fix command" editor in Bash (via the ``fc`` command
or via ``Ctrl-x Ctrl-e`` - "man bash" for details on fc), a successful
return code tells Bash to execute the commands.  This is somewhat
counter-intuitive when mixed with Vim's :qa! syntax which means "throw away
all my changes."  But Vim has a "throw away all my changes and return failure"
command: >
    :cquit
    :cq

This command is the same as :qa! but returns failure so Bash will ignore
the edited command.

  vim:sts=2:et:ai:tw=78:fo=tcq2:ft=help:nospell:
