*notes.txt*     Notes on Vim installation and usage     *notes*

==============================================================================
CONTENTS

------------------------------------------------------------------------------
Introduction                                            |notes_intro|
Changes                                                 |notes_changes|

------------------------------------------------------------------------------
Installation                                            |notes_installation|
Setup vimfiles                                          |notes_setup_vimfiles|
Setup optional features                                 |notes_setup_optional|
Build Vim                                               |notes_build_vim|

------------------------------------------------------------------------------
Customizations                                          |notes_customizations|
Overrides                                               |notes_overrides|
Python Path                                             |notes_python_path|
GUI options                                             |notes_guioptions|
Colorschemes                                            |notes_colorschemes|
Fonts                                                   |notes_fonts|
Spell checking                                          |notes_spell_checking|
Buffer switchers and filesystem navigators              |notes_buffer_switchers|
Building and Running                                    |notes_building_running|
Tab page support                                        |notes_tab_page|
QuickFix keys                                           |notes_quickfix_keys|
QuickFix window, diff mode                              |notes_quickfix_win|
Dragging text in four directions                        |notes_dragging_text|
Deleting "Rubbish" Whitespace                           |notes_deleting_rubbish|
Deleting Trailing Whitespace                            |notes_deleting_trailing|
Re-formatting text                                      |notes_reformatting|
Moving "out" hierarchically                             |notes_moving_out|
Additional CTRL-o mappings                              |notes_ctrl_o|
Pressing <Enter> removes trailing whitespace            |notes_enter|
Movement by screen lines                                |notes_movement|
Emacs-style command-line editing                        |notes_emacs_commandline|
Clipboard support                                       |notes_clipboard|
Putting most-recently-yanked text                       |notes_putting_yanked|
Yank-related mappings                                   |notes_yank|
Window-related customizations                           |notes_window_related|
Miscellanous mappings                                   |notes_misc_mappings|
Search-related customizations                           |notes_search|
findx-related commands                                  |notes_findx|
:G 'search pattern'                                     |notes_G|
Pasting lines into Vim                                  |notes_pasting|
Tag files                                               |notes_tag_files|
Cscope                                                  |notes_cscope|
Window Layout                                           |notes_window_layout|
QuickFix and Location Window                            |notes_quickfix_location|
Alternatives to :bufdo, :windo, :tabdo                  |notes_alternatives|
Highlight command                                       |notes_highlight|
colorcolumn                                             |notes_colorcolumn|
Help-related mappings                                   |notes_help_mappings|
Folding by regular expression                           |notes_folding_regex|
QuickFix entry folding                                  |notes_quickfix_folding|
Converting Unicode symbols to ASCII                     |notes_toascii|
Converting identifer case                               |notes_identifier_case|
Conflict marker navigation                              |notes_conflict_marker|
Embedded language support                               |notes_embedded_lang|
Source control integration                              |notes_source_control|
List of numbers                                         |notes_list_of_numbers|

------------------------------------------------------------------------------
Tips                                                    |notes_tips|
Command-line window                                     |notes_tips_commandline|
Debugging Vim problems                                  |notes_tips_debugging|
Quitting with non-zero return code                      |notes_tips_quitting|
Redirecting Vim command-line output                     |notes_tips_redirecting|
Using <C-q> and <C-s> in console Vim                    |notes_tips_xon_xoff|

------------------------------------------------------------------------------
Plugins                                                 |notes_plugins|
Ack - Search using 'ack' utility                        |notes_ack|
Ag - Search using 'ag' utility                          |notes_ag|
Airline - statusline utility in pure vimscript          |notes_airline|
ALE - Asynchronous Lint Engine                          |notes_ale|
Align - Align things into columns                       |notes_align|
BufExplorer - Buffer switcher and manager               |notes_bufexplorer|
BufMRU - Most-recently-used buffer switcher             |notes_bufmru|
BufKill - Kill buffer without closing window            |notes_bufkill|
Calutil - Calendar utilities                            |notes_calutil|
Cecutil - Utilities for Dr. Chip's plugins              |notes_cecutil|
CloseTag - Close XML and HTML tags automatically        |notes_closetag|
CMake syntax support                                    |notes_cmake|
Cmp - Neovim completion engine                          |notes_cmp|
Cmp-buffer - Cmp source for buffer words                |notes_cmp-buffer|
Cmp-cmdline - Cmp source for Vim's cmdline              |notes_cmp-cmdline|
Cmp-nvim-lsp - Cmp source for built-in LSP              |notes_cmp-nvim-lsp|
Cmp-nvim-ultisnips - Cmp source for UltiSnips           |notes_cmp-nvim-ultisnips|
Cmp-path - Cmp source for filesystem paths              |notes_cmp-path|
CPSM - CtrlP matcher in C++ for speed                   |notes_cpsm|
Cscope_maps - Neovim cscope support                     |notes_cscope_maps|
CtrlP - Fuzzy matches for files, buffers, etc.          |notes_ctrlp|
DiffChar - Highlight diffs for characters and words     |notes_diffchar|
Easy-Align - Align text on delimiters                   |notes_easyalign|
EasyMotion - Multiple new motions                       |notes_easymotion|
Endwise - End certain structures automatically          |notes_endwise|
Eunuch - helpers for UNIX                               |notes_eunuch|
Extend_List - extend bulleted/numbered list item        |notes_extend_list|
Extline - for extending lines                           |notes_extline|
Fixkey - Fix key code for console Vim                   |notes_fixkey|
Fontdetect - Detect installed fonts                     |notes_fontdetect|
Fontsize - increment/decrement font size                |notes_fontsize|
FSwitch - Filename switching (e.g., .c <=> .h)          |notes_fswitch|
Fugitive - A wrapper for Git in Vim                     |notes_fugitive|
Grep - Wrapper for grep/xargs                           |notes_grep|
Grepper - Extensible wrapper for grep-like tools        |notes_grepper|
Headerguard - Add guards for header files               |notes_headerguard|
HiLinkTrace - Display syntax highlighting stack         |notes_hilinktrace|
Indent-guides - Adds indent guides                      |notes_indent-guides|
JavaComplete - Java Omnicompletion                      |notes_javacomplete|
Keepcase - Search-and-replace keeping case              |notes_keepcase|
Less - Syntax highlighting for LessCSS                  |notes_less|
Localvimrc - Override settings via local files          |notes_localvimrc|
LoremIpsum - Generate dummy text                        |notes_loremipsum|
LspConfig - Neovim LSP configuration                    |notes_lspconfig|
Lusty Explorer/Juggler - File/buffer switcher           |notes_lusty|
Man - Vim's built-in support for man pages              |notes_man|
Markdown - Markdown syntax support                      |notes_markdown|
Matchup - Enhanced extended matching with '%'           |notes_matchup|
Misc - Contains many useful Vimscript functions         |notes_misc|
Moonscript - support for a dialect of Lua               |notes_moonscript|
Mundo - Visualize your undo tree                        |notes_mundo|
None-LS - Neovim non-LSP language tool support          |notes_none-ls|
None-LS-shellcheck - Shellcheck support for none-ls     |notes_none-ls-shellcheck|
OmniCppComplete - C/C++ Omnicompletion                  |notes_omnicppcomplete|
Pathogen - Runtime path management for bundles          |notes_pathogen|
Powerline - The ultimate vim statusline utility         |notes_powerline|
Plenary - Neovim functions for Telescope                |notes_plenary|
Project - Managing "projects" of files                  |notes_project|
Quickfix-reflector - edit QuickFix and save changes     |notes_quickfix-reflector|
Rainbow Parentheses - Highlight nested parens           |notes_rainbow-parens|
Repeat - Repeat operations for supported plugins        |notes_repeat|
ReStructuredText - updated support for rst              |notes_rst|
RunView - Run lines through filter into buffer          |notes_runview|
Rust - Language support for Rust                        |notes_rust|
Scriptease - Debugging tools for Vimscripts             |notes_scriptease|
ScrollColor - Scroll through color schemes              |notes_scrollcolor|
Session - Provides better session management            |notes_session|
Signature - Signs and helpers for bookmarks             |notes_signature|
Snippets - Default snippets for UltiSnips               |notes_snippets|
SpotDiff - Partial diffs of areas and line ranges       |notes_spotdiff|
Surround - Manipulating "surroundings"                  |notes_surround|
Svn - View Subversion diffs while writing log           |notes_svn|
SwapIt - Cycle through related words                    |notes_swapit|
Syntastic - Syntax checking hacks for Vim               |notes_syntastic|
Tagbar - Source code browser                            |notes_tagbar|
Toml - Support for TOML files                           |notes_toml|
TagSignature - Balloon signatures for tags              |notes_tagsignature|
Tcomment - Comment lines in a program                   |notes_tcomment|
Telescope - Fuzzy finding in Neovim                     |notes_telescope|
TextObj-Diff - Diff-based text objects                  |notes_textobj-diff|
TextObj-Function - Function-based text objects          |notes_textobj-func|
TextObj-Indent - Indentation-based text objects         |notes_textobj-indent|
TextObj-Rst - Text objects for reStructuredText         |notes_textobj-rst|
TextObj-User - Supports user-defined text objects       |notes_textobj-user|
ToggleCursor - Changes cursor shape in terminal         |notes_togglecursor|
UltiSnips - Support for inserting snippets of text      |notes_ultisnips|
Unicode - handling unicode and digraphs characters      |notes_unicode|
Vader - Unit testing for vimscript                      |notes_vader|
VCScommand - Version Control System integration         |notes_vcscommand|
VimBall - Vim "package manager"                         |notes_vimball|
Vim-lsp - Language Server Protocol support              |notes_vim-lsp|
Vim-lsp-ale - Bridge between vim-lsp and ALE            |notes_vim-lsp-ale|
Vis - The Visual Block Tool                             |notes_vis|
VisIncr - Increment visually selected areas             |notes_visincr|
VisSort - Sort visually selected areas                  |notes_vissort|
VisSwap - Swap visually selected areas                  |notes_visswap|
WhichKey - Neovim show key bindings                     |notes_whichkey|
Z80 - Support for Z80 assembly language                 |notes_z80|
Zig - Support for Zig language                          |notes_zig|

------------------------------------------------------------------------------
Colorscheme plugins                                 |notes_colorscheme_plugins|
Badwolf colorscheme                                     |notes_badwolf|
Base16 colorscheme collection                           |notes_base16|
ColorSamplerPack - Color schemes and theme menu         |notes_colorsamplerpack|
Dual - Dual color scheme (gvim, vim)                    |notes_dual|
Gruvbox - a dark colorscheme                            |notes_gruvbox|
Hemisu - A dark colorscheme                             |notes_hemisu|
Hybrid - A dark colorscheme                             |notes_hybrid|
Iceberg - A bluish colorscheme                          |notes_iceberg|
Melange - A dark or light colorscheme                   |notes_melange|
Monokai - A dark colorscheme                            |notes_monokai|
Nightfox - A customizable dark colorscheme              |notes_nightfox|
Sonokai -  Monokai colorscheme with less contrast       |notes_sonokai|
Wombat256i - A dark colorscheme                         |notes_wombat256i|

------------------------------------------------------------------------------
Extensions                                              |notes_extensions|
C Additions - Extra syntax highlighting for C           |notes_c_additions|
Python indentation support                              |notes_python_indent|
Tmux syntax - Syntax definitions for tmux.conf          |notes_tmux_syntax|


==============================================================================
Introduction                                            *notes_intro*

The vimfiles project is a collection of Vim configuration files that gather
settings, plugins, and documentation to provide a powerful editing environment
with minimal additional tweaking.

See |notes_setup_vimfiles| for instructions on setting up vimfiles.  It may be
desirable to compile Vim on Unix platforms in order to turn on additional
support features (particularly Ruby, for example).  See |notes_build_vim| for
instructions on building Vim.

Locally added extensions (which typically live in ~/.vim/local) may have notes
as well; you can look at them via: >

  :help localnotes

Similarly, user-specific extensions (which typically live in ~/.vimuser) may
have notes; view them via:
>
  :help usernotes
<
------------------------------------------------------------------------------
Changes                                                 *notes_changes*

For a list of significant changes, see CHANGES.txt in the directory above
(typically, ~/.vim/CHANGES.txt).  To open CHANGES.txt easily, execute the
following ex-mode command: >

  :e $VIMFILES/CHANGES.txt

Alternatively, place cursor on the filename below and press gf:

  $VIMFILES/CHANGES.txt

==============================================================================
Installation                                            *notes_installation*

Install Vim and/or Neovim as desired.  Common installation methods are shown
below.

Vim installation
----------------

Vim version 7.4.0 or newer is required.

- Ubuntu Vim installation: >

    sudo apt install vim-gtk3
<
- Fedora Vim installation: >

    sudo dnf install vim-enhanced vim-X11
<
- Windows Vim installation:

  - Visit https://github.com/vim/vim-win32-installer/releases

  - Download and install `gvim_x.y.z_x64.exe`.

Execute `vim` for console Vim and `gvim` for GUI Vim.

Neovim installation
-------------------

The main Neovim project provides console-only support for most platforms (with
Windows as a notable exception).

Neovim version 0.9.0 or newer is required.

- Linux Neovim installation (Ubuntu APT method):

  Ubuntu 24.04 contains Neovim 0.9.5.  To install: >

    sudo apt install -y neovim
<
- Linux Neovim installation (tarball method):

  - Visit Neovim release area: https://github.com/neovim/neovim/releases

  - Choose a version (e.g., 0.10.0); visit corresponding download directory,
    e.g.: https://github.com/neovim/neovim/releases/tag/v0.10.0

  - Download `nvim-linux64.tar.gz`.

  - Unpack and create a symlink in `PATH`.  For global installation: >

      sudo -i
      cd /opt
      tar -zxf .../nvim-linux64.tar.gz
      ln -s /opt/nvim-linux64/bin/nvim /usr/local/bin/
<
  - Execute by running `nvim`.

- Windows Neovim installation:

  - Visit Neovim release area: https://github.com/neovim/neovim/releases

  - Choose a version (e.g., 0.10.0); visit corresponding download directory,
    e.g.: https://github.com/neovim/neovim/releases/tag/v0.10.0

  - Download `nvim-win64.zip`.

  - Unpack; execute by running: >

      nvim-qt.exe
<
    Unlike other platforms, base Neovim for Windows comes with GUI support
    (built from the Neovim-qt project described below).

Neovim-qt installation
----------------------

For Neovim GUI support on Linux, Neovim-qt is recommended.  (Note that GUI
support on Windows is provided by the base Neovim project above.)  The easiest
method of installation for recent Linux distributions is to install `neovim-qt`
from the package manager.  This will also install a (likely older) version of
Neovim as a dependency, but `neovim-qt` will use the first `nvim` executable in
`PATH`, so newer Neovim may be installed as above and used with `neovim-qt`.

- Ubuntu Neovim-qt installation: >

    sudo apt install neovim-qt
<
- Fedora Neovim-qt installation: >

    sudo dnf install neovim-qt
<
Execute by running `nvim-qt`.

------------------------------------------------------------------------------
Setup vimfiles                                          *notes_setup_vimfiles*

Setup for Unix (Linux, mac)
===========================

Setup for Vim on Unix
^^^^^^^^^^^^^^^^^^^^^

- Clone vimfiles to ``~/.vim`` (such that the ` vimrc ` files at the root of
  the repository ends up as ``~/.vim/vimrc``); for example: >

    git clone https://github.com/drmikehenry/vimfiles ~/.vim
<
- With modern Vim (newer than 7.3.1178), there is no need for a top-level
  `~/.vimrc` file; Vim will automatically locate ` ~/.vim/vimrc` and use that
  if no ` ~/.vimrc ` file exists.

  Therefore, remove any pre-existing ` ~/.vimrc ` file (making sure you don't
  mind losing any existing settings).

Setup for Neovim on Unix
^^^^^^^^^^^^^^^^^^^^^^^^

- First, setup for Vim as above.

- Create a Neovim startup script `~/.config/nvim/init.vim` to chain to
  the `vimrc` file within Vimfiles: >

    source ~/.vim/vimrc
<

Minimal installation is now complete
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For full functionality, follow the steps in the section |notes_setup_optional|
below.

Setup for Windows
=================

Setup for Vim on Windows
^^^^^^^^^^^^^^^^^^^^^^^^

NOTE: On some Windows environments, the GUI for changing the per-user
environment variables has been administratively locked out; nevertheless, you
can still configure your per-user environment variables in a couple of ways.
The most straightforward way is to run the following command: >

  rundll32.exe sysdm.cpl,EditEnvironmentVariables
<
You can run the above command by pressing WinKey-R and pasting the command into
the dialog box.

Vim will look for your ``vimfiles`` in your ``USERPROFILE`` directory, which
will typically be ``C:\Documents and Settings\USERNAME`` or
``C:\Users\USERNAME``, but may be different when on a network.

It's easiest to use this default location:

- Start ``cmd.exe`` (Start | Run | cmd).

- The current working directory should be the ``USERPROFILE``
  directory.  You can confirm the current directory by executing: >

    set USERPROFILE
<
  Use ` cd %USERPROFILE% ` if necessary to change to the correct directory.

Clone vimfiles to ``vimfiles`` (such that the ` vimrc ` files at the root of the
repository ends up as ``vimfiles\vimrc``); for example:

  git clone https://github.com/drmikehenry/vimfiles vimfiles

With modern Vim (newer than 7.3.1178), there is no need for a top-level `
` _vimrc ` file; Vim will automatically locate ` vimfiles\vimrc` and use that if
no ` _vimrc ` file exists.

Therefore, remove any pre-existing ` _vimrc ` file (making sure you don't mind
losing any existing settings).

If the default location is not suitable, you may move the ``vimfiles``
directory elsewhere and inform Vim of the new location.  Choose one of the
following methods for informing Vim:

- Method 1: Override HOME:

  - In Windows, the ``HOME`` environment variable does not exist by default.
    When Vim starts, if ``HOME`` is defined, it will use ``$HOME/vimfiles`` for
    ``VIMFILES`` (which points to the per-user configuration files).  If
    ``HOME`` is not defined, Vim will set it to the value ``%USERPROFILE%``.

  - Therefore, to use a different location for ``VIMFILES``, set the value of
    ``HOME`` to someplace like ``c:\home\username``, and Vim will then set
    ``VIMFILES`` to ``c:\home\username\vimfiles``.

  With this method, move the ``vimfiles`` directory to the new ``HOME`` directory.

- Method 2: Chain to alternate location:

  - Choose an alternate location; for this example, use `c:\vimfiles`.

  - Move the `vimfiles` directory to ``C:\vimfiles``.

  - Create the file `%USERPROFILE%\_vimrc` (where Vim expects to find it) using
    the following lines to extend the `runtimepath` for the new location and
    then chain to `vimfiles\vimrc`: >

    " Prepend the `vimfiles` directory:
    set runtimepath^=c:\vimfiles
    " Append the `vimfile\after` directory:
    set runtimepath+=c:\vimfiles\after
    " Chain to the `vimrc` from Vimfiles (which is now in the `runtimepath`):
    runtime vimrc
<
Setup for Neovim on Windows
^^^^^^^^^^^^^^^^^^^^^^^^^^^

- First, setup for Vim as above.

- Neovim looks for its configuration directory in
  `%LOCALAPPDATA%\nvim` (commonly, `%LOCALAPPDATA%` is something like
  `C:\Users\<USERNAME>\AppData\Local`).

- Create a Neovim startup script `%LOCALAPPDATA%\nvim\init.vim` to chain to
  the `vimrc` file within Vimfiles: >

    source $USERPROFILE\vimfiles\vimrc
<

Minimal installation is now complete
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For full functionality, follow the steps in the section |notes_setup_optional|
below.

------------------------------------------------------------------------------
Setup optional features                                 *notes_setup_optional*

Additional features are available if the following optional steps are performed.

pipx for Python-based tool installation
---------------------------------------

Note: For Python-based tools suggested below, installation via `pipx`
(https://pipx.pypa.io/stable/) is recommended.  `pipx` is like `pip`, except it
installs each tool into its own virtual environment and ensures it gets added to
the `PATH`.  See the above link for more information; brief instructions below
follow for installing `pipx`.

- Ubuntu, Fedora: >

    python3 -m pip install --user pipx
<
  Ensure `~/.local/bin` is in `PATH`.

Python-based plugins
--------------------

Most builds of Vim on Linux come with Python support compiled in.  If necessary,
you may build Vim with Python support (|notes_build_vim|).

For Neovim, `pynvim` is required to enable Python-based plugins.

To install `pynvim` from the Ubuntu package manager:

- Install using `apt`: >

    sudo apt install -y python3-pynvim
<
- This installs `pynvim` into the default `python3` environment.  Neovim will
  automatically detect and use it from that location.

To install `pynvim` from PyPI:

- Choose installation directory. Vimfiles probes for pynvim at any of these
  locations: >

    ~/venvs/pynvim
    /opt/pynvim
<
- Create a Python virtual environment for `pynvim` and install.  Using the
  global location in `/opt`: >

    sudo -i
    cd /opt
    python3 -m venv pynvim
    . pynvim/bin/activate
    pip install pynvim
>
- Vimfiles will detect the location of `pynvim` and set the following Neovim
  variable accordingly: >

    let g:python3_host_prog = '/opt/pynvim/env/bin/python'
<
  For installation to another location, set this variable accordingly in your
  |VIMRC_BEFORE| script.

Ruby-based plugins
------------------

Install the Ruby programming language to enable the Ruby-based
plugins (e.g., Lusty Explorer) to work.  Ensure the Ruby interpreter is in the
PATH.  Also, ensure your build of Vim includes the Ruby interpreter.

To see if Ruby support is included, run the following from within Vim: >

  :echo has("ruby")

Ctags support
-------------

For Ctags support, ensure that some flavor of Ctags is installed.  Universal
Ctags is preferred, as it is currently maintained, but the unmaintained
Exuberant Ctags is still supported by Vimfiles.  Ctags is required for the
TagList plugin, for the CtrlP plugin's tag support, and for generating "tags"
files.

- On recent Ubuntu, install Universal Ctags via: >

    sudo apt install universal-ctags
<
- On Fedora, install Universal Ctags via: >

    sudo dnf install ctags
<
See |notes_tag_files| for more details.

Telescope plugin (Neovim-only)
------------------------------

The `fd` command (https://github.com/sharkdp/fd) is a fast alternative to the
Unix `find` command.  To install for use with the Telescope plugin:

- Ubuntu installation of `fd-find`: >

    sudo apt install fd-find
<

- Fedora installation of `fd-find`: >

    sudo dnf install fd-find
<
- Alternative installation via Cargo: >

    cargo install fd-find
<

Linters/formatters
------------------

Install desired lint and formatting tools for Syntastic, ALE, etc.:

- C/C++:

  - Install Clang daemon (Clangd):

    - Ubuntu: install the default version: >

        sudo apt install clangd
<
    - Ubuntu: Use a specific version and make it the default: >

        sudo apt install clangd-10
        sudo update-alternatives --install /usr/bin/clangd \
            clangd /usr/bin/clangd-10 100
<
  - (recommended) Configure clangd to disable warning about unused functions in
    header files.  Create `~/.config/clangd/config.yaml` with contents: >

      ---
      If:
        PathMatch: .*\.h

      CompileFlags:
        Add: [-Wno-unused-functions]
<
  - Install `compiledb` to automatically generate a `compile-commands.json` file
    for use with Clangd. >

      pipx install compiledb
<
    See `compiledb --help` for details.

- LUA:

  - Acquire `lua-language-server` binaries:
    https://github.com/LuaLS/lua-language-server/releases/download/3.9.1/lua-language-server-3.9.1-linux-x64.tar.gz

  - Install from pre-built binaries:

    - Install globally (preferred): >

        sudo mkdir -p /opt/lua-language-server
        sudo tar -C /opt/lua-language-server -xf \
          lua-language-server-3.9.1-linux-x64.tar.gz
        sudo ln -s /opt/lua-language-server/bin/lua-language-server /usr/local/bin
<
    - Alternatively, install in `~/.local/lua-language-server`: >

        mkdir -p ~/.local/bin
        mkdir -p ~/.local/lua-language-server
        tar -C ~/.local/lua-language-server -xf \
          lua-language-server-3.9.1-linux-x64.tar.gz
        ln -s ~/.local/lua-language-server/bin/lua-language-server \
          ~/.local/bin
<
      **NOTE** Ensure `~/.local/bin/` is in the `PATH`.

  - If desired, may install from source:

    - Acquire sources: >

          git clone https://github.com/sumneko/lua-language-server
          cd lua-language-server/
          git submodule update --init --recursive
<
    - May need to install `libstdc++-static` for the build to complete.

    - Build: >

          cd 3rd/luamake
          compile/install.sh
          cd ../..
          ./3rd/luamake/luamake rebuild
<
- Markdown:

  - Install linters: >

      gem install mdl
<
  - Optionally create ~/.mdlrc to use $VIMFILES/etc/mdl-style.rb with `mdl`
    invocations from the command line: >

      style "#{File.dirname(__FILE__)}/.vim/etc/mdl-style.rb"
<
- Python:

  - Install `mypy` for type checking: >

      pipx install mypy
<
  - Install the excellent `ruff` for Python linting and formatting: >

      pipx install ruff
<
    To configure Ruff globally, create `~/.config/ruff/pyproject.toml`: >

      [tool.ruff]
      line-length = 79

      [tool.ruff.lint]
      ignore = [
          "N811",
          "N812",
          "N813",
          "N814",
      ]
      select = [
          "C9",
          "E",
          "F",
          "N",
          "Q",
          "W",
      ]

      [tool.ruff.lint.flake8-quotes]
      inline-quotes = "double"

      [tool.ruff.lint.mccabe]
      max-complexity = 15
<
  - Install `python-lsp-server` and associated dependencies: >

      pipx install python-lsp-server
      pipx inject python-lsp-server pylsp-mypy
      pipx inject python-lsp-server python-lsp-ruff
<
- Rust:

  - Install rustfmt formatter: >

      rustup component add rustfmt
<
  - Install Rust Analyzer: >

      rustup component add rust-analyzer
<
- Shell:

  - Install shellcheck linter: >

      # Ubuntu:
      sudo apt-get install shellcheck

      # Fedora:
      sudo dnf install ShellCheck
<
  - Install shfmt formatter: >

      # Ubuntu:
      sudo apt-get install shfmt

      # Fedora
      sudo dnf install shfmt
<
    For alternative installation via source: >

      # Ubuntu:
      sudo apt-get install golang

      # Add these lines to ~/.bashrc:
      export GOPATH=$HOME/go
      export PATH="$PATH:$GOPATH/bin"

      go get -u mvdan.cc/sh/cmd/shfmt
<
Fonts
-----

Suggested fonts to install:

- "Hack"
- "PragmataPro for Powerline"
- "PragmataPro"
- "DejaVu Sans Mono for Powerline"
- "Droid Sans Mono for Powerline"
- "Consolas for Powerline"
- "DejaVu Sans Mono"
- "Droid Sans Mono"
- "Consolas"

------------------------------------------------------------------------------
Build Vim                                               *notes_build_vim*

Most users won't have to build Vim from source.  If your Linux distribution's
Vim package lacks features, you can build Vim from source as described below.

Acquire Vim source
------------------

Clone Vim repository via: >
  cd ~/build
  git clone https://github.com/vim/vim.git
<
Install prerequisites
---------------------

The easiest way to install prerequisites for building Vim is to use the Linux
distribution's package manager to install the build dependencies needed for the
distro itself, then augment with additional dependencies as needed.

Install prerequisites for Ubuntu: >
    sudo apt-get build-dep vim-gtk3
    sudo apt-get install python3 python3-dev
<
Install prerequisites for Fedora: >
    sudo dnf builddep -y vim-X11
    sudo dnf install -y rpm-build
<
(Note: the rpm-build package is required for Fedora 23+ now that libraries are
hardened by default.  See comments in buildtool for details.)

Build Vim using buildtool (Unix-only)
-------------------------------------

The detailed steps for download and building Vim are captured in
the script `~/.vim/buildtool`.  Run the script with no arguments for usage
help, or read the script for more detailed information.

- Choose a build location (e.g., `~/build`): >

    mkdir ~/build
    cd ~/build
<
  Vim will be built in a subdirectory such as `vim-x.y.z`.

- (optional) Update the Vim source git directory (in the default download
  location) with the latest Vim source: >

    ~/.vim/buildtool update
<
- Unpack, configure, build, and create binary and source tarballs using one of
  the following commands: >

    # Build the newest version available in download directories:
    ~/.vim/buildtool build

    # Or build using a specified source tarball:
    ~/.vim/buildtool build path/to/vim-x.y.z.tar.gz

    # Or build from a specified Git clone:
    ~/.vim/buildtool build path/to/some/git-clone
<
Installation of Vim
^^^^^^^^^^^^^^^^^^^

- Install the final tarball: >
    sudo tar -C / -zxf vim-x.y.z/vim-x.y.z.x86_64.tar.gz
<
After installation on Linux, the distro-provided global vimrc file will not be
used, but Vim now includes default settings for users without ` vimrc ` files.
Previously, these directions recommended to copy the distro's ` vimrc `
settings, but this is no longer desirable;  if a `vimrc` was copied in the past,
it's best to remove it: >

  # Remove this file if it exists:
  sudo rm -f /usr/local/share/vim/vimrc
<
Removing this distro-supplied file fixes errors in `~/.vim/filetype.vim` of the
form: >

    E10: \ should be followed by /, ? or &
<
To register the newly installed vim as the system alternative: >

  for i in gvim gview gvimdiff; do
    update-alternatives --install /usr/bin/$i $i /usr/local/bin/$i 500
  done

If `/usr/share/applications/*gvim.desktop` exists, it may be necessary to
update this line: >
    Exec=gvim -f %F
<
to use a full path: >
    Exec=/usr/local/bin/gvim -f %F
<
Testing different Vim versions from build directory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After compiling a version of Vim, it may be tested without installation
by setting `VIMRUNTIME` to point to the correct `runtime` directory.
For example, after building into the directory `vim-8.1.0290`, execute via: >

  cd vim-8.1.0290/src
  VIMRUNTIME=$(dirname $PWD)/runtime ./vim
<
==============================================================================
Customizations                                          *notes_customizations*

------------------------------------------------------------------------------
Overrides                                               *notes_overrides*

In order to allow customization while still sharing the bulk of the vimfiles
configuration, vimfiles provides three kinds of override directories that may
contain extensions and adjustments.

Override directories (in increasing order of priority):
- VIMLOCALFILES:      location-specific settings (e.g., for your workgroup)
- VIMUSERFILES:       per-user settings usable at all locations
- VIMUSERLOCALFILES:  per-user location-specific settings

The directories are configured using envionment variables.  In general, it's
recommended to keep the Vimfiles defaults for these variables.

Most users should put their personal customizations into VIMUSERFILES.

VIMUSER
  Name of the user running Vim.  This defaults to the logged-in user, but
  it may be changed to allow one user to activate another user's settings
  (e.g., to allow "root" to share another user's customizations).

VIMFILES (automatically determined; can't be overridden)
  The directory holding the main "vimrc" file.  Typically this will be one of
  the following:
    ~/.vim                            Unix, OS/X
    %USERPROFILE%\_vimrc              Windows

  On Windows, USERPROFILE is an environment variable that often points to
  "C:\Documents and Settings\USERNAME" or "C:\Documents\USERNAME", though the
  location may vary.

VIMLOCALFILES
  Directory holding location-specific settings, typically to allow sharing of
  configuration across an organization or workgroup.  If not set, this defaults
  to the first existing directory in this list:

  For Unix and OS/X:

    $VIMFILES/../.vimlocal
    $VIMFILES/local

  For Windows:

    $VIMFILES\..\_vimlocal
    $VIMFILES\local

VIMUSERFILES
  Directory holding the per-user directory.  If not set, this defaults to the
  first existing directory in this list:

  For Unix and OS/X:

    ~/.vimuser
    ~/.vim/user/$VIMUSER

  For Windows:

    %USERPROFILE%\_vimuser
    %USERPROFILE%\_vimfiles\user\$VIMUSER

VIMUSERLOCALFILES
  Directory holding the per-user location-specific directory.  If not set, this
  defaults to the first existing directory in this list:

  For Unix and OS/X:

    ~/.vimuserlocal

  For Windows:

    %USERPROFILE%\_vimuserlocal

Some of these directories live outside of the $VIMFILES area, which makes it
easy to maintain the settings completely outside the source-controlled $VIMFILES
tree; others are are inside the tree, which may be more convenient for users
users maintaining a fork of VIMFILES.

Each override directory will be added to 'runtimepath'.  Higher priority
override directories are added earlier in 'runtimepath' (and any associated
'/after' directory is added later in 'runtimepath').  This means that override
directories may contain directories such as '/bundle', '/UltiSnips', '/plugin',
etc.

In addition, each override directory may optionally contain any of the
following files for augmenting the main vimrc files found in $VIMFILES:

- vimrc-vars.vim     |VIMRC_VARS|
- vimrc-before.vim   |VIMRC_BEFORE|
- vimrc-after.vim    |VIMRC_AFTER|

vimrc-vars.vim                                *VIMRC_VARS*

  This "vars" script is provided for variable initializations that must
  occur extremely early.  It is located immediately within an override
  directory (e.g., $VIMUSERFILES/vimrc-vars.vim).

  |VIMRC_VARS| within the override directories are sourced in lowest-to-highest
  priority order, so that the highest-priority script has the last word on
  setting the variables.

  Most users won't require a |VIMRC_VARS| script.  Its purpose is to solve a
  chicken-and-egg problem with a |VIMRC_BEFORE| script:

  - The user wants to do ":colorscheme SomeColorScheme" in his |VIMRC_BEFORE|;
  - Support for SomeColorScheme lives in an arbitrary bundle, making it
    desirable to activate all bundles in advance of |VIMRC_BEFORE|;
  - Activating all bundles in advance of |VIMRC_BEFORE| makes it hard for the
    user to disable a particular bundle.

  Only the most primitive settings should live in |VIMRC_VARS|; everything else
  belongs in |VIMRC_BEFORE| or |VIMRC_AFTER|.  The most likely reason for
  needing this script is to disable a bundle on a per-user basis.  For example,
  to disable the "fixkey" bundle, place the following line in
  $VIMUSERFILES/vimrc-vars.vim: >

    call vimf#plugin#disable('fixkey')
<
vimrc-before.vim, vimrc-after.vim             *VIMRC_BEFORE*   *VIMRC_AFTER*
  If these files exist, they will be sourced before or after the majority of the
  main "vimrc" file.  These scripts are located immediately within an override
  directory (e.g., $VIMUSERFILES/vimrc-before.vim).

  |VIMRC_BEFORE| files are sourced fairly early, but after all 'runtimepath'
  manipulations are finished (such as activating bundles).  They are useful for
  the relatively rare things that must happen early, such as setting <Leader> so
  that it will be used by subsequent mappings in the main "vimrc".  Most other
  settings are best overridden in |VIMRC_AFTER| scripts, which will be sourced
  at end of the main "vimrc" file.

  |VIMRC_BEFORE| scripts within the override directories are sourced in
  highest-to-lowest priority order, so that the highest-priority script has the
  first chance to make settings; conversely, |VIMRC_AFTER| scripts are sourced
  in the opposite order, giving them the last word on setting the variables.

------------------------------------------------------------------------------
Python Path                                             *notes_python_path*

Python's sys.path is used to locate Python modules when import commands are
issued.  Especially for use with UltiSnips, it can be useful for Vim's
embedded Python interpreter to have an augmented sys.path so that helper
modules may be used from multiple places conveniently.

Starting in Vim 7.3.1163, Vim will automatically look in 'python2', 'python3',
and 'pythonx' child directories of all paths located in 'runtimepath'.  If a
module lives in such a path, it may be imported from any Python code executed
within Vim.

See |python-special-path| for more information.

To maintain backwards compatibility with older versions of Vim, the function
AugmentPythonPath() is called from vimrc to scan all paths in Vim's
'runtimepath' for child directories named "python2", "python3", or "pythonx" and
adds them to Python's sys.path (unless they are already present).  If a module
lives in such a path, it may be imported from any Python code executed within
Vim.

------------------------------------------------------------------------------
GUI options                                    *notes_guioptions*

To conserve screen space, several GUI features are disabled by default.
The 'guioptions' option controls these settings.  You can use any of the
below lines in your |VIMRC_AFTER| script to bring back these GUI features. >

  " Enable menu bar.
  set guioptions+=m

  " Enable right-side scrollbar always.
  set guioptions+=r

  " Enable left-side scrollbar always.
  set guioptions+=l

  " Enable the toolbar.
  set guioptions+=T

------------------------------------------------------------------------------
Colorschemes                                            *notes_colorschemes*

By default, vimfiles chooses a default colorscheme.  To override this, setup
your preferred colorscheme in |VIMRC_BEFORE|.  For example, for user
drmikehenry, setup ~/.vim/user/drmikehenry/vimrc-before.vim with: >

  colorscheme nuvola

If you don't choose a colorscheme, one will be chosen for you.  Since Gvim can
use any colorscheme, vimfiles arbitrarily chooses a dark-background
colorscheme.  When running in a console, Vim tries to detect whether your
background is light or dark, but it can't really detect the background color
properly in many cases; in such cases, Vim uses a heuristic to guess the
background color, generally based on the terminal type.  For example, Vim can't
generally detect the background color after ssh'ing to another machine or after
executing ``su -`` or ``sudo -i``.  For this reason, vimfiles will
unconditionally force a dark-background colorscheme for Gvim and whenever the
background color detection algorithm in not trustworthy.

But in the special case that the COLORFGBG environment variable is set, console
Vim can correctly detect the background color.  Not all terminal emulators set
this variable, but rxvt and KDE's konsole do (but sadly, xterm does not).  This
variable is lost when executing ``su -`` or ``sudo -i``, and when ssh'ing to
another machine (unless the ssh client and server settings are changed to
propagate the variable to the server).  In the cases where this variable has
been set, vimfiles will now honor it, so rxvt and konsole terminals that use a
light background will receive a light-background colorscheme by default (unless
overridden by the user).

You may want to adjust your ssh client and server settings to propagate the
COLORFGBG variable to the server, improving Vim's detection accuracy.  To
accomplish this with openssh, add this line to /etc/ssh/sshd_config on the
server: >

    AcceptEnv COLORFGBG

Then adjust the client settings by adding these lines to either ~/.ssh/config
(for a single user) or /etc/ssh/ssh_config (for all users): >

  Host *
      SendEnv COLORFGBG

Similarly, when the `COLORTERM` environment variable contains the value
`truecolor`, vimfiles will set 'termguicolors' which will cause Vim to assume
24-bit color support in the terminal and to use the GUI colors for the current
colorscheme (which are typically nicer).  It's useful to configure ssh to pass
`COLORTERM` in addition to `COLORFGBG` as above.

------------------------------------------------------------------------------
Fonts                                                   *notes_fonts*

By default, vimfiles chooses a font.  To override this, setup your preferred
font using a |VIMRC_BEFORE| file.

The simplest option is to setup g:DefaultFontFamilies with your first-choice
fonts in preferred order, and vimfiles will try them first before its built-in
list of fonts.  For example, for user drmikehenry, setup
~/.vim/user/drmikehenry/vimrc-before.vim with: >

  let g:DefaultFontFamilies = [
      \ "Droid Sans Mono",
      \ "Consolas",
      \]
  let g:FontSize = 10

Alternatively, you may use the fontdetect plugin to decide whether to set
g:FontFamily and g:FontSize (allowing vimfiles to choose the default font and
size if your preferred fonts aren't available).  For example:

  let detectedFamily = fontdetect#firstFontFamily([
      \ "Droid Sans Mono",
      \ "Consolas",
      \])
  if detectedFamily != ""
      let g:FontFamily = detectedFamily
      let g:FontSize = 10
  endif

------------------------------------------------------------------------------
Spell checking                                          *notes_spell_checking*

In order to allow per-user overriding of spell-check settings, there are two
variables for configuring spell-checking.  Adjust these variables in per-user
configuration files (|VIMRC_BEFORE|, |VIMRC_AFTER|).

To disable automatic configuration of the 'spell' setting entirely: >

  let g:Spell = 0

To turn off spell-checking for just "C" source code: >
  let g:SpellMap["c"] = "<off>"

Turn off spell-checking for the entire "<source>" group: >
  let g:SpellMap["<source>"] = "<off>"

Turn on spell-checking for files of type "javascript": >
  let g:SpellMap["javascript"] = "<on>"

Add "perl" filetype to the "<source>" group: >
  let g:SpellMap["perl"] = "<source>"

Use b:Spell for per-buffer control that overrides g:SpellMap.
E.g. to disable spell checking for the buffer: >
  let b:Spell = "<off>"
<
See g:SpellMap documentation in vimrc for more detail.

------------------------------------------------------------------------------
Buffer switchers and filesystem navigators              *notes_buffer_switchers*

Lusty Juggler - rapidly switch among buffers

  <M-s>  Launch Lusty Juggler; while in juggler, press again to cycle
         through most-recently-used buffers.
  \lj    Launch Lusty Juggler (default mapping, doesn't do MRU cycling).

BufMRU - most-recently-used buffer switcher

  <C-6> (CTRL-6) Switch to MRU buffer and enter BufMRU mode.  This is Vim's
                 default keystroke for switching to the alternate buffer.
  <Space><Space> Switch to MRU buffer and enter BufMRU mode.  This is easier
                 to invoke and closer to the original single-<Space> mapping
                 to aid muscle memory.

  See |notes_bufmru| for more details.

Buf Explorer - display all buffers in a list, switch or delete buffers, etc.

  \be    Invoke BufExplorer.

------------------------------------------------------------------------------
Building and Running                                    *notes_building_running*

Press <F9> to save all buffers and execute :make in current directory.

Press <F5> to execute current buffer (useful when editing Python scripts,
for example).

<F11> and <F12> signal fifos using the fifosignal command (a separate program).
Each key causes a ":wall" followed by a signal to a particular fifo in a
particular directory.

<F11> signals the fifo named ".fifo2" in the current working directory.
<F12> signals the fifo named ".fifo" in the parent directory of the current
file.

These signals are useful in combination with a separate command prompt using the
fifowait command, commonly used to trigger a build outside of Vim.  For example:

    while fifowait; do echo "Building"; ./buildall; done

Reference implementations of fifosignal and fifowait are found in
$VIMFILES/tool/fifosignal.  Copy these to a directory in your path and ensure
they are executable, e.g.: >

  cp ~/.vim/tool/fifosignal/* ~/bin
  chmod +x ~/bin/{fifosignal,fifowait}

Note: At present, fifosignal and fifowait are Unix-only.

------------------------------------------------------------------------------
Tab page support                                        *notes_tab_page*

Use <C-S-PageUp>/<C-S-PageDown> in Gvim to move the current tab page left or
right.  This unfortunately doesn't work in console Vim because those key
sequences aren't visible to Vim.

------------------------------------------------------------------------------
QuickFix keys                                           *notes_quickfix_keys*

  oo      Return to other window
  OO      Return to other window, close QF
  <CR>    Open in existing        (<s-CR>  = stay in QF)
  o<CR>   Open in existing        (o<s-CR> = stay in QF; O<s-CR> = close QF)
  oh      Open horizontal split   (oH      = stay in QF; OH      = close QF)
  ov      Open vertical split     (oV      = stay in QF; OV      = close QF)
  ot      Open in new tab         (oT      = stay in QF; OT      = close QF)
  <F1>    Display this help section (:help notes_quickfix_keys)
  { / }   Move cursor to previous/next filename in QuickFix window

The above mappings are active in QuickFix and Location List windows.
Note: "O + unshifted" is the same as "O + shifted" (so "Oh" = "OH", etc.).

------------------------------------------------------------------------------
QuickFix window, diff mode                              *notes_quickfix_win*

Use <F4> and <S-F4> to navigate forward and backward.  When diff mode is
active, browses through diff hunks; otherwise, when a Location List window is
open, browses through the Location List; otherwise, browses through
the QuickFix list.

New diff commands:

  :DiffOrig
    Compare unsaved changes in current window against original on-disk.

  :Diff
    Initiate diff between current window and "next" window (found by <C-w>w).

  :Diff {filename}
    Initiate diff between current window and {filename}.

Built-in commands for more manual control:

  :diffthis
    Put current window into diff mode.  Use this on two windows separately to
    do a diff between them.

  :diffoff
    Remove diff mode for current window.

  :diffoff!
    Remove diff mode for all windows.

------------------------------------------------------------------------------
Dragging text in four directions                        *notes_dragging_text*

Text may be "dragged" in any of the four directions (Up, Down, Left, or
Right).  In normal and insert modes, the current line will be dragged; in
visual mode, the visual selection will be dragged.

Lines dragged vertically move as whole lines.

Lines dragged horizontally are shifted one space to the left or right,
generally as if the standard "<<" or ">>" operator had been invoked with the
shift width ('sw') variable temporarily set to one.  For block-wise
selections, this implies that only the selected block is shifted.

Dragging up:
  <M-Up>        (visual mode, insert mode, normal mode)
  <M-k>         (visual mode, insert mode, normal mode)
  -             (visual mode)

Dragging down:
  <M-Down>      (visual mode, insert mode, normal mode)
  <M-j>         (visual mode, insert mode, normal mode)
  +             (visual mode)

Dragging left:
  <M-Left>      (visual mode, insert mode, normal mode)
  <M-h>         (visual mode, insert mode, normal mode)
  <Backspace>   (visual mode)

Dragging right:
  <M-Left>      (visual mode, insert mode, normal mode)
  <M-h>         (visual mode, insert mode, normal mode)
  <Space>       (visual mode)

------------------------------------------------------------------------------
Deleting "Rubbish" Whitespace                           *notes_deleting_rubbish*

The normal-mode mapping "drw" deletes "rubbish" whitespace, bringing a
run of spaces down to a single space character, or a group of consecutive
blank lines down to a single blank line.

------------------------------------------------------------------------------
Deleting Trailing Whitespace                            *notes_deleting_trailing*

The normal-mode command :StripTrailingWhitespace will remove all trailing
whitepsace from the current buffer.  It accepts a line range as well, such
that selecting a visual range first followed by typing
:StripTrailingWhitespace will strip only the selected lines.

For convenience, the following mappings are available:

  <Leader><Leader>$     :StripTrailingWhitespace
  <Space>xdw            :StripTrailingWhitespace

------------------------------------------------------------------------------
Re-formatting text                                      *notes_reformatting*

The useless key "Q" is mapped to the "gq" reformatting operator.  Pressing
"QQ" on a line reformats that line.  Pressing "Q" in visual mode reformats the
selection.

<M-q> is mapped in normal, visual, and insert modes to reformat the current
"inner paragraph" (as defined by Vim's paragraph operator, |ip|).  When the
'textwidth' option is non-zero (which is typical), the paragraph will be
re-wrapped to that width; otherwise, the paragraph will be joined into a
single long line.  In addition, the `q` register is used to mark and restore the
cursor position.

For normal and visual modes, <Leader>q does the same as <M-q>.

------------------------------------------------------------------------------
Moving "out" hierarchically                             *notes_moving_out*

Press <C-o><C-o> in insert or visual modes to exit "out" to the containing
context.  For example, if your cursor is between parentheses, pressing
<C-o><C-o> will move out just beyond the parentheses.  This is helpful for
getting outside text that was automatically inserted (e.g., from a snippet).

The following may be "exited": >

  (Parentheses)
  [Brackets]
  {CurlyBraces}
  break;

------------------------------------------------------------------------------
Additional CTRL-o mappings                              *notes_ctrl_o*

<C-o>o      - Open a line below this one
<C-o>;      - Append ";" to the current line
<C-o>:      - Append ":" to the current line
<C-o>.      - Append "." to the current line
<C-o><CR>   - Append "." and <CR> to the current line unless overridden by a
              filetype-specific mapping
<C-o><C-h>  - Exit visual modes at start of selected text
<C-o><C-l>  - Exit visual modes at end of selected text

------------------------------------------------------------------------------
Pressing <Enter> removes trailing whitespace            *notes_enter*

To help avoid cluttering the file with trailing whitespace, pressing <Enter> in
insert mode will strip trailing whitespace from the previous line.  This is
helpful when trying to split a line such as the one below.  Consider this line:

  Place cursor on X and press <Enter>

With your cursor on the "X" above, pressing <Enter> would normally leave a
trailing space character after the word "on"; this space will instead be
removed.

To intentionally preserve trailing whitespace when typing at the end of a line,
simply avoid pressing <Enter>.  When pressing <Enter> in the middle of a line,
more steps are involved.  For example, before pressing <Enter>, add a period,
then press <Enter>, then go back and remove the period from the line.
Alternatively, press <Enter>, then go back and restore the trailing whitespace
on the previous line.  Though this is awkward, it's expected to be very rarely
desirable in the course of normal editing that pressing <Enter> in the middle
of a line should preserve whitespace.

------------------------------------------------------------------------------
Movement by screen lines                                *notes_movement*

The standard movement keys have been remapped to move by screen lines instead
of logical lines.  For "short" lines, there is no difference, but for wrapped
lines, this reverses the default behavior of using logical lines.  Use "g" and
the original key to move by logical lines.

------------------------------------------------------------------------------
Emacs-style command-line editing                        *notes_emacs_commandline*

The standard Emacs-style command-line editing keys as used in Bash have been
mapped for command-line mode.  These include:

<C-a>   Start of line
<C-b>   Move left one character
<C-d>   Delete character under cursor
<C-f>   Move right one character
<C-n>   Next command history line
<C-p>   Previous command history line
<M-b>   Move left one word
<M-f>   Move right one word

<C-g>   Edit command-line history (used to be <C-f>)

The original meanings for these keys may be activated by first pressing <C-o>
(mnemonic: "Original").

Original meanings:
<C-a>   Insert all matching filenames
<C-b>   <Home>
<C-d>   List matching names
<C-f>   Edit command-line history
<C-g>   Nothing
<C-n>   Next match after wildchar, or recall next command-line history
<C-o>   Nothing
<C-p>   Prev. match after wildchar, or recall prev. command-line history

------------------------------------------------------------------------------
Clipboard support                                       *notes_clipboard*

Because the Windows standard keys for clipboard support are already taken in
Vim, they have been mapped to the same keys using Alt:

<M-a>         Select all
<M-z>         Undo
<M-x>         Cut to clipboard
<M-c>         Copy to clipboard
<M-v>         Paste from clipboard

In addition, old-style mappings exist:

<S-Insert>    Paste from clipboard
<C-S-Insert>  Paste from X11 primary selection
<C-Insert>    Copy to clipboard and X11 primary selection

For ease of use and mnemonic value, the "undo" functionality is also
available as <M-u><M-u>.

All of these mappings are available in Normal, Visual, and Insert modes.

In addition, the "unnamed" register (which is the default source for "puts"
and the default destination for "yanks") has been configured to use the
system clipboard by default for puts, and to use both the system clipboard
and the X11 primary selection as the destination for yanks.  This provides
smoother integration with the bulk of applications that use the system
clipboard.  To put from the primary selection, either use <C-S-Insert> or
reference the "*" register explicitly, e.g.: >

  "*p

Note that registers can be set via :let, which allows for moving one register
into another easily.  For example, to move the contents of the clipboard into
the primary selection, use: >

  let @*=@+

------------------------------------------------------------------------------
Putting most-recently-yanked text                       *notes_putting_yanked*

By default, yanking (e.g, "yy") copies your text into the unnamed register,
and putting (e.g., "p") puts text from the unnamed register into your
buffer.  Putting text onto a visual selection replaces that selection with
your text, but it also has the sometimes undesirable effect of overwriting
your unnamed register with the previously selected text.  Subsequent "put"
operations will then use the overwritten text instead of your previously
yanked text.

The manual work-around for this problem is to explicitly use register 0 when
putting, via: >

  "0p

To make this easier, a visual mode mapping of capital P performs a put from
register 0.  This allows a yank followed by repeated selections and puts.

------------------------------------------------------------------------------
Yank-related mappings                                   *notes_yank*

Normal-mode "Y" has been remapped to mean "yank to end of line" (equivalent to
"y$"), for consistency with most other uppercase variants (e.g., "D", "C", ...).
To yank a single line, use "yy".

Visual-mode "Y" performs a yank-and-dedent operation on the selected text, where
the largest common whitespace prefix is removed from all lines.  For now, the
destination register is hard-coded to be "0 (along with both clipboard-related
registers "+ and "*).  This is convenient when yanking shell commands to be
pasted into a terminal.

------------------------------------------------------------------------------
Window-related customizations                           *notes_window_related*

Vim provides many window-related operations beginning with <C-w>.  To make these
easier to type, <Space>w has been mapped to <C-w>.

------------------------------------------------------------------------------
Miscellanous mappings                                   *notes_misc_mappings*

  gV      Visually select the text that was last edited/pasted.

  CTRL-w  (insert-mode) Break undo, then CTRL-w (delete word).
  CTRL-u  (insert-mode) Break undo, then CTRL-y (delete to line start).

  P       (visual-mode) Put from most recent yank instead of scratch register.

------------------------------------------------------------------------------
Search-related customizations                           *notes_search*

Vim's standard `*` operator (which searches for the word under the cursor) has
been modified to leave the cursor unmoved.  In visual mode, the selection
becomes the search text.

The Grepper plugin (|notes_grepper|) wraps several recursive file search tools
with a convenient interface.

Vimfiles provides `:G`, a custom command to conveniently invoke `:Grepper` using
the best available search tool detected by Vimfiles; see |notes_G| for details.

The `#` key is mapped to start a search for the word under the cursor (in Normal
mode) or the current selection (in Visual mode) using `:G`.

Use the mapping \z after a search to fold all but the matching lines.

Alternatively, some plugins provide a direct interface into individual search
tools (though the `:Grepper` interface is preferable):

- `:Ack` (|notes_ack|) wraps the Perl-based Ack tool.
- `:Ag` (|notes_ag|) wraps The Silver Searcher.
- <F3> launches a `:Regrep` command (from the |grep.txt| plugin).

------------------------------------------------------------------------------
findx-related commands                                  *notes_findx*

The external findx utility may be invoked using any of the below commands: >

  :Findx <args>           Invoke ``findx``
  :FFX <args>             Invoke ``ffx`` (a.k.a. ``findx -ffx``)
  :FFG <args>             Invoke ``ffg`` (a.k.a. ``findx -ffg``)

------------------------------------------------------------------------------
:G 'search pattern'                                   *:G*   *notes_G*

The `:G` command provides a convenient way to search through a tree of files.
It defaults to the first external search tool it can find from the following
list:

- rg (RipGrep, https://github.com/BurntSushi/ripgrep)
- ag (The Silver Searcher, https://github.com/ggreer/the_silver_searcher)
- ffg (From findx, https://github.com/drmikehenry/findx)
- ack (https://beyondgrep.com/)

The actual search is done via the grepper plugin |notes_grepper|.

Depending on your environment, you may not have any of the external tools
available on the `PATH,` but if you have Perl installed, you will at least be
able to use `:G` via the single-file implementation of ack bundled with
vimfiles. Because these tools are so similar, in most cases you don't have to
care which one gets called.

For all of these tools, the command line is passed directly to the shell, and
the syntax you must use depends on the details of your environment.

For Unix-like systems, it's best to use single-quotes around the entire regular
expression.  Single-quotes within the regular expression should be handled by
closing the quotes, escaping a single-quote with a backslash, then re-opening
the quotes.  For example, to quote this string:

  I'm here

Replace the apostrophe with the four characters '\'' and surround the entire
expression with single-quotes like this:

  'I'\''m here'

For Windows, surround the pattern with double-quotes, and double any
double-quotes embedded within the pattern.  For example, to quote this string:

  I said "That's painful" in my loudest voice.

Use the following:

  "I said ""That's painful"" in my loudest voice."

------------------------------------------------------------------------------
Pasting lines into Vim                                  *notes_pasting*

When pasting lines copied from outside Vim, the content is subject to
auto-indentation at each <CR>.  The |'paste'| variable may be set to
prevent these unintended effects during pasting.

Press <S-F12> key to toggle the state of the |'paste'| variable; it may be set
or cleared manually via: >
    :set paste
    :set nopaste
Be sure to exit insert mode when pasting with :set paste active because
mappings are disabled, so <S-INSERT> won't be interpreted as the paste
operation.

------------------------------------------------------------------------------
Tag files                                               *notes_tag_files*

Tag files (named "tags") will now be searched starting in the current working
directory and all parent directories toward the root.

The "gf" command ("goto file") will use any filename tags to augment the
search path (:help 'path').

The custom :Ctags command will launch "gentags" in the current directory to
update the tags.

An example implementation of "gentags' is found in $VIMFILES/tool/gentags; use
this as an example, or else copy or symlink this into a directory in your PATH
to use this implementation as-is, e.g. >

  ln -s ~/.vim/tool/gentags ~/bin

The supplied "gentags" script supports both the preferred Universal Ctags and
the older (but no longer maintained) Exuberant Ctags.  It probes for the
existence of various "ctags" executables and detects the version via
"ctags --version".  Universal Ctags is preferred, followed by a list of names
taken from the Tagbar plugin (in "tagbar/autoload/tagbar.vim").

See "gentags --help-gentags" for details.

Universal Ctags is generally available in Linux distributions, or at:
https://github.com/universal-ctags/ctags

------------------------------------------------------------------------------
Cscope                                                  *notes_cscope*

Key bindings have been setup for cscope.

For Vim:
- The mappings generally uses the word under the cursor as input.
- Most results are sent to the QuickFix list, and some are in a menu.
- See `:help cscope` for more information.

For Neovim:
- The mappings use the word under the cursor or an interactively entered word.
- Results are sent to the Telescope plugin; use CTRL-Q to send Telescope results
  to the QuickFix window.
- See `:help plugin_cscope_maps`  for more information.

<Space>ca     Find assignments to symbol.
<Space>cb     Build database.
<Space>cc     Find callers of this func.
<Space>cd     Find called funcs from this func.
<Space>ce     Find egrep pattern.
<Space>cf     Find file.
<Space>cg     Find global definition.
<Space>ci     Find #includers of this file.
<Space>cs     Find symbol.
<Space>ct     Find text string.

------------------------------------------------------------------------------
Window Layout                                           *notes_window_layout*

Usage:

:L          Layout windows nicely using current number of columns.
:L <n>      Layout windows in an <n>-column format.
:L1         Layout windows in a one-column format.
:L2         Layout windows in a two-column format.
:L3         Layout windows in a three-column format.
:L4         Layout windows in a four-column format.
:L5         Layout windows in a five-column format.

The bare :L command will not change the overall number of columns; the rest will
set the overall number of columns to the value needed to provide <n> vertically
split windows side-by-side, as determined by the function GetWindowWidth() (see
the definition in the vimrc file).

Within the overall number of columns, :L and friends adjust the windows as
follows:
- Move current window to the top (L1 only).
- Move quickfix window to the bottom and set to standard size (if already open).
- Make all windows equally sized (via Ctrl-w_=).

*NOTE* If your Gvim window isn't positioned to span the edges of your monitor,
the number of character columns may be truncated to keep Gvim on a single
monitor.  To work around this, move Gvim to straddle the boundary between
monitors before executing the above commands.

With w = GetWindowWidth(), the overall number of columns is calculated as:
- :L1  ==> w
- :L2  ==> (2 * w + 1)
- :L3  ==> (3 * w + 2)
- :L4  ==> (4 * w + 3)
- :L5  ==> (5 * w + 4)
- :L n ==> (n * w + (n - 1))

This leaves room for n windows with (n - 1) dividing lines between them.

GetWindowWidth() calculates the desired window width as follows:
- Start with a based value of g:WindowWidth (defaults to 80);
- Unconditionally add in g:ExtraWindowWidth (allows extra room for :sign
  columns; defaults to 2);
- If any window is in diff mode, add two more columns for the diff indicators;
- If any window has line numbering turned on (via 'number' or 'relativenumber'),
  add enough space for the largest value across all windows, but no smaller
  than 'numberwidth'.

The standard heights of Location Windows and the QuickFix Window may be
controlled by the following global variables: >

  " Desired height of a Location List window.
  let g:LocListWinHeight = 5

  " Desired height of QuickFix window.
  let g:QuickFixWinHeight = 10

------------------------------------------------------------------------------
QuickFix and Location Window                            *notes_quickfix_location*

<C-q><C-l>  Toggle the Location window on or off
<Space>ql   Toggle the Location window on or off
<C-q><C-q>  Toggle the QuickFix window on or off
<Space>qq   Toggle the QuickFix window on or off

NOTE See |notes_tips_xon_xoff| if <C-q> doesn't work in console vim.

------------------------------------------------------------------------------
Alternatives to :bufdo, :windo, :tabdo                  *notes_alternatives*

These behave as their built-in counterparts but restore the current
window, buffer, or tab when they complete.

Usage:

:Windo command
:Bufdo command
:Tabdo command

------------------------------------------------------------------------------
Highlight command                                       *notes_highlight*

The custom command :Highlight provides highlighting of non-conforming coding
styles to make it easier to locate problems during editing.

Highlighting is done on a per-buffer basis via Vim's syntax highlighting
mechanism.  Individual syntax items for a single buffer are enabled or disabled
via the :Highlight command:

    :Highlight tabs         ; enable highlighting of tab characters
    :Highlight notabs       ; disable highlighting of tab characters
    :Highlight longlines    ; enable highlighting of long lines
    :Highlight nolonglines  ; disable highlighting of long lines
    :Highlight *            ; enable all supported highlight items
    :Highlight no*          ; disable all supported highlight items
    :Highlight <Tab>        ; command-line completion to show all options

:Highlight options include: >
    commas
    keywordspace
    longlines
    tabs
    trailingspace

In addition, highlighting may be enabled or disabled on a per-buffer basis via
the following commands:

    :HighlightOn        ; enable highlighting of previously enabled items
    :HighlightOff       ; disable highlighting of all items

The highlight items that were individually configured via the :Highlight
command are remembered, such that :HighlightOn restores the configuration.

The default disposition of highlighting is controlled by the global variable
g:HighlightEnabled.  This is set to 1 in the vimrc, but it may be overridden in
a vimrc-after file to cause highlighting to be disabled by default.  In this
way, it's convenient to allow individually configured highlighting items to be
set by the main vimrc, but have them be inactive by default (by setting
g:HighlightEnabled to 0), such that :HighlightOn will turn on the recommended
set of highlight items.  For this reason, it's not recommended to have
":Highlight no*" in your configuration.

------------------------------------------------------------------------------
colorcolumn (highlighting first column in right margin) *notes_colorcolumn*

Where supported, Vim's 'colorcolumn' feature will be enabled and set to create
an indicator of the right margin.  A vertical line indicates the first column
outside 'textwidth' (when 'textwidth' is non-zero).  To disable this feature,
place the following in |VIMRC_AFTER|: >

  :set colorcolumn=

------------------------------------------------------------------------------
Help-related mappings                                   *notes_help_mappings*

The following normal-mode mappings toggle the help window on and off:

  <F1>
  <C-q><C-h>
  <C-q>h
  <Space>qh

In visual mode, these same keys perform :help on the selected text.

NOTE See |notes_tips_xon_xoff| if <C-q> doesn't work in console vim.

If the help window is already open, it will be closed; otherwise, the most
recent help file will be re-opened.

------------------------------------------------------------------------------
Folding by regular expression                           *notes_folding_regex*

To fold away lines that match a regex, use the custom command :Fold: >
    :Fold regex         ; lines matching regex are hidden
    :Fold               ; use last search pattern (@/) for regex

Use the custom command :FoldSearch to search for lines matching a regex and
fold away everything else: >
    :FoldSearch regex   ; show lines matching regex, and fold away all else
    :FoldSearch         ; use last search pattern (@/) for regex

With :FoldSearch, increasing the 'foldlevel' to 1 will show one line of
context around all matches.

To fold away comments and blank lines, use this custom command: >
    :FoldComments

------------------------------------------------------------------------------
QuickFix entry folding                                  *notes_quickfix_folding*

To group lines of QuickFix output together by files or by directories, use one
of the following commands when a QuickFix or Location List window is focused:

                                  *FoldQuickFixFiles*
                                  *FoldQuickFixDirs*
    :[count] FoldQuickFixFiles
    :[count] FoldQuickFixDirs

When [count] is 0 (the default), the folds will start closed; when [count] is 1,
the folds will start open.

When a QuickFix or Location List window is opened, :1FoldQuickFixFiles is
applied by :SetupQuickFix, such that the folds start open.  Use standard Vim
shortcut keys within the QuickFix or Location List window to change folding
levels:

    zr    Reduce amount of folding
    zR    Reduce amount of folding fully (no folding remaining)
    zm    More folding
    zM    More folding (fully folded)
    zo    Open a fold
    zc    Close a fold

In Gvim, you may also click on the symbols in the left margin of the QuickFix
or Location List window to toggle individual folds.

------------------------------------------------------------------------------
Converting Unicode symbols to ASCII                     *notes_toascii*

Use :ToAscii to convert a range of lines (defaulting to the entire buffer)
into ASCII.  Mainly this converts several kinds of quotes into ASCII quotes
and generally maps some of the Unicode symbols in the range U+2000 through
U+206F into ASCII equivalents.

------------------------------------------------------------------------------
Converting identifer case (e.g, lowerMixedCase to underscore_separated)
                                  *notes_identifier_case*

Several conventions exist for multi-word variable names, e.g.::

  lowerMixedCase                  (a.k.a. mixedCase or lowerCamelCase)
  UpperMixedCase                  (a.k.a. CamelCase or upperCamelCase)
  underscore_separated_lowercase  (a.k.a. snake_case)

In support of finding and converting variables of various naming conventions,
the following features are provided.

                                  *SearchLmc* *SearchUmc* *SearchUnderscore*
:SearchLmc
:SearchUmc
:SearchUnderscore
        Set Vim's search expression to match lowerMixedCase, UpperMixedCase,
        or underscore_separated_lowercase identifiers.

                                  *SearchWord*
:SearchWord [ident]*
        Set Vim's search expression to match all provided identiers; if none are
        provided, set the search expression to WordPattern() to match all
        identifiers.

        E.g., to search for identOne and identTwo:

          :SearchWord identOne identTwo

                                  *GrepLmc* *GrepUmc* *GrepUnderscore*
:GrepLmc args-for-G-command
:GrepUmc args-for-G-command
:GrepUnderscore args-for-G-command
        This wraps the :G command, providing a Perl-compatible regular
        expression matching lowerMixedCase, UpperMixedCase, or
        underscore_separated identifiers as the implied first
        argument to :G.  It is logically equivalent to:
          :G <perl-regex-for-identifier-type> args-for-G-command

        Also sets Vim's search expression for highlighting of matched
        identifiers.

                                  *ToUnderscore* *ToUmc* *ToLmc*
:ToUnderscore [ident]*
:ToUmc [ident]*
:ToLmc [ident]*
        These commands convert the provided identifiers to the corresponding
        convention in the current buffer using :s///.  If no identifiers are
        provided, the identifier under the cursor is used.  These commands
        accept a range, which defaults to the entire file.

        Examples:

        " Convert identOne and identTwo to ident_one and ident_two.
        :ToUnderscore identOne identTwo

        " Convert some_name to SomeName in lines 1 through 100.
        :1,100ToUmc some_name

        " Convert identifier under cursor to lowerMixedCase in entire file.
        :ToLmc

                                  *LmcToUnderscore*
:LmcToUnderscore
        Similar to :ToUnderscore, but uses a regular expression to match all
        lowerMixedCase identifiers.  This is helpful for converting Python
        multiWordVariables to multi_word_variables.

                                  *SearchLmcPattern()* *SearchUmcPattern()*
                                  *SearchUnderscorePattern()*
SearchLmcPattern()
SearchUmcPattern()
SearchUnderscorePattern()
        These functions return Vim regular expressions to match lowerMixedCase,
        UpperMixedCase, and underscore_separated_lowercase identifiers,
        respectively.  They may be useful for use with the '/' command and
        |c_CTRL-R_=| to get hold of the regular expression for further editing.
        For example, pressing the following keys in order will perform a search
        for lowerMixedCase identifiers:

          /<C-R>=SearchLmcPattern()<CR>

                                  *GrepLmcPattern()* *GrepUmcPattern()*
                                  *GrepUnderscorePattern()*
GrepLmcPattern()
GrepUmcPattern()
GrepUnderscorePattern()
        These functions return Perl-compatible regular expressions to match
        lowerMixedCase, UpperMixedCase, and underscore_separated_lowercase
        identifiers, respectively.  They may be useful to create customized
        :G commands.  For example, an :GrepLmc operation in the ~/tmp directory
        can be simulated by pressing the following keys:

          :G <C-R>=GrepLmcPattern()<CR> ~/tmp<CR>

                                  *Underscore* *Umc* *Lmc*
Underscore()
Underscore(word)
Umc()
Umc(word)
Lmc()
Lmc(word)
        Convert word to specified convention.  If word is not supplied, use
        submatch(0) instead, which represent the entire matched text within
        a :s/// command.

        These functions are convenient when constructing a custom substitute
        command.  For example, pressing "*" on an identifier under the cursor
        will set the current search expression to match that word.  To convert
        that word to the underscore_separated_lowercase convention, re-use the
        search expression by leaving the pattern blank and use Vim's
        |sub-replace-expression| feature to convert submatch(0) using the Umc()
        function:

          :%s//\=Underscore()/g

Some refactoring mappings exist to rename the identifier under the cursor to a
new convention across the entire file:

  <M-r>iu     Refactor identifier to underscore_separated_lowercase
  <M-r>iU     Refactor identifier to UpperMixedCase
  <M-r>il     Refactor identifier to lowerMixedCase

This may help after a bulk :LmcToUnderscore operation.  Using <Leader>sv on a
file will show the diffs against the most recent comment in source control (see
|notes_vcscommand| for details).  If an identifier was converted erroneously, it
may be converted back via <M-r>il.

------------------------------------------------------------------------------
Conflict marker navigation                              *notes_conflict_marker*

Inspired by vim-unimpaired, keybindings have been setup for move between
conflict markers:

]n    Go to the beginning of the next conflict marker.
]N    Go to the end of the next conflict marker.
[n    Go to the beginning of the previous conflict marker.
[N    Go to the end of the previous conflict marker.

------------------------------------------------------------------------------
Embedded language support                               *notes_embedded_lang*

The reStructuredText and Markdown support has been extended to support color
syntax highlighting for a subset of languages.  "g:rstEmbeddedLangs" controls
the list of languages that will include syntax highlighting in the
"code-block" directive.  Markdown will default to the same set of languages
as reStructuredText by default.  You can set "g:markdownEmbeddedLangs" to a
different list, if you desire.

------------------------------------------------------------------------------
Source control integration                              *notes_source_control*

During a Git rebase operation, the following additional mappings are available:

<Leader><Leader>e Change rebase action to "edit"
<Leader><Leader>f Change rebase action to "fixup"
<Leader><Leader>p Change rebase action to "pick"
<Leader><Leader>r Change rebase action to "reword"
<Leader><Leader>s Change rebase action to "squash"

------------------------------------------------------------------------------
List of numbers                                         *notes_list_of_numbers*

The function Inc() provides a way to generate an incrementing sequence of
numbers during a substitute operation.  It comes in two forms: >

  Inc()     " Increment by one.
  Inc(n)    " Increment by n.
<
Consider this list: >

  abc
  abc
  abc
<
Use `Inc()` to replace each `abc` with `xyz_#` where `#` increments: >

  :let i = 1 | %s/abc/\='xyz_' . Inc()/g
>
Yielding this new list: >
  xyz_1
  xyz_2
  xyz_3
<
To prefix each of these lines with a number: >

  one
  two
  three
<
First, initialize the variable: >
  :let i = 1
<
Then select the lines visually and use: >

  :'<,'>s/^/\=Inc() . '. '/g
<
to get these numbered lines: >
  1. one
  2. two
  3. three
<
See https://vim.fandom.com/wiki/Making_a_list_of_numbers for more ideas.

==============================================================================
Tips                                                    *notes_tips*

Use the following command: >
    :help quickref
to get a nice quick reference guide.

- Use filetype=Wikipedia for MediaWiki files.

Set 'path' variable to include **/pubinc, **/src: >
    set path+=**/pubinc,**/src

Use |gf| to jump to file under cursor (powerful in combination with setting
the 'path' variable).

Use |:find| instead of |:edit| to use 'path' to locate a file.

Use |]p| and |]P| to perform |p| and |P| with re-indentation of the pasted text.
(Or can use |]p| and |[p| for paste-after and paste-before.)

Try @: to repeat the last ex-mode command; to repeat again, use @@.

Use g& to repeat the last Search-and-replace.

If your syntax highlighting gets out of sync, try the command: >
    :syntax sync fromstart

------------------------------------------------------------------------------
Command-line window                                     *notes_tips_commandline*

Special window for editing current and historical command and searches.

From command-line mode or while editing a search pattern, press CTRL-g to open
the window (Note: Vim default is to use CTRL-f, but this has been remapped).

From normal mode, press "q:" or "q/" to open the command-history or
search-history window, respectively.

You can edit, cut, paste, yank, etc., from these history windows.  Press
CTRL-c to exit.

Press <CR> on a line in the window to execute it.

------------------------------------------------------------------------------
Debugging Vim problems                                  *notes_tips_debugging*

- To disable plugins, per-user customizations, etc.: >

    vim --clean
<
- To display characters under the cursor: >

    ga  - decimal, hexadecimal, octal
    g8  - bytes in UTF-8 character
<
------------------------------------------------------------------------------
Quitting with non-zero return code                      *notes_tips_quitting*

When using Vim as the "fix command" editor in Bash (via the ``fc`` command
or via ``Ctrl-x Ctrl-e`` - "man bash" for details on fc), a successful
return code tells Bash to execute the commands.  This is somewhat
counter-intuitive when mixed with Vim's :qa! syntax which means "throw away
all my changes."  But Vim has a "throw away all my changes and return failure"
command: >
    :cquit
    :cq

This command is the same as :qa! but returns failure so Bash will ignore
the edited command.

------------------------------------------------------------------------------
Redirecting Vim command-line output                     *notes_tips_redirecting*

To capture the output generated by a Vim Ex command (e.g., |:map|), the
built-in |:redir| command is useful.  For example: >
    :redir @a
    :map
    :redir END
If the output of the command is lengthy, Vim pauses after each screenful of
output.  To avoid this, reset 'more' while redirecting: >
    :set nomore
    :redir @a
    :map
    :redir END
    :set more
Use a capital register name to append to an existing register.  Lowercase
registers will be cleared before output lines are accumulated in them.

A helper command :Redir has been defined to automatically set 'nomore' when
beginning a redirection, and to set 'more' when redirection terminates.  The
"END" keyword is optional to save typing when stopping redirection.
So the above example becomes: >
    :Redir @a
    :map
    :Redir

------------------------------------------------------------------------------
Using <C-q> and <C-s> in console Vim                    *notes_tips_xon_xoff*

When using console Vim, <C-q> and <C-s> are often trapped by the console
(they're the standard ASCII XON and XOFF characters).  To allow them to be
seen by console Vim on Linux, try the following in your ~/.bashrc: >

  # Disable XON/XOFF so CTRL-q and CTRL-s are available to Vim and friends
  # when stdout is connected to a terminal.
  test -t 0 && stty -ixon -ixoff

This is unnecessary for Gvim.

==============================================================================
Plugins                                                 *notes_plugins*

For help with plugins:

- Adding local help files |add-local-help|

General bundle installation instructions:               *bundle_installation*

Bundles are activated by the Pathogen plugin.  Each directory in 'runtimepath'
is probed looking for bundles matching the following patterns, where `{}` is
the name of the bundle itself: >

    bundle/{}           # Both Vim and Neovim
    vim-bundle/{}       # Vim only
    nvim-bundle/{}      # Neovim only
    pre-bundle/{}       # Higher-priority; both Vim and Neovim
    pre-vim-bundle/{}   # Higher-priority; Vim only
    pre-nvim-bundle/{}  # Higher-priority; Neovim only
<
The `pre-*bundle` directories are higher priority, giving a chance to override
things like UltiSnips with values from per-user directories and the like.

To enable, disable, or check the enabled status of a plugin, use the below
functions:
>
    call vimf#plugin#enable('plugin_name')
    call vimf#plugin#disable('plugin_name')
    if vimf#plugin#enabled('plugin_name')
        " 'plugin_name' is enabled....
    endif
<
To install a bundle:

- Move to bundle directory: >

    cd ~/.vim/bundle
<
  Instead of `bundle`, may use any of the above patterns (e.g,. `nvim-bundle` for
  Neovim-specific plugins).

  Instead of `~/.vim`, may also use per-user or per-location directories (e.g.,
  `~/.vimuser` or `~/.vimlocal`).

- Move existing bundle (if any) to a backup directory (optional): >

    mv bundle-name bundle-name~

- Remove existing bundle (if any): >

    git rm -rf bundle-name

- Acquire latest version using one of these techniques: >

  - Using a version-control system:

      git clone https://github.com/tpope/vim-bundle-name bundle-name

  - Using an archive file:

      mkdir bundle-name
      cd bundle-name
      tar -zxf .../bundle-name-x.y.z.tar.gz
      cd ..

    or, if archive contains the bundle-name top-level directory:

      tar -zxf .../bundle-name-x.y.z.tar.gz

  - Using a Vimball:

      # **Important** pre-create the bundle directory:
      mkdir bundle-name
      vim .../bundle-name.vba.gz
      " **Important** use absolute path:
      :UseVimball ~/.vim/bundle/bundle-name
      :q

- Rename extracted directory (if desirable), e.g.: >

    mv Bundle-Name-x.y.z bundle-name
    mv vim-bundle-name bundle-name

- Enter new bundle directory: >

    cd bundle-name

- Switch to tag (if appropriate): >

    git checkout v2.1.0

- Test bundle until satisfied.

- Remove unwanted hidden directories: >

    rm -rf {.git,.bzr,.hg,.svn,.VimballRecord}

- Add clean bundle tree to Git: >

    git add .

- Process help tags (if any) in Vim: >

    vim '+Helptags|q'
<
  Use `nvim` instead for Neovim-specific plugin: >

    nvim '+Helptags|q'
<
- Force-add any documentation tag files: >

    git add -f doc/tag*

INSTALLED PLUGINS~

Below are details of the installed plugins.

------------------------------------------------------------------------------
Ack - Search using 'ack' utility                        *notes_ack*
                                                        |ack|

Note that the regular expressions used in invocations of :Ack must be
quoted using the shell-specific rules of your environment.  See |:G|
for more details.

Local customizations:
- Version 2.24 of the single-file implementation of "ack" is installed in
  $VIMFILES/tool/ack, ensuring that it is available on all platforms with Perl
  installed.

For more information on "ack", see http://beyondgrep.com/.

Version 2018-02-27 (36e40f9) from:
https://github.com/mileszs/ack.vim.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Ag - Search using 'ag' utility                          *notes_ag*
                                                        |ag|

Note that the regular expressions used in invocations of :Ag must be
quoted using the shell-specific rules of your environment.  See |:G|
for more details.

To use this plugin, ensure that the "Silver Searcher" ('ag') utility is
installed.  See https://github.com/ggreer/the_silver_searcher for details.

The commands provided for Ag are the same as those for the Ack plugin
|notes_ack|.  See |ack.txt| for details, replacing "Ack" with "Ag" in the
commands.  See vimrc for more information.

------------------------------------------------------------------------------
Airline - statusline utility in pure vimscript          *notes_airline*
                                                        |airline.txt|

Version 2019-08-26 (6409c7b) from:
https://github.com/vim-airline/vim-airline

Themes version 2019-07-23 (b851658) from:
https://github.com/vim-airline/vim-airline-themes

Local Customizations:
- Added an AirlineCustomizeSymbols command to customize separators and symbols
  based on whether g:FontFamily supports Powerline symbols or not.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
ALE - Asynchronous Lint Engine                          *notes_ale*
                                                        |ale|

ALE provides automatic linting in an asynchronous fashion, providing feedback
as you type.  External linting tools are required for most languages; see
|notes_setup_vimfiles| for details on installing these prerequisites.

To disable ALE, place the following in your |VIMRC_VARS| file: >

  let g:EnableAle = 0
<
Local customizations:

- Mappings:

    <Space>=    Run ALEFix on current buffer

Usage notes:

- ALE results are stored in a Location List |location-list|; see
  |notes_quickfix_location| and |notes_quickfix_win| for more information.

- Use :ALE<Tab> to see a list of ALE commands, including:

  - :ALEDisable to stop linting globally; :ALEEnable to re-enable.
  - :ALEDisableBuffer to stop linting a given buffer.
  - :ALELint to force a lint operation.
  - :ALEInfo to see ALE settings, linter output, etc.

See |ALE| documentation for more details.

Version 2024-10-14 (2e5f135) from:
https://github.com/dense-analysis/ale

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/ale.git

- (branch rst_check): Add `g:ale_rst_rstcheck_options` configuration
  variable.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Align - Align things into columns                       *notes_align*
                                                        |align|

Align vimball comprises AlignPlugin and AlignMapsPlugin with a combined
version number.

Local customizations:

- The AlignMaps use `\|` (backslash pipe as the prefix instead of <Leader> to
  avoid mapping collisions.  So, for example, to align on `=` , use
  the mapping `\|t=` instead of `\t=` as originally defined.

Version 40a_46h (circa 2016-10-16) from section "Alignment" at
http://www.drchip.org/astronaut/vim/#ALIGN

with the following modifications found in branch `main` at:
https://github.com/drmikehenry/vim-align

- Allow g:Align_mapleader to define the leader prefix for AlignMaps.

Installation:
- Distributed as a |vimball|.
- Follow bundle installation instructions (|bundle_installation|).
- Remove bundle/align/plugin/cecutil.vim (this is in a separate bundle).

------------------------------------------------------------------------------
BufExplorer - Buffer switcher and manager               *notes_bufexplorer*
                                                        |bufexplorer|

Version 2020-02-17 (29258f5) from:
https://github.com/jlanzarotta/bufexplorer

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
BufMRU - Most-recently-used buffer switcher             *notes_bufmru*

(Documentation taken from top of bufmru.vim file and modified to match Vimfiles
changes.)

Usage:
  KEY(S)            ACTION
  <C-6>             Switch to the most recently used buffer and enter BufMRU
                    mode;  This is the same as Vim's CTRL-^ / CTRL-6 shortcut
                    key for the most-recently-used buffer
  <Space><Space>    Switch to MRU buffer and enter BufMRU mode.  This is easier
                    to invoke and closer to the original single-<Space> mapping
                    to aid muscle memory.

  in BufMRU MODE:
  f  b              Reach more MRU buffers (forward/backward)
  <Enter>           Accept current choice
  q                 Quit the mode, go back to start buffer (forcibly)

  The mode times out after 'timeoutlen' ms.  A key not mapped in the mode quits
  the mode and executes as usual, so for example pressing CTRL-6 again will
  cancel the current BufMRU mode, toggle back to the original buffer and
  re-launch BufMRU mode again.

Note: All unneeded keys are unmapped in BufMRU mode to avoid collisions with
console-mode Vim's Arrow keys (and other sequences that start with <Escape>).
This maximizes buffer switching speed without needing to press the
often-redundant <Enter> to exit BufMRU mode.

Version 3.3 (821869d) from:
https://github.com/vim-scripts/bufmru.vim

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/bufmru.vim

- (branch pretty-maps) make prettier status output and make it easier to unmap
  any undesired keys.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
BufKill - Kill buffer without closing window            *notes_bufkill*
                                                        |bufkill|

Usage:

:BUN      - unload a buffer, keeping window
:BUN!     - unload a buffer, keeping window (even if buffer is modified)
:BD       - delete a buffer, keeping window
:BD!      - delete a buffer, keeping window (even if buffer is modified)
:BW       - wipe a buffer, keeping window
:BW!      - wipe a buffer, keeping window (even if buffer is modified)
:BUNDO    - undo a previous :BUN, :BD, or :BW

Mappings:

  <Space>bd     :BW
  <Space>bD     :BW!

See also:
:bun      - unload a buffer, closing window (vim built-in)    |:bunload|
:bd       - delete a buffer, closing window (vim built-in)    |:bdelete|
:bw       - wipe a buffer, closing window (vim built-in)      |:buwipe|

Version 2018-03-20 (795dd38) from:
https://github.com/qpkorr/vim-bufkill.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Calutil - Calendar utilities                            *notes_calutil*

Version v3c (Nov 11, 2014) from:
http://www.drchip.org/astronaut/vim/index.html#CALUTIL

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Cecutil - Utilities for Dr. Chip's plugins              *notes_cecutil*


Version v18k (Nov 22, 2017) from:
http://www.drchip.org/astronaut/vim/index.html#CECUTIL

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
CloseTag - Close XML and HTML tags automatically        *notes_closetag*


Version 0.9.1 from:
http://www.vim.org/scripts/script.php?script_id=13

Installation:
- Install as ~/.vim/scripts/closetag.vim
- In ~/.vim/scripts.vim, source the script as part of per-filetype setup: >
    runtime scripts/closetag.vim

------------------------------------------------------------------------------
CMake syntax support                                    *notes_cmake*

Version v3.20.2 2021-04-29 from:
https://github.com/Kitware/CMake/releases

The official CMake release seems to be the latest; code seems to be shared
with this repository as well:
https://github.com/pboettch/vim-cmake-syntax.git

From that repo's README.md:

  The code of this repository is integrated in and released with CMake and is
  pulled into the official cmake-distribution "from time to time".

Installation:
- Extract release tarball (e.g., cmake-3.20.2.tar.gz) to temporary location.
- Copy the contents of the Auxiliary/vim directory into bundles/cmake.
- Generally follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Cmp - Neovim completion engine                          *notes_cmp*
                                                        |cmp.txt|

Version 2023-06-30 (2743dd9) from:
https://github.com/hrsh7th/nvim-cmp

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Cmp-buffer - Cmp source for buffer words                *notes_cmp-buffer*

Version 2022-08-10 (3022dbc) from:
https://github.com/hrsh7th/cmp-buffer

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Cmp-cmdline - Cmp source for Vim's cmdline              *notes_cmp-cmdline*

Version 2023-06-09 (8ee981b) from:
https://github.com/hrsh7th/cmp-cmdline

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Cmp-nvim-lsp - Cmp source for built-in LSP              *notes_cmp-nvim-lsp*
                                                        |cmp-nvim-lsp.txt|

Version 2023-06-23 (44b16d1) from:
https://github.com/hrsh7th/cmp-nvim-lsp

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Cmp-nvim-ultisnips - Cmp source for UltiSnips           *notes_cmp-nvim-ultisnips*

Version 2023-07-06 (24bca5c) from:
https://github.com/quangnguyen30192/cmp-nvim-ultisnips

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Cmp-path - Cmp source for filesystem paths              *notes_cmp-path*

Version 2022-10-03 (91ff86c) from:
https://github.com/hrsh7th/cmp-path

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
CPSM - CtrlP matcher in C++ for speed                   *notes_cpsm*

Setting up cpsm                                         *notes_cpsm_setup*

- Install any prerequisites:

  - A C++ compiler supporting C++11.
  - Boost (Ubuntu: package `libboost-all-dev`).
  - CMake (Ubuntu: package `cmake`).
  - Python headers (Ubuntu: package `python-dev`).
  - Optional, required for Unicode support: ICU (Ubuntu: package `libicu-dev`).

- Build the CPSM executable: >

    cd ~/.vim/bundle/cpsm
    ./install.sh
<
- Configure CtrlP to use the matcher: >

      let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}
      " Pressing <Space> will cause later characters to be placed before
      " earlier, e.g.:
      "   "foo bar qux" is matched as if it were "quxbarfoo".
      let g:cpsm_query_inverting_delimiter = ' '
<

See cpsm/README.md for additional optional settings.

Version 2021-07-25 (814961a) from:
https://github.com/nixprime/cpsm

Installation:
- Follow bundle installation instructions (|bundle_installation|).
  However, leave the .gitignore so that bin/ and build/ are ignored.

------------------------------------------------------------------------------
Cscope_maps - Neovim cscope support                     *notes_cscope_maps*
                                                        |cscope_maps.txt|

Version 2023-11-24 (c3922f1) from:
https://github.com/dhananjaylatkar/cscope_maps.nvim

See |notes_cscope| for more configuration information.

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
CtrlP - Fuzzy matches for files, buffers, etc.          *notes_ctrlp*
                                                        |ctrlp|

Local customizations:

- Commands:

    :C [path]  ==> :CtrlP [path]
    :CD [path]  ==> :CtrlPDir [path]

- Normal-mode mappings:

    CTRL-p CTRL-b        CtrlPBookmarkDir
    CTRL-p c             CtrlPChange
    CTRL-p C             CtrlPChangeAll
    CTRL-p CTRL-d        CtrlPDir
    CTRL-p CTRL-f        CtrlPCurFile   ; Relative to current file.
    CTRL-p CTRL-l        CtrlPLine
    CTRL-p CTRL-m        CtrlPMRU
    CTRL-p m             CtrlPMixed
    CTRL-p CTRL-o        CtrlPBuffer    ; Mnemonic: buffers are "Open" files.
    CTRL-p CTRL-p        CtrlP          ; From current working directory.
    CTRL-p CTRL-q        CtrlPQuickfix
    CTRL-p q             CtrlPQuickfix  ; Avoids CTRL-q (XOFF in terminal).
    CTRL-p CTRL-r        CtrlPRoot      ; From nearest enclosing project root.
    CTRL-p CTRL-t        CtrlPTag
    CTRL-p t             CtrlPBufTag
    CTRL-p T             CtrlPBufTagAll
    CTRL-p CTRL-u        CtrlPUndo

    <Space> bb           CtrlPBuffer    ; Open buffers.
    <Space> ff           CtrlPCurFile   ; Relative to current file.
    <Space> pf           CtrlPRoot      ; From nearest enclosing project root.

- When CtrlP is active, the pair CTRL-n/CTRL-p moves the cursor vertically to
  make a selection, and ALT-n/ALT-p move through the command prompt history.
  (For backward compatibility, CTRL-J/CTRL-k remain as aliases for
  ALT-n/ALT-p.)

  This is for consistency with other plugins that use CTRL-n/CTRL-p for moving
  around, and to avoid binding a commonly used function to the tmux prefix key
  (CTRL-j).

Version 2023-07-16 (7c972cb) from:
https://github.com/ctrlpvim/ctrlp.vim

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
DiffChar - Highlight diffs for characters and words     *notes_diffchar*
                                                        |diffchar|

Version 2021-12-07 (0c4fcb6) from:
https://github.com/rickhowe/diffchar.vim.git

- Normal-mode mappings:

    [b          Jump to the start position of the previous difference unit
    ]b          Jump to the start position of the next difference unit
    [e          Jump to the end position of the previous difference unit
    ]e          Jump to the end position of the next difference unit
    <Leader>g   Get difference unit from other buffer
    <Leader>p   Put difference unit to other buffer

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Easy-Align - Align text on delimiters                   *notes_easyalign*
                                                        |easyalign|

Local Customizations:
- Map \a to launch Easy-Align in normal and visual modes.
- Add custom alignment delimiters:

  Delimiter   Purpose
      \       Align on backslash (such as for C/C++ line continuations).

Version 2017-06-03 (1cd724d) from:
https://github.com/junegunn/vim-easy-align

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
EasyMotion - Multiple new motions                       *notes_easymotion*
                                                        |easymotion|

Local Customizations:
- Use custom mappings only.
- Set g:EasyMotion_smartcase so lowercase keys will match both cases.
- Setup g:EasyMotion_keys for convenient keys.

- Setup mappings:

  <Space>jj          <Plug>(easymotion-s)
  <Space>jJ          <Plug>(easymotion-s2)
  <Space>jl          <Plug>(easymotion-sol-bd-jk)

- Setup regular expressions for "anywhere" operations.

Version 2019-03-23 (85e90c9) from:
https://github.com/Lokaltog/vim-easymotion.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Endwise - End certain structures automatically          *notes_endwise*

This is a simple plugin that helps to end certain structures automatically. In
Ruby, this means adding end after if, do, def and several other keywords. In
Vimscript, this amounts to appropriately adding endfunction, endif, etc.
There's also Bourne shell, VB (don't ask), C/C++ preprocessor, and Lua
support.

This plugin does remap <CR> in insert mode.  It also adds a <C-x><CR> mapping
to force inserting an end.  However, the forced version isn't always correct.

Version 2023-04-23 (e714ac3) from:
https://github.com/tpope/vim-endwise

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Eunuch - helpers for UNIX                               *notes_eunuch*
                                                        |eunuch.txt|

Vim sugar for the UNIX shell commands that need it the most. Commands include:

:Remove[!]              Delete the file from disk and reload the buffer.
:Unlink[!]              Same as Remove[!].
:Delete[!]              Delete the file from disk and |:bdelete| the buffer.
:Copy[!] {file}         Small wrapper around |:saveas|.
:Duplicate[!] {file}    Like |:Copy|, but relative to current file's parent.
:Move[!] {file}         Like |:Copy|, but delete the old file, |:bwipe| old.
:Rename[!] {file}       Like |:Move|, but relative to current file's parent.
:Chmod {mode}           Change the permissions of the current file.
:Mkdir {dir}            Create directory {dir} and all parent directories.
:Mkdir                  Create the containing directory for the current file.
:Cfind[!] {args}        Run `find` into quickfix list, jump to first unless !.
:Lfind[!] {args}        Run `find` into location list, jump to first unless !.
:Clocate[!] {args}      Run `locate` into quickfix list, jump to first unless !.
:Llocate[!] {args}      Run `locate` into location list, jump to first unless !.
:SudoEdit [file]        Edit a file using sudo.
:SudoWrite              Use sudo to write the file to disk.
:Wall                   Like |:wall|, but for windows rather than buffers.
:W                      Writes files that haven't changed.

Version 2023-06-28 (67f3dd3) from:
https://github.com/tpope/vim-eunuch

Local customizations:
- Disable mapping of <CR> via: >

    let g:eunuch_no_maps = 1
<
  This is needed to avoid interfering with `vim-endwise` while using Neovim with
  the `cmp` plugin.  In particular, `vim-endwise` would fail to work after
  typing `if true; then<CR>` in a shell script after editing the shell script
  via `:e shellscript.sh` (though it works with `nvim shellscript.sh` for some
  reason).

  Eunuch's insert-mode mapping of <CR> isn't necessary and this is the easiest
  way to avoid breaking `vim-endwise`.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Extend_List - extend bulleted/numbered list item        *notes_extend_list*
                                                        |extend_list.txt|

Version 0.1.0 (1d004f4) from:
https://github.com/drmikehenry/vim-extend_list

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Extline - for extending lines                           *notes_extline*
                                                        |extline.txt|

Version 0.2.1 (0529b0d) from:
https://github.com/drmikehenry/vim-extline

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Fixkey - Fix key code for console Vim                   *notes_fixkey*
                                                        |fixkey.txt|

Version 0.3.15 (53c832b) from:
https://github.com/drmikehenry/vim-fixkey

Installation:
- Follow bundle installation instructions (|bundle_installation|).

See |fixkey.txt| for details on setting up your terminal.

------------------------------------------------------------------------------
Fontdetect - Detect installed fonts                     *notes_fontdetect*
                                                        |fontdetect.txt|

Version 0.3.0 (c238ea9) from:
https://github.com/drmikehenry/vim-fontdetect

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Fontsize - increment/decrement font size                *notes_fontsize*
                                                        |fontsize.txt|

  <Leader><Leader>=    Begin "font size" mode
  <Leader><Leader>+    Increment font size (by [count])
  <Leader><Leader>-    Decrement font size (by [count])
  <Leader><Leader>0    Revert to default font size

Note that by default, <Leader> is the backslash character, so for example
<Leader><Leader>+ is invoked by pressing \\+ from normal mode.

Prefix the above mappings with a numeric [count] to change the font size by
larger increments.  For example, increase the font size by 5 points via:

  5<Leader><Leader>+

The above mappings also initiate a "font size" mode in which the following
additional individual keys become active:

  +          Increment font size (may also use = to avoid shift key)
  -          Decrement font size
  0          Revert to default font size
  !          Save current size as new default
  q          Quit "font size" mode
  <SPACE>    Quit "font size" mode
  <CR>       Quit "font size" mode

Other keys pressed will exit "font size" mode and then perform their normal
function (e.g., pressing "j" will cancel "font size" mode and move down one
line).

In addition, "font size" mode will automatically timeout after |timeoutlen|
milliseconds have elapsed without a keypress, because "font size" mode is
based on mappings.

While "font size" mode is active, the prompt "(fontsize)" will be shown if
'showcmd' is set.

Version 0.5.0 (6133212) from:
https://github.com/drmikehenry/vim-fontsize

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
FSwitch - Filename switching (e.g., .c <=> .h)          *notes_fswitch*
                                                        |fswitch|

Usage:

Mapping       Command
\of           :FSHere      Other file "here" (current window)

\oh           :FSLeft      Other file into existing window on left
\oH           :FSLeft      Other file into new split window on left

\ol           :FSRight     Other file into existing window on right
\oL           :FSRight     Other file into new split window on right

\ok           :FSAbove     Other file into existing window above
\oK           :FSAbove     Other file into new split window above

\oj           :FSBelow     Other file into existing window below
\oJ           :FSBelow     Other file into new split window below

Compatibility command for Alternate.vim:

  :A        Same as :FSHere

Version 0.9.5 (e716da1) from:
https://github.com/derekwyatt/vim-fswitch

Installation:

- Follow bundle installation instructions (bundle_installation).

------------------------------------------------------------------------------
Fugitive - A wrapper for Git in Vim                     *notes_fugitive*
                                                        |fugitive|

See |fugitive-commands| for more information on the commands, but some of the
more useful ones are:

  :Gdiff    Perform a diff of the working file with HEAD
  :Gblame   To see what commits modified a set of lines
  :Gclog    To get a log of commits that affect the current file
  :Gstatus  To view the current state, stage changes, and many other things.
            See |fugitive-:Gstatus| for more information
  :Git      Run an arbitrary git command from within Vim

Note that :G is used in vimrc for recursive grepping (|notes_G|), which
overrides the use of :G for the Fugitive plugin.

Version 2021-07-30 (7a08772) from:
https://github.com/tpope/vim-fugitive.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Grep - Wrapper for grep/xargs                           *notes_grep*
                                                        |grep-plugin|

Usage:

:Grep          - Search for the specified pattern in the specified files
:GrepAdd       - Same as ":Grep" but adds the results to the current results
:Rgrep         - Run recursive grep
:RgrepAdd      - Same as ":Rgrep" but adds the results to the current results
:GrepBuffer    - Search for a pattern on all open buffers
:GrepBufferAdd - Same as ":GrepBuffer" but adds the results to the current
                 results
:Bgrep         - Same as :GrepBuffer
:BgrepAdd      - Same as :GrepBufferAdd
:GrepArgs      - Search for a pattern on all the Vim argument
                 filenames (:args)
:GrepArgsAdd   - Same as ":GrepArgs" but adds the results to the current
                 results
:Fgrep         - Run fgrep
:FgrepAdd      - Same as ":Fgrep" but adds the results to the current
                 results
:Rfgrep        - Run recursive fgrep
:RfgrepAdd     - Same as ":Rfgrep" but adds the results to the current
                 results
:Egrep         - Run egrep
:EgrepAdd      - Same as ":Egrep" but adds the results to the current
                 results
:Regrep        - Run recursive egrep
:RegrepAdd     - Same as ":Regrep" but adds the results to the current
                 results
:Agrep         - Run agrep
:AgrepAdd      - Same as ":Agrep" but adds the results to the current
                 results
:Ragrep        - Run recursive agrep
:RagrepAdd     - Same as ":Ragrep" but adds the results to the current
                 results

The above commands can be invoked like this:

   :Grep   [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Rgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Fgrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Rfgrep [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Egrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Regrep [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Agrep  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :Ragrep [<grep_options>] [<search_pattern> [<file_name(s)>]]

   :GrepAdd   [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :FgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RfgrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :EgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RegrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :AgrepAdd  [<grep_options>] [<search_pattern> [<file_name(s)>]]
   :RagrepAdd [<grep_options>] [<search_pattern> [<file_name(s)>]]

   :GrepBuffer [<grep_options>] [<search_pattern>]
   :Bgrep [<grep_options>] [<search_pattern>]
   :GrepArgs [<grep_options>] [<search_pattern>]

   :GrepBufferAdd [<grep_options>] [<search_pattern>]
   :BgrepAdd [<grep_options>] [<search_pattern>]
   :GrepArgsAdd [<grep_options>] [<search_pattern>]

Local customizations

- You can Regrep for the word under the cursor or the visual selection
  by pressing <F3>.

Installation:
- Follow bundle installation instructions (|bundle_installation|).
- Note: grep.txt is not directly downloadable; it was created from a
  copy-and-paste of the plugin web page.

Version 1.11 from:
http://www.vim.org/scripts/script.php?script_id=311

------------------------------------------------------------------------------
Grepper - Extensible wrapper for grep-like tools        *notes_grepper*
                                                        |grepper|

Using version 2021-08-30 (2b93535) from:
https://github.com/mhinz/vim-grepper

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/vim-grepper

- (branch setqflist) Set the QuickFix/Location list at the completion of the
  search, triggering the BufReadPost autocommand that the QuickFix Reflector
  plugin relies on.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Headerguard - Add guards for header files               *notes_headerguard*
                                                        |headerguard|

To add or update a header guard in a .h file: >

    :HeaderguardAdd

Version 0.2.2 (e53b37fa) from:
https://github.com/drmikehenry/vim-headerguard

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
HiLinkTrace - Display syntax highlighting stack         *notes_hilinktrace*
                                                        |hilinks|

To toggle automatic display of syntax highlighting stack: >

    :HLT!

Note: The non-bang :HLT (as well as the \hlt mapping) don't seem to work
properly, probably because of an interaction with other plugins.  The
:echo output seems to be lost in the one-shot :HLT mode.

Local Customizations:

- Disable mappings for <S-F10> and <Leader>hlt.

Version 4l (lowercase "L") from:
http://www.drchip.org/astronaut/vim/index.html#HILINKS

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Indent-guides - Adds indent guides                      *notes_indent-guides*
                                                         |indent-guides|

Indent Guides is a plugin for visually displaying indent levels in Vim.  The
guides can be toggled via <Leader>ig.  However, since we have some local
customizations, it will not persist through changing buffers.

Local Customizations:
- Make the plugin work on a buffer basis, rather than a global one.
- Set up a mechanism very similar to |g:SpellMap| and |b:SpellType| to control
  the indent guides.  The variables are g:IndentGuidesMap and
  b:IndentGuidesType.  See g:SpellMap documentation in vimrc for more detail
  on how this mechanism works.
- Indent guides is turned off default.  Use the following to turn it on: >
    let g:IndentGuides = 1
- Python is setup to use indent guides, if indent guides are enabled with the
  above.
- If your colorscheme has IndentGuidesOdd and IndentGuidesEven setup, then use
  those colors instead of letting the plugin automatically chose the colors.

Version 2013-06-23 (eec1b629) from:
https://github.com/nathanaelkane/vim-indent-guides.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
JavaComplete - Java Omnicompletion                      *notes_javacomplete*

Version 0.77.1.2 from:
http://vim.sourceforge.net/scripts/script.php?script_id=1785

Installation:
- Unzipped into ~/.vim/bundle/javacomplete
- :Helptags

------------------------------------------------------------------------------
Keepcase - Search-and-replace keeping case              *notes_keepcase*

Usage:

:SubstituteCase/\ctoto\(Titi\)tata/\1Tutu/g  >
    totoTitiTata -> titiTutu
    TotoTitiTata -> TitiTutu
    tototititata -> tititutu
    tototitiTata -> titiTutu
    TototitiTata -> TitiTutu

Can use other delimiters (e.g., #, @, ...)

Use \c to force case-insensitive matching, or use all lowercase in search.

Example: replace MyStruct with YourClass >
    #ifndef MYSTRUCT_H
    #define MYSTRUCT_H

    MyStruct myStruct;

    void
    MyStruct_function(MyStruct *pMyStruct)
    {
    }
    #endif /* MYSTRUCT_H */

Use this command: >
    :%SubstituteCase/mystruct/YourClass/g

Get this output: >
    #ifndef YOURCLASS_H
    #define YOURCLASS_H

    YourClass yourClass;

    void
    YourClass_function(YourClass *pYourClass)
    {
    }
    #endif /* YOURCLASS_H */

Using KeepCase or KeepCaseSameLen defined here, do a substitution like this: >
    %s/\u\<old_word\>/\=KeepCaseSameLen(submatch(0), 'new_word')/g

KeepCase(original_word, new_word)
  returns the new word maintaining case
  simply uses heuristics to work out some different common situations
    given   NewWord
    Word    --> Newword
    WORD    --> NEWWORD
    word    --> newword
    WoRd    --> NewWord
    woRd    --> newWord

KeepCaseSameLen(original_word, new_word)
  Returns the new word maintaining case
    Keeps the case exactly the same letter-for-letter
    It does work if the words aren't the same length, as it truncates or
    just copies the case of the word for the length of the original word.

Installation:
- Install keepcase.vim in ~/.vim/plugin

Version 2.0 from:
http://www.vim.org/scripts/script.php?script_id=6

------------------------------------------------------------------------------
Less - Syntax highlighting for LessCSS                  *notes_less*

Version 2012-10-01 (0223dcdf) from:
https://github.com/groenewege/vim-less

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Localvimrc - Override settings via local files          *notes_localvimrc*
                                                        |localvimrc.txt|

At startup, searches for and sources .lvimrc files starting from the root
directory down to the current working directory.  Then, for each file that is
opened, searches for and sources .lvimrc files from the root directory down to
the file's containing directory.

The .lvimrc files are sourced by default using |:sandbox| (though this may be
changed via g:localvimrc_sandbox).  At present, Vim restricts the use of
|:setlocal| in a sandbox, so to change buffer-local properties, use |:set|
instead.

For example, to use 8-character tabs in "C" source files and disable
highlighting of tab characters, create a .lvimrc file in a parent directory
containing the source files.  The .lvimrc file might contain: >

  if &filetype == 'c'
      setlocal noexpandtab tabstop=8 softtabstop=8 shiftwidth=8
      Highlight notabs
  endif
<
Or to make localized changes based on the current filename: >

  " Change *.asm and *.inc to mean Z80 assembly instead of x86.
  " Get the extension of the current filename:
  let s:ext = expand('%:e')
  if s:ext == 'asm' || s:ext == 'inc'
      SetupSource
      setfiletype z80
  endif
<
To re-use a group of settings, create a function (say, in the global vimrc
file), then call it from the .lvimrc files.

Version 2020-06-30 (ac6444a) from:
https://github.com/embear/vim-localvimrc.git

Local customizations:

- Enabled persistence by default, which also required adding '!' to viminfo.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
LoremIpsum - Generate dummy text                        *notes_loremipsum*
                                                        |loremipsum.txt|

The Lorem Ipsum is a famous bit of Latin text used by typesetters for
focusing on layout without being distracted by the text's meaning.

See http://lipsum.com/ for details on Lorem Ipsum itself.

Usage:

:Loremipsum[!] [COUNT]     Insert COUNT words (default 100)

With [!], inserts as a single paragraph.

More options exist - see |loremipsum.txt| for details.

Version 0.2 from:
http://www.vim.org/scripts/script.php?script_id=2289

Installation:
- Distributed as a |vimball|  >

    vim loremipsum.vba.gz
    :so %
    :q

------------------------------------------------------------------------------
LspConfig - Neovim LSP configuration                    *notes_lspconfig*
                                                        |lspconfig|

Version 2024-10-12 (d141895) from:
https://github.com/neovim/nvim-lspconfig

Local customizations:
  <Space>=        - Format buffer
  <Space>lR       - Rename identifier
  <Space>la       - Action
  gd              - Go to Definition
  gI              - Go to Implementation

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Lusty Explorer/Juggler - File/buffer switcher           *notes_lusty*

Lusty combines a File/buffer explorer |notes_lustyexplorer| and a buffer
"juggler" |notes_lustyjuggler| in the same plugin.

Explorer usage (taken from lusty-explorer.vim):         *notes_lustyexplorer*

  <Leader>lf  - Opens the filesystem explorer.
  <Leader>lr  - Opens the filesystem explorer from the
                directory of the current file.
  <Leader>lb  - Opens the buffer explorer.
  <Leader>lg  - Opens the buffer grep, for searching through
                all loaded buffers

You can also use the commands:

  ":LustyFilesystemExplorer [optional-path]"
  ":LustyFilesystemExplorerFromHere"
  ":LustyBufferExplorer"
  ":LustyBufferGrep"

To suppress the default mappings, set this option:

  let g:LustyExplorerDefaultMappings = 0

When launched, a new window appears at bottom presenting a
table of files/dirs or buffers, and in the status bar a
prompt:

  >>

As you type, the table updates for possible matches using a
fuzzy matching algorithm (or regex matching, in the case of
grep).  Special keys include:

  <Enter>  open selected match
  <Tab>    open selected match
  <Esc>    cancel
  <C-c>    cancel
  <C-g>    cancel

  <C-t>    open selected match in a new [t]ab
  <C-o>    open selected match in a new h[o]rizontal split
  <C-v>    open selected match in a new [v]ertical split

  <C-n>    select [n]ext match
  <C-p>    select [p]revious match
  <C-f>    select [f]orward one column
  <C-b>    select [b]ack one column

  <C-u>    clear prompt

Additional shortcuts for the filesystem explorer:

  <C-w>    ascend one directory at prompt
  <C-r>    [r]efresh directory contents
  <C-a>    open [a]ll files in current table
  <C-e>    create new buffer with the given name and path

Filesystem Explorer:

 - Directory contents are memoized.  (<C-r> to refresh.)
 - You can recurse into and out of directories by typing the directory name
   and a slash, e.g. "stuff/" or "../".
 - Variable expansion, e.g. "$D" -> "/long/dir/path/".
 - Tilde (~) expansion, e.g. "~/" -> "/home/steve/".
 - Dotfiles are hidden by default, but are shown if the current search term
   begins with a '.'.  To show these file at all times, set this option:

      let g:LustyExplorerAlwaysShowDotFiles = 1

 You can prevent certain files from appearing in the table with the
 following variable:

   set wildignore=*.o,*.fasl,CVS

 The above will mask all object files, compiled lisp files, and
 files/directories named CVS from appearing in the table.  Note that they
 can still be opened by being named explicitly.

 See :help 'wildignore' for more information.

Buffer Explorer:

 - Buffers are sorted first by fuzzy match and then by most-recently used.
 - The currently active buffer is highlighted.

Buffer Grep:

 - Searches all loaded buffers.
 - Uses Ruby-style regexes instead of Vim style.  This means:

   - \b instead of \< or \> for beginning/end of word.
   - (foo|bar) instead of \(foo\|bar\)
   - {2,5} instead of \{2,5}
   - + instead of \+
   - Generally, fewer backslashes. :-)

 - For now, searches are always case-insensitive.
 - Matches from the previous grep are remembered upon relaunch;  clear with
   <C-u>.

Juggler Usage (taken from lusty-juggler.vim):           *notes_lustyjuggler*

         <Leader>lj  - Opens the buffer juggler.
         <M-s>       - Opens the buffer juggler (local customization)

       You can also use this command:

         ":LustyJuggler"

       To suppress the default mapping, set this option:

         let g:LustyJugglerDefaultMappings = 0

       When launched, the command bar at bottom is replaced with a
       new bar showing the names of currently-opened buffers in
       most-recently-used order.

       The buffers are mapped to these keys:

           1st|2nd|3rd|4th|5th|6th|7th|8th|9th|10th
           ----------------------------------------
           a   s   d   f   g   h   j   k   l   ;
           1   2   3   4   5   6   7   8   9   0

       So if you type "f" or "4", the fourth buffer name will be
       highlighted and the bar will shift to center it as necessary
       (and show more of the buffer names on the right).

       If you want to switch to that buffer, press "f" or "4" again
       or press "<ENTER>".  Alternatively, press one of the other
       mapped keys to highlight another buffer.  To open the buffer
       in a new split, press "b" for horizontal or "v" for vertical.

       To display the key with the name of the buffer, add one of
       the following lines to your |VIMRC_BEFORE| script:

         let g:LustyJugglerShowKeys = 'a'   (for alpha characters)
         let g:LustyJugglerShowKeys = 1     (for digits)

       To cancel the juggler, press any of "q", "<ESC>", "<C-c",
       "<BS>", "<Del>", or "<C-h>".

       LustyJuggler can act very much like <A-Tab> window switching.
       To enable this mode, add the following line to your
       |VIMRC_BEFORE| script:

         let g:LustyJugglerAltTabMode = 1

       Then, given the following mapping:

         noremap <silent> <A-s> :LustyJuggler<CR>

       Pressing "<A-s>" will launch the LustyJuggler with the
       previous buffer highlighted. Typing "<A-s>" again will cycle
       to the next buffer (in most-recently used order), and
       "<ENTER>" will open the highlighted buffer.  For example, the
       sequence "<A-s><Enter>" will open the previous buffer, and
       "<A-s><A-s><Enter>" will open the buffer used just before the
       previous buffer, and so on.

Bonus: This plugin also includes the following command, which will
       immediately switch to your previously used buffer:

         ":LustyJugglePrevious"

       This is similar to the ":b#" command, but accounts for the
       common situation where the previously used buffer (#) has
       been killed and is thus inaccessible.  In that case, it will
       instead switch to the buffer used before that one (and on down
       the line if that buffer has been killed too).

Local customizations:
  <M-s>           - launch LustyJuggler

Version 2018-07-24 (a9b501e) from:
https://github.com/sjbach/lusty.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Man - Vim's built-in support for man pages              *notes_man*
                                                        |man|

See |man| for details on Vim's support for Manpages.

Press `K` to get help on the word under the cursor.

Use `:Man topic` to get help on `topic`.

------------------------------------------------------------------------------
Markdown - Markdown syntax support                      *notes_markdown*

Version 2022-10-13 (a282dd8) from:
https://github.com/tpope/vim-markdown

Local Customizations:
- Disable built-in embedded language support and setup our own--mainly to
  prevent multiple inclusion of the syntax definitions for c.
- The list of languages defaults to be the same as g:rstEmbeddedLangs.  Set
  g:markdownEmbeddedLangs to override the list of available languages for
  embedding.
- Made syntax/mkd.vim delegate in syntax/markdown.vim to give anyone who sets
  the filetype to "mkd" support for markdown.
- Disable highlighting of `markdownError`; this syntax group detects underscores
  within words.  Such underscores are not generally errors (see
  https://spec.commonmark.org/0.30/#emphasis-and-strong-emphasis), but to retain
  the original highlighting anyway, set g:LocalAllowMarkdownError to 1.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Matchup - Enhanced extended matching with '%'           *notes_matchup*
                                                        |matchup|

Press '%' to match:
  - Bracket pairs:  () [] {}
  - C-language #if / #else / #endif
  - HTML tags <start> / </end>
  - etc.

Matchup disables and supersedes the functionality of both the matchparen
plugin distributed with Vim as well as the matchit plugin (if found).

Version 5.0 2020-05-07 (6836995) from:
https://github.com/andymass/vim-matchup

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Misc - Contains many useful Vimscript functions         *notes_misc*
                                                        |misc.txt|

Version 1.17.6 (2015-05-21) from:
https://github.com/xolox/vim-misc

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/vim-misc

- (branch silent-system) Use `:silent` during `system()`, avoiding display of
  junk escape sequences during startup.

This plugin is also used by the session plugin.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Moonscript - support for a dialect of Lua               *notes_moonscript*


Version 77cf9ef0 (December 4, 2013) from:
https://github.com/leafo/moonscript-vim

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Mundo - Visualize your undo tree                        *notes_mundo*
                                                        |mundo|

Mundo is a Vim plugin for visualizing your undo tree to make it usable.

To toggle the undo view, use :MundoToggle.

Mappings:
  <Space>qu     :MundoToggle

Version 2023-12-15 (2ceda8c) from:
https://github.com/simnalamburt/vim-mundo

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
None-LS - Neovim non-LSP language tool support          *notes_none-ls*

Version 2024-10-11 (6bdd9b3) from:
https://github.com/nvimtools/none-ls.nvim

- Replaces https://github.com/jose-elias-alvarez/null-ls.nvim; internally,
  provides the `null-ls` namespace for compatibility.

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
None-LS-shellcheck - Shellcheck support for none-ls     *notes_none-ls-shellcheck*

Version 2024-03-09 (0f84461) from:
https://github.com/gbprod/none-ls-shellcheck.nvim

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
OmniCppComplete - C/C++ Omnicompletion                  *notes_omnicppcomplete*
                                                        |omnicppcomplete|

CTRL-x CTRL-o - Completion of normal identifiers.
"." or "->" - Completion of struct fields.

Within popup completion menu:
CTRL-y - Yes: accept currently selected match.
CTRL-e - End completion, reverting to what was typed.
CTRL-n - Insert next completion.
CTRL-p - Insert previous completion.
<Down> - Select next match (like CTRL-n), but don't insert it.
<Up>   - Select previous match (like CTRL-p), but don't insert it.

Requires a ctags database generated using these options: >
    --c++-kinds=+p
    --fields=+iaS
    --extras=+q             " if using Universal Ctags
    --extra=+q              " if using Exuberant Ctags
<

The supplied "gentags" script generates "tags" files with the correct options;
see |notes_tag_files| for more details.

For more details on insert-mode completion:|ins-completion|

Version 0.41 from:
https://github.com/vim-scripts/OmniCppComplete

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/OmniCppComplete

- (branch skip-doxygen) Skip Doxygen comments when looking for completions.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
PATHOGEN                                                *notes_pathogen*

Version 2022-08-24 (ac4dd94) from:
https://github.com/tpope/vim-pathogen

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Powerline - The ultimate vim statusline utility         *notes_powerline*
                                                        |Powerline.txt|

The default setup is actually very good.  If you find yourself tweaking the
segments that are available though, make sure to run :PowerlineClearCache,
otherwise you may not see your settings take effect.

Also, the GUI version can make use of a "fancy" patched font.
|Powerline-symbols-fancy| provides some information, but the README in
bundle/powerline/fontpatches/README.rst provides more information.
If you use Droid Sans Mono as your font, a patched version of the font is
available here:
https://github.com/jszakmeister/etc/blob/master/fonts/DroidSansMonoSlashed-Powerline.ttf

You can also use the following block on Linux and Mac OS X to help detect the
font and use it: >

    " Turn on fancy symbols on the status line
    if has("gui_running")
        if filereadable(expand("~/Library/Fonts/DroidSansMonoSlashed-Powerline.ttf")) ||
           \ filereadable(expand("~/.fonts/DroidSansMonoSlashed-Powerline.ttf"))
            if has("mac") || has("macunix")
                set guifont=Droid\ Sans\ Mono\ Slashed\ for\ Powerline:h14
            else
                set guifont=Droid\ Sans\ Mono\ Slashed\ for\ Powerline\ 14
            endif

            let g:Powerline_symbols = 'fancy'
        endif
    endif
<

If you don't want to use Powerline, you can add the following to your
|VIMRC_VARS| file: >

    let g:EnablePowerline = 0
<
Version 2012-08-17 from:
https://github.com/Lokaltog/vim-powerline

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/vim-powerline

- (branch preserve-list)

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Plenary - Neovim functions for Telescope                *notes_plenary*
                                                        |plenary|

Version 2024-05-20 (a3e3bc8) from:
https://github.com/nvim-lua/plenary.nvim

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Project - Managing "projects" of files                  *notes_project*
                                                        |project|

To invoke the project window: >
    :Project

Local customizations:
  <F8>            - toggles the project window on and off.
  CTRL-q CTRL-p   - toggles the project window on and off.
  CTRL-q P        - toggles the project window on and off.
  <Space> q p     - toggles the project window on and off.

Version 1.4.1 from:
http://www.vim.org/scripts/script.php?script_id=69

Installation:
- Unzip in ~/.vim/
- :helptags ~/.vim/doc

------------------------------------------------------------------------------
Quickfix-reflector - edit QuickFix and save changes     *notes_quickfix-reflector*
                                                        |quickfix-reflector.txt|

Version 2018-01-26 (135bc41) from:
https://github.com/stefandtw/quickfix-reflector.vim.git

Perform a search that populates the QuickFix list, then edit the contents of
the QuickFix list itself.  Delete any lines you don't want to be modified,
and edit the text of lines you'd like to change.  In particular, it's very
convenient to perform :%s/old/new/g within the QuickFix window to replace
strings across many files at once.  Then, when you are satisfied with the
contents of the QuickFix window, perform :w on the QuickFix window itself and
your changes will be written back to the corresponding locations in the original
files that were searched.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Rainbow Parentheses - Highlight nested parens           *notes_rainbow-parens*

You can adjust the colors by setting g:rbpt_colorpairs_dark or
g:rbpt_colorpairs_light, based on your background color, e.g.: >
  let g:rbpt_colorpairs_dark = [
      \ ['brown',       'RoyalBlue3'],
      \ ['Darkblue',    'SeaGreen3'],
      \ ['darkgray',    'DarkOrchid3'],
      \ ['darkgreen',   'firebrick3'],
      \ ['darkcyan',    'RoyalBlue3'],
      \ ['darkred',     'SeaGreen3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['brown',       'firebrick3'],
      \ ['gray',        'RoyalBlue3'],
      \ ['black',       'SeaGreen3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['Darkblue',    'firebrick3'],
      \ ['darkgreen',   'RoyalBlue3'],
      \ ['darkcyan',    'SeaGreen3'],
      \ ['darkred',     'DarkOrchid3'],
      \ ['red',         'firebrick3'],
      \ ]

When the colorscheme changes, the 'background' option is used to select which
of g:rbpt_colorpairs_dark or g:rbpt_colorpairs_light will be assigned to the
plugin's global g:rbpt_colorpairs variable.  The maximum number of levels
is automatically counted based on g:rbpt_colorpairs and stored in g:rbpt_max.
Finally, g:rbpt_loadcmd_toggle controls the initial state on startup.

Local customizations:

- Turn on rainbow parens when editing Clojure and ClojureScript source code.
- Adjusted the colors to match what was used in VimClojure, and made them
  take advantage of a 256-color terminal, if available.

Version 2013-03-04 (eb8baa54) from:
https://github.com/kien/rainbow_parentheses.vim

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Repeat - Repeat operations for supported plugins        *notes_repeat*


Plugins need to support this feature explicitly (such as the
surround plugin).

Version 1.2 (8106e14) from:
https://github.com/tpope/vim-repeat

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
ReStructuredText - updated support for rst              *notes_rst*


Version 2021-02-12 (8284ec3) from:
https://github.com/marshallward/vim-restructuredtext

with scripts/rstliteralblockfix.vim supplying a command to toggle
a fix for literal block syntax highlighting:
>
  :RstLiteralBlockFix on          " Enable fix.
  :RstLiteralBlockFix off         " Disable fix.
<
The fix is enabled by default; see SetupRstSyntax() in vimrc.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
RunView - Run lines through filter into buffer          *notes_runview*
                                                        |RunView|

Version v4e (Jan 12, 2018) from:
http://www.drchip.org/astronaut/vim/#RUNVIEW

Local customizations: >
  " Setup Bash as default view to run.
  let g:runview_filtcmd="bash"

Installation:
- Depends on DrC's Utilities: |notes_cecutils|
- Follow bundle installation instructions (|bundle_installation|),
  but MUST ALSO delete this file, since cecutil is installed separately: >

    bundle/runview/plugin/cecutil.vim

------------------------------------------------------------------------------
Rust - Language support for Rust                        *notes_rust*
                                                        |rust|

Version 2022-11-27 (889b9a7) from:
https://github.com/rust-lang/rust.vim

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/rust.vim

- (branch embedded-syntax) Turn off Rust-specific syntax highlighting when
  embedded into other syntax context (e.g., within a reStructuredText file).

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Scriptease - Debugging tools for Vimscripts             *notes_scriptease*
                                                        |scriptease|

Usage:

  |:PP|           Pretty print.
  |:PPmsg|        Pretty print the value of {expr} using |:echomsg|.
  |:Runtime|      Reload runtime files.  Like |:runtime!|, but it unlets any
                include guards first.
  |:Disarm|       Remove a runtime file's maps, commands, and autocommands,
                effectively disabling it.
  |:Scriptnames|  Load |:scriptnames| into the quickfix list.
  |:Verbose|      Capture the output of a `:verbose` invocation into the
                preview window.
  |:Time|         Measure how long a command takes.
  |:Breakadd|     Like its lowercase cousin, but makes it much easier to set
                breakpoints inside functions.  Also |:Breakdel|.
  |:Vedit|        Edit a file relative the runtime path. For example,
                ":Vedit plugin/scriptease.vim". Also, |:Vsplit|,
                |:Vtabedit|, etc.
  |K|             Look up the |:help| for the VimL construct under the cursor.
  |zS|            Show the active syntax highlighting groups under the cursor.
  |g!|            Eval a motion or selection as VimL and replace it with the
                result.  This is handy for doing math, even outside of VimL.
                It's so handy, in fact, that it probably deserves its own
                plugin.

Version 2018-04-12 (f0ea516) from:
https://github.com/tpope/vim-scriptease.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
ScrollColor - Scroll through color schemes              *notes_scrollcolor*

Usage: >

  :SCROLLCOLOR  Use arrow keys to scroll through color schemes
  :COLORSCROLL  [Synonym for :SCROLLCOLOR]
  :PREVCOLOR  Move to alphabetically previous color
  :NEXTCOLOR  Move to alphabetically next color

Version 2006-07-19 from:
http://www.vim.org/scripts/script.php?script_id=1488

Installation:
- Copy ScrollColor.vim to ~/.vim/plugin/ScrollColor.vim

- Edit ScrollColor.vim and comment out these mappings (toward bottom of file): >

    map \n
    map \p
    map \c

------------------------------------------------------------------------------
Session - Provides better session management            *notes_session*
                                                        |session.txt|

Version 2.13.1 (2015-11-01) from:
https://github.com/xolox/vim-session

Note: this plugin requires the misc plugin.

Local Customizations:
- Autoloading (|g:session_autoload|) is enabled.
- Autosaving (|g:session_autosave|) is turned off.
- Aliases (|g:session_command_aliases|) have been turned on.  These versions
  start with Session, so they're easier to remember.  For example,
  |:SaveSession| has an alias named |:SessionSave|.
- The |:SaveSession| command has been overridden to prevent accidentally
  saving a default session with a plain |:SaveSession| command.  If you want
  to save a default session, use the bang version of the command,
  |:SaveSession!|, or ":SaveSession default".
- The session storage (|g:session_directory|) has been configured to be
  $VIM_CACHE_DIR/sessions.
- Persisting font settings is disabled.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Signature - Signs and helpers for bookmarks             *notes_signature*
                                                         |signature|

Signature is a plugin to place, toggle and display marks.

Apart from the above, you can also:
- Navigate forward/backward by position/alphabetical order
- Display multiple marks (up to 2, limited by the signs feature)
- Placing custom signs !@#$%^&*() as visual markers

Version 2018-07-06 (6bc3dd1) from:
https://github.com/kshenoy/vim-signature.git

Local Customizations:
- Mark placement is "forced", which means the toggling feature is disabled.
  To remove mark "x", use: >

    dmx

- Remove Signature maps that hide valuable Vim built-in functionality for
  jumping to the start or end of recent yanks or changes:
    '[, '], `[, and `]

  This is done via assignment to g:SignatureMap in vimrc.  To restore this
  functionality, unlet g:SignatureMap in your vimrc-after.vim file.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Snippets - Default snippets for UltiSnips               *notes_snippets*

Contains snippets for many languages (and for use by several different plugins).
These snippets are not available for use by default due to the clearsnippets
functionality not working as expected in UltiSnips 3.0 and the likelihood that
clearsnippets will go away completely.  To make these snippets available, add
the following to your user vimrc configuration: >

   call pathogen#surround(expand('$VIMFILES/optional-bundle/snippets'))
<
Version 2019-09-03 (55b29ff) from:
https://github.com/honza/vim-snippets.git

Installation:
- Follow bundle installation instructions (|bundle_installation|), placing
  into ~/.vim/optional-bundle/snippets.

------------------------------------------------------------------------------
SpotDiff - Partial diffs of areas and line ranges       *notes_spotdiff*
                                                        |spotdiff|

- Commands:

    :[range]Diffthis
        Select a range of lines with [range] (default: current line) and make
        the current window diff mode.

    :Diffoff[!]
        Clear the selected range of lines and reset diff mode for the current
        window. If ! flag is specified, clear and reset for all windows in the
        current tab page.

    :Diffupdate
        Update the differences for the selected range of lines in the current
        tab page.

Do not use vim original diff commands together with this plugin's ones. Try
:Diffoff! to reset all in a trouble.

Version 2021-12-09 (12a8677) from:
https://github.com/rickhowe/spotdiff.vim.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Surround - Manipulating "surroundings"                  *notes_surround*
                                                        |surround.txt|

Usage (An asterisk (*) is used to denote the cursor position):
  Old text                  Command     New text ~
  "Hello *world!"           ds"         Hello world!
  [123+4*56]/2              cs])        (123+456)/2
  "Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
  if *x>3 {                 ysW(        if ( x>3 ) {
  my $str = *whee!;         vllllS'     my $str = 'whee!';

See |surround.txt| for more complete examples and documentation.

Version 2022-10-25 (3d188ed) from:
https://github.com/tpope/vim-surround

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Svn - View Subversion diffs while writing log           *notes_svn*


Install this plugin as ~/.vim/ftplugin/svn.vim and use Vim as the
editor for Subversion's command-line interface.  When editing a
commit log message, the Subversion diffs will be displayed in a
separate window.

Version 0.5 from:
http://www.vim.org/scripts/script.php?script_id=978

Note: Named svn-diff.vim in the index, but svn.vim is the new name.

Installation:
- Copy svn.vim to ~/.vim/ftplugin/

------------------------------------------------------------------------------
SwapIt - Cycle through related words                    *notes_swapit*
                                                        |swapit|

Press CTRL-a to cycle forward through the list of related words
Press CTRL-x to cycle forward through the list of related words

Works in Normal and Visual mode.

E.g., with cursor on "true" pressing CTRL-a changes the word to "false".

Local customizations:
- Adjust the list of global swap lists.  See the full list in
  g:default_swap_list (file $VIMFILES/after/plugin/swaplist.vim).

Version 2020-11-30 (0862d36) from:
https://github.com/mjbrownie/swapit.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Syntastic - Syntax checking hacks for Vim               *notes_syntastic*
                                                         |syntastic|

If you just want to turn everything off, try this: >

  :SyntasticFiletypeDefault *

You may put that command in your vimrc-after.vim file to make it permanent.

To clear existing errors on a buffer, execute the following: >

  :SyntasticReset

Syntastic can launch "checkers" to verify syntax and hunt for errors when
working with particular kinds of files.  For instance, it can run pylint,
pyflakes, or pep8 to check the syntax of your Python file and to hunt for other
kinds of errors (unused imports, shadowing of variable names, etc.).

On actively checked file types, Syntastic will run the checkers whenever you
save.  On passive file types, you can run them manually with |:SyntasticCheck|.

After checking, view a location list with the errors via the |:Errors| command,
or toggle the location list via CTRL-Q CTRL-L (or <Space> q l).

Syntastic maintains a global mode to determine when to check a file.  In
"passive" mode, checks are done manually via |:SyntaxCheck|.  In "active" mode,
files are checked when they are saved.  The global mode may be toggled via
|:SyntasticToggleMode|.  Certain filetypes may be designated as always-active or
always-passive.  To provide comfortable defaults, certain filetypes are preset
in vimfiles to be marked "active", and the global mode is initially set to
"passive" to avoid running Syntastic checks unexpectedly on arbitrary
filetypes.

To stop showing the current Syntastic errors, use |:SyntasticReset|; this
clears the currently displayed errors, but will not prevent new errors
from showing at the next Syntastic check operation.

Local customizations:
- Set the global mode to "passive", and configure a few filetypes to be
  "active".  You can set |g:syntastic_mode_map| if you need different behavior.
- Turned off warnings globally (via |g:syntastic_quiet_messages|) because some
  checkers are really verbose (pylint, for example).  Warnings may be changed on
  an individual buffer basis via |b:syntastic_quiet_messages|.
- Enabled balloon support so that you can hover over the line with the error
  and see what is wrong.
- Disabled highlighting of the portion of the line containing the error.
  It doesn't work very well, and uses the spell check highlighting by
  default--which is confusing.
- Customized the Powerline segment to use a shortened form for errors and
  warnings.
- Used nicer error and warning symbols where Vim can support it.

In addition, several custom commands were added to control Syntastic's behavior.

:SyntasticBufferMode
:SyntasticBufferMode active
:SyntasticBufferMode passive
:SyntasticBufferMode inherited
        Adjust the active/passive mode for the current buffer.  With no
        arguments, display the per-buffer mode.  Setting to "inherited"
        causes the per-buffer setting to be removed so that the global setting
        will be used.

        When changing the mode, a :SyntasticReset command will be issued to
        clear any existing errors.

:SyntasticBufferChecking
:SyntasticBufferChecking on
:SyntasticBufferChecking off
:SyntasticBufferChecking inherited
        Adjust whether the buffer is eligible for checking.  With no arguments,
        display the per-buffer setting.  Setting to "inherited" causes the
        per-buffer setting to be removed.

        When setting to "off", a :SyntasticReset command will be issued to
        clear any existing errors.

:SyntasticBufferIgnoreLevel
:SyntasticBufferIgnoreLevel nothing
:SyntasticBufferIgnoreLevel warnings
:SyntasticBufferIgnoreLevel errors
:SyntasticBufferIgnoreLevel inherited
        Adjusts the ignore level for filtering error messages for the current
        buffer.
        Argument:
          (none)        Display the per-buffer level.
          nothing       Ignore nothing (i.e., all warnings are enabled).
          warnings      Ignore warnings (keeping errors)
          errors        Ignore errors (keeping warnings)
          inherited     Set level to current global level.

        When changing the level, a :SyntasticReset command will be issued to
        clear any existing errors.

:SyntasticBufferIgnoreRegex
:SyntasticBufferIgnoreRegex .
:SyntasticBufferIgnoreRegex ..
        Adjusts the ignore regular expression for filtering error messages for
        the current buffer.  With no arguments, display the per-buffer setting.
        Argument:
          (none)        Display the per-buffer regex.
          (some regex)  Set regex to supplied argument.
          .             Disable regex so nothing is ignored.
                        (displayed as <nothing>)
          ..            Set regex to current global regex value.

        When changing the regex, a :SyntasticReset command will be issued to
        clear any existing errors.

:SyntasticFiletypeActive
:SyntasticFiletypeActive list-of-filetypes
:SyntasticFiletypePassive
:SyntasticFiletypePassive list-of-filetypes
:SyntasticFiletypeDefault list-of-filetypes
:SyntasticFiletypeDefault *
        Setup which filetypes to consider as "always active" or "always
        passive".  Syntastic defines an active filetype as one that will be
        checked on each save.  Passive filetypes are checked only via a manual
        invocation of :SyntasticCheck.  By default, filetypes follow Syntastic's
        global mode (which may be toggled via :SyntasticToggleMode).  Within
        vimfiles, the global mode defaults to "passive" so that files must be
        manually checked in general.  To override this global behavior on a
        per-filetype basis, Syntastic maintains two separate lists of filetypes,
        designated "active" filetypes and "passive" filetypes.  In the global
        "passive" mode, files are generally not automatically checked except for
        filetypes marked as "active"; similarly, in the global "active" mode,
        all files are generally checked except for filetypes marked as
        "passive".  Perhaps surprisingly, Syntastic permits a filetype to be
        designated both "active" and "passive" simultaneously.  This is because
        in the global "passive" mode, the list of "passive" filetypes is
        ignored, and in global "active" mode, the list of "active" filetypes is
        ignored.  But because this pathological case doesn't make much sense,
        vimfiles treats the "active" and "passive" lists as though they were
        disjoint.  Using the above commands to place a filetype on the "active"
        or "passive" list will remove that filetype from the other list.

        Examples:

          " Show which filetypes are listed as "active".
          SyntasticFiletypeActive

          " Setup python and c as "active" filetypes.
          SyntasticFiletypeActive python c

          " Setup python as a "passive" filetype.
          SyntasticFiletypePassive python

          " Setup c to be a default filetype (tracking the global mode).
          SyntasticFiletypeDefault c

          " Setup all filetypes to track the global mode.
          SyntasticFiletypeDefault *

        When making changes, a :SyntasticReset command will be issued to
        clear any existing errors.

:SyntasticBufferSetup very_strict
:SyntasticBufferSetup strict
:SyntasticBufferSetup strict_except_case
:SyntasticBufferSetup lax
        These provide a convenient way to set multiple per-buffer settings.

        Argument:
          very_strict         Enable (almost) all warnings and errors.
          strict              Enable most warnings and errors.
          strict_except_case  Enable most warnings and errors except those
                              related to the case of identifiers.
          lax                 Enable errors but disable most warnings.

        These settings are subject to change over time as we learn more about
        the behavior of the various checkers and their settings.  These commands
        adjust things such as which checkers to use and what errors and warnings
        to ignore.

        When making changes, a :SyntasticReset command will be issued to
        clear any existing errors.

        Python's "future" package imports a number of modules from "builtins";
        these are often unused and "flake8" will complain about them by default,
        but for maintainability reasons it's important to keep them all imported
        anyway.  g:Flake8IgnoredImports holds this list of modules, and
        :SyntasticBufferSetup will adjust :SyntasticBufferIgnoreRegex to ignore
        warnings about these unused imports.

It's useful to combine the above commands with the |localvimrc| plugin (see
|notes_localvimrc|).  For example, if a project requires strict checking, enable
this by creating a .lvimrc file at the root of the project with the following
content:

  if &filetype == "python"
      SyntasticBufferSetup strict
  endif

If you don't want to use Syntastic you can add the following to your
|VIMRC_VARS| file: >

    let g:EnableSyntastic = 0
<
Version 2015-03-19 (ebadf9af) from:
https://github.com/scrooloose/syntastic.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Tagbar - Source code browser                            *notes_tagbar*
                                                        |tagbar.txt|

Requires a Ctags executable to be in the path.  See |notes_tag_files| for
details on acquiring Ctags.

Local customizations:
  <S-F8>        - toggle the tagbar (:TagbarToggle)
  CTRL-q CTRL-t - toggle the tagbar (:TagbarToggle)
  CTRL-q T      - toggle the tagbar (:TagbarToggle)
  <Space> q t   - toggle the tagbar (:TagbarToggle)

Added support for reStructuredText using rst2ctags v0.2.6.  rst2ctags can be
found at https://github.com/jszakmeister/rst2ctags, and a copy has been
embedded in $VIMFILES/tool/rst2ctags (with a patch to use `python3`).

Also added support for markdown using markdown2ctags v0.3.3.  markdown2ctags
can be found at https://github.com/jszakmeister/markdown2ctags, and a copy has
been embedded in $VIMFILES/tool/markdown2ctags (with a patch to use `python3`).

The Tagbar wiki has more information:
https://github.com/preservim/tagbar/wiki

Version 3.1.1, 2022-11-04 (6c3e15e) from:
https://github.com/preservim/tagbar

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Toml - Support for TOML files                           *notes_toml*

Version 2019-02-13 (5dede56) from:
https://github.com/cespare/vim-toml

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
TagSignature - Balloon signatures for tags              *notes_tagsignature*

Displays the signature of a tag when you hover the mouse over that tag.
Requires a tags file.

Version r714 from:
http://www.vim.org/scripts/script.php?script_id=2714

Installation:
- Copy to ~/.vim/plugin/tag_signature.vim

------------------------------------------------------------------------------
Tcomment - Comment lines in a program                   *notes_tcomment*
                                                        |tcomment.txt|

An extensible & universal comment plugin that also handles embedded filetypes.

    gc{motion}          - Toggle comments (for small comments within one line
                          the &filetype_inline style will be used, if
                          defined)
    gc<Count>c{motion}  - Toggle comment text with count argument
                          (see |tcomment#Comment()|)
    gcc                 - Toggle comment for the current line

In visual mode:

    gc           - Toggle comments

Local customizations:

Blank lines are not commented, and the <c-_> and <Leader>_ mappings are turned
off.  'gc' will do what you want most of the time.

For the language C, comments default to C++-style comments (as found in C99 and
beyond): >
  // C++-style comment.
<
This is controlled globally via `g:UseCppComments`, an integer defaulting to 1.
Comments may be configured to default to C-style comments: >
  /* C-style comment. */
<
To default to C-style comments, add the following in |VIMRC_BEFORE|: >
    let g:UseCppComments = 0
<
In addition, C-style comments by default will not use a leading asterisk; they
will appear as follows: >
  /*
      A C-style comment
      without leading asterisks.
  */
<
With a leading column of asterisks, a C-style comments will appear as follows: >
  /*
   * A C-style comment
   * with leading asterisks.
   */
<
To default to using leading asterisks for C-style comments, add the following in
|VIMRC_BEFORE|: >
    let g:UseLeadingAsterisks = 1
<
Version 2022-07-22 (e77e1bf) from: https://github.com/tomtom/tcomment_vim

Installation:
- Follow bundle installation instructions (|bundle_installation|).
- Removed the spec/ directory before 'git add'ing the bundle.

------------------------------------------------------------------------------
Telescope - Fuzzy finding in Neovim                     *notes_telescope*
                                                        |telescope|

Version 0.1.8 from 2024-05-23 (a0bbec2) from:
https://github.com/nvim-telescope/telescope.nvim

Local customizations:
  <Space>lr       - find references of identifier under cursor
  <Space>bb       - browse buffers
  <Space>f'       - find marks
  <Space>fb       - find buffers
  <Space>ff       - find files
  <Space>fg       - find grep (regex defaults to word under cursor)
  <Space>fh       - find help tags
  <Space>fk       - find keymaps
  <Space>fq       - find in QuickFix list
  <Space>fm       - find man pages
  <Space>ft       - find tags in current directory
  <Space>fT       - find tags in current buffer
  <Space>pf       - find files at project root
  <Space>pp       - find files at project root

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
TextObj-Diff - Diff-based text objects                  *notes_textobj-diff*
                                                        |textobj-diff.txt|

Support for text objects based on diffs.  You can select hunks, or all hunks
belonging to a file.

Use "df" for files containing hunks, and "dh" for individual hunks.
Currently, there is no difference between the contents of a hunk, and the
entire hunk.  So 'vadh' and 'vidh' both select the entire hunk.

Supports navigating between files and hunks with some movement mappings.  File
mappings move based on diff or index lines.  Hunks look for '@@'.

Version 0.0.2 (822ae0a1) from:
https://github.com/kana/vim-textobj-diff.git

Local customizations:

- ]], ][, [[, and [] are mapped in diff files to help navigate between hunks
  of the diff.

- The default global mappings have been disabled to conserve mappable keys.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
TextObj-Function - Function-based text objects          *notes_textobj-func*
                                                        |textobj-function.txt|

Support for text objects based on functions.  Currently, only C and VimScript
are supported.

Use "f" for text objects based on functions.

    vif   - Select the contents of a function
    vaf   - Select the entire function

To add more language support, see |textobj-function-customizing|.

Version 0.4.0 (adb50f38) from:
https://github.com/kana/vim-textobj-function.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
TextObj-Indent - Indentation-based text objects         *notes_textobj-indent*
                                                        |textobj-indent.txt|

Support for text objects based on indentation.

Use "i" for text objects based on indentation.

E.g., to select block:
    vii

Version 0.0.5 (a17bd544) from:
https://github.com/kana/vim-textobj-indent.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
TextObj-Rst - Text objects for reStructuredText         *notes_textobj-rst*
                                                        |textobj-rst.txt|

Support for text objects based on reStructuredText sections.  Also maps |[[|,
|]]|, |[]|, and |][| to help navigate between sections and the end of
sections.

Use "rs" for text objects based on sections.

E.g., to select the contents of a section:
    virs

Version 0.2.0 (72c511b7) from:
https://github.com/jszakmeister/vim-textobj-rst.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
TextObj-User - Supports user-defined text objects       *notes_textobj-user*
                                                        |textobj-user.txt|

Library to support construction of user-defined text objects; by itself,
library is not terribly useful.  Enables things like |textobj-indent|.

Version 0.7.5 (e231b657) from:
https://github.com/kana/vim-textobj-user.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
ToggleCursor - Changes cursor shape in terminal         *notes_togglecursor*
                                                        |togglecursor|

On supported terminals, it will change the cursor when you enter insert mode.
Currently, the supported terminals are iTerm2 (for the Mac), and Konsole.
Xterm is partially supported as well (it will use an underline versus a line
cursor by default).  This technique also works with tmux, although you may
need version 1.7 or better.

Version 0.5.2 (a8dd2408) from:
https://github.com/jszakmeister/vim-togglecursor.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
UltiSnips - Support for inserting snippets of text      *notes_ultisnips*
                                                        |UltiSnips|

Provides TextMate-like snippets for inserting text with placeholders.

Configured as follows:

- <Tab>       - Expand trigger or jump forward to the next tabstop
- <M-u><Tab>  - Jump forward to the next tabstop
- <S-Tab>     - Jump backward to the previous tabstop
- <C-Tab>     - List snippets whose triggers start with prefix at cursor
- <M-u><M-l>  - List snippets whose triggers start with prefix at cursor

<Tab> will first try to expand a snippet if it can; otherwise, if a snippet is
active, it will jump to the next tabstop; otherwise, it behaves like a normal
<Tab> operation.

If you'd like to jump forward when the cursor is at a valid trigger, use
<M-u><Tab> to force jumping instead of expansion.  If you expand the trigger by
mistake, first undo the expansion (via <M-u><M-u> or <M-z>), then use
<M-u><Tab> to force the jump operation).

Snippets live in any "UltiSnips" subdirectory on the 'runtimepath'.  Snippets
earlier in the 'runtimepath' take precedence.  For example:

- ~/.vim/UltiSnips         - Snippets common to all configurations
- ~/.vim/local/UltiSnips   - Optional snippets local to an installation

The default snippets that came with UltiSnips have been split into a separate
plugin and are no longer included with UltiSnips.  We've included a plugin
dedicated to providing default snippets for your convenience.  Take a look at
|notes_snippets| for more information about where the snippets reside and how to
make them available, should you want to use them.

The default snippets provided by vimfiles are set to have a priority level of
-5.  This should allow all vimfiles snippets to override many plugin provided
ones, but still allow use of the default priorty by users to override vimfiles
provided snippets.

To avoid rampant duplication when defining snippets, a custom set of Python
scripts is used to define snippets.  For example, the file
~/.vim/UltiSnips/c.snippets.py generates the snippets found in
~/.vim/UltiSnips/c.snippets.  All snippets make be "built" via the Makefile in
~/.vim/UltiSnips by executing "make".  To make it easier to open a
.snippets.py for the filetype you happen to be editing, you can use the
EditSnippets command.

To reduce the ceremony in creating a new file, expanding a snippet has been
hooked to provide a filetype and filename aware "snippet".  Typing skel<TAB>
will cause us to look up a snippet named "template_<filetype>.<ext>" and
expand it.  For instance, a template for "*.snippets.py" files might be named
"template_python.snippets.py".  For files with more than one '.' in the
extension, we'll gradually chop off the front portion looking for a match.
For instance, for a file named "foo.a.b.c" with filetype "bar", we'd look for
snippets in the following order:

- template_bar.foo.a.b.c
- template_bar.a.b.c
- template_bar.b.c
- template_bar.c
- template_bar

The first one to match will be expanded.

To disable UltiSnips entirely, set the below variable before vimrc runs: >

    let g:EnableUltiSnips = 0

This is useful for forks of Vim that don't support Python bindings (e.g.,
NeoVim).

Version 2023-08-05 (aa25c0d) from:
https://github.com/SirVer/ultisnips.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).
- See ~/.vim/vimrc for detailed configuration steps.

------------------------------------------------------------------------------
Unicode - handling unicode and digraphs characters      *notes_unicode*
                                                        |unicode.txt|

Most common use: completing to a known Unicode name at insert-mode cursor.
Press CTRL-x CTRL-z to complete.  For example, to find `ZERO WIDTH SPACE`,
type `zero` and press CTRL-x CTRL-z to get list of possible completions; use
cursors to choose desired matching character.

Supports these insert-mode mappings to complete at cursor location:
- CTRL-x CTRL-g   Complete digraph, e.g.: `>>` becomes `»`
- CTRL-x CTRL-z   Complete unicode, e.g.: `zero` becomes char `ZERO WIDTH SPACE`
- CTRL-x CTRL-b   Complete HTML entity, e.g.: `amp` becomes `&`

Supports these normal-mode mappings:
- ga              Identify Unicode character under the cursor
- <leader>un      Switch to completing to unicode name instead of character

Version 2021-05-24 (62f7a35) from:
https://github.com/chrisbra/unicode.vim

Installation:
- Follow bundle installation instructions (|bundle_installation|).
- See ~/.vim/vimrc for detailed configuration steps.
- Download `UnicodeData.txt` and add to source control (this requires setting
  `g:Unicode_data_directory` to point into the Unicode bundle directory):
>
  cd ~/.vim/bundle/unicode
  wget https://www.unicode.org/Public/UNIDATA/UnicodeData.txt
  git add UnicodeData.txt
<
------------------------------------------------------------------------------
Vader - Unit testing for vimscript                      *notes_vader*
                                                        |vader.txt|

Version 2016-05-22 (6b966e1) from:
https://github.com/junegunn/vader.vim

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
VCScommand - Version Control System integration         *notes_vcscommand*
                                                         |vcscommand|

Local customizations:
- Using <Leader>s (for "svn") instead of <Leader>c (originally "cvs").
  Avoids conflict with <Leader>c mapping of EnhancedCommentify.

Maps work on file associated with current buffer

\sa VCSAdd                add to source control
\sn VCSAnnotate           perform "svn annotate" (svn blame)
\sc VCSCommit             commit file
\sD VCSDelete             delete from source control
\sd VCSDiff               diff against most CURRENT
\sg VCSGotoOriginal       delete VCS scratch buffer, return to original file
\sG VCSGotoOriginal!      as above, but wipeout all scratch buffers
\si VCSInfo               "svn info"
\sl VCSLog                "svn log"
\sL VCSLock               "svn lock"
\sr VCSReview             show version of current file (default: most recent)
\ss VCSStatus             "svn status"
\su VCSUpdate             "svn update"
\sU VCSUnlock             "svn unlock"
\sv VCSVimDiff            use vimdiff to show differences

The ex commands allow additional parameters which are generally passed to
the underlying source control system.

Version 2c1dc008d4eeb7204f01c01f71cb8a01c066e9d0 from:
https://github.com/drmikehenry/vcscommand.vim.git

Originally version 1.99.46 from:
http://www.vim.org/scripts/script.php?script_id=90

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
VimBall - Vim "package manager"                         *notes_vimball*
                                                        |vimball|

Version 33 (4ba9a9e) from:
https://github.com/vim-scripts/Vimball

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Vim-lsp - Language Server Protocol support              *notes_vim-lsp*
                                                        |vim-lsp|

Supports these mappings (experimental at present):
- <Space>lgd     <plug>(lsp-definition)
- <Space>lgD     <plug>(lsp-declaration)
- <Space>lpd     <plug>(lsp-peek-definition)
- <Space>lpD     <plug>(lsp-peek-declaration)
- <Space>lr      <plug>(lsp-references)
- <Space>lR      <plug>(lsp-rename)
- <Space>lh      <plug>(lsp-hover)
- <Space>l=      <plug>(lsp-document-format)
- <Space>l=      <plug>(lsp-document-range-format)

Version 2024-10-23 (04428c9) from:
https://github.com/prabirshrestha/vim-lsp.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Vim-lsp-ale - Bridge between vim-lsp and ALE            *notes_vim-lsp-ale*
                                                        |vim-lsp-ale|

Version 2021-12-29 (db0f9a8) from:
https://github.com/rhysd/vim-lsp-ale.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Vis - The Visual Block Tool                             *notes_vis*
                                                        |vis.txt|

Performs an arbitrary Ex command on a visual highlighted block.

Mark visual block (CTRL-v) or visual character (v),
  press ':B ' and enter an Ex command [cmd].

  ex. Use ctrl-v to visually mark the block then use
    :B cmd     (will appear as   :'<,'>B cmd )

  ex. Use v to visually mark the block then use
    :B cmd     (will appear as   :'<,'>B cmd )

Popular uses for this command include: >

  :B s/pattern/output/
  :B left
  :B right

Using // and ?? after a visual selection (the // is only available
if you have g:vis_WantSlashSlash=1 in your |VIMRC_BEFORE| script):
>
  ex. select region via V, v, or ctrl-v
      //pattern
<
You'll actually get a long leader string of commands to restrict
searches to the requested visual block first.  You may then enter
the pattern afterwards.  For example, using "v" to select this
paragraph, you'll see something like: >

  /\%(\%(\%80l\%>12v\)\|\%(\%83l\%<53v\)\|\%(\%>80l\%<83l\)\)\&
<
You may enter whatever pattern you want after the \&, and the
pattern search will be restricted to the requested region.

The "S" command in visual mode:
>
  ex. select region via V, v, or ctrl-v
      :S pattern
<
    The ":S pattern" will appear as ":'<,'>S pattern".  This
    command will move the cursor to the next instance of the
    pattern, restricted to the visually selected block.

Version v22 (Jan 7, 2020) from:
http://www.drchip.org/astronaut/vim/index.html#VIS

Installation:
- Depends on DrC's Utilities: |notes_cecutils|
- Follow bundle installation instructions (|bundle_installation|),
  but MUST ALSO delete this file, since cecutil is installed separately: >

    bundle/vis/plugin/cecutil.vim

------------------------------------------------------------------------------
VisIncr - Increment visually selected areas             *notes_visincr*
                                                        |visincr.txt|

Using block visual mode (CTRL-v), visually select a column of numbers,
then use one of the following:

    :I [#]  will use the first line's number as a starting point
      default increment (#) is 1
      will justify left (pad right)
      For more see |visincr-I|

    :II [# [zfill]]
      will use the first line's number as a starting point
      default increment (#) is 1
      default zfill         is a blank (ex. :II 1 0)
      will justify right (pad left)
      For more see |visincr-II|

         ORIG      I        II
         +---+   +----+   +----+
         | 8 |   | 8  |   |  8 |
         | 8 |   | 9  |   |  9 |
         | 8 |   | 10 |   | 10 |
         | 8 |   | 11 |   | 11 |
         +---+   +----+   +----+

Also try the "restricted" variants (:RI, :RII) which skip over lines
that don't have numbers.  Can help to renumber paragraphs.
See the following:

  Restricted left-justified incrementing......|visincr-RI|
  Restricted right-justified incrementing.....|visincr-RII|

Version 21h (Nov 22, 2017) from:
http://www.drchip.org/astronaut/vim/index.html#VISINCR

Installation:
- Depends on Calendar Utilities: |notes_calutils|
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
VisSort - Sort visually selected areas                  *notes_vissort*
                                                        |vissort.txt|

   :[range]Vissort   actually same as Bisort
   :'<,'>Vissort     apply sort to visual-block only

   Select a block of text with visual-block mode; use the Vissort command to
   sort the block.  This function sorts the lines *based on the selected
   column*.

   EXAMPLE

    Original Text:
    one      two      three   four
    five     six      seven   eight
    nine     ten      eleven  twelve
    thirteen fourteen fifteen sixteen

    Use ctrl-v (Visual-Block) to select two..fourteen column,
    then Vissort:
    thirteen fourteen fifteen sixteen
    five     six      seven   eight
    nine     ten      eleven  twelve
    one      two      three   four

More commands available at |vissort.txt|

Version 4 (Apr 16, 2013) from:
http://www.drchip.org/astronaut/vim/index.html#VISSORT

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
VisSwap - Swap visually selected areas                  *notes_visswap*
                                                        |visswap.txt|

Visually select a region and press CTRL-y to "yank".
Visually select another region and press CTRL-t to "trade"
the two regions.
(The default is CTRL-x to "exchange" the regions, but this conflicts with the
swapit plugin.)

Version v4g (Feb 18, 2016) from:
http://www.drchip.org/astronaut/vim/index.html#VISSWAP

Installation:
- Depends on DrC's Utilities: |notes_cecutils|
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
WhichKey - Neovim show key bindings                     *notes_whichkey*
                                                        |whichkey|

Version 2023-06-19 (d871f2b) from:
https://github.com/folke/which-key.nvim

Press a key (<Space>, for example), then wait for the 'timeoutlen' to expire.
WhichKey will pop up a navigable menu of key bindings.

Installation:
- Follow Neovim-only bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Z80 - Support for Z80 assembly language                 *notes_z80*

Version 2017-05-31 (487a6a0) from:
https://github.com/samsaga2/vim-z80

with the following modifications found in branch `vimfiles` at:
https://github.com/drmikehenry/vim-z80

- (branch remove-mapping) Removing misbehaving mapping.
- (branch hash-comment) Handle #comment/#endcomment syntax.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Zig - Support for Zig language                          *notes_zig*

Version 2022-03-14 (dd5e2c2) from:
https://github.com/ziglang/zig.vim

Local customizations:

- Avoid running `zig fmt` on save automatically.

Installation:
- Follow bundle installation instructions (|bundle_installation|).

==============================================================================
Colorscheme plugins                                 *notes_colorscheme_plugins*

------------------------------------------------------------------------------
Badwolf colorscheme                                     *notes_badwolf*

Version 2013-07-19 (e6fdf18) from:
https://github.com/sjl/badwolf.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Base16 colorscheme collection                           *notes_base16*

Version 2014-07-22 (1ce4b84) from:
https://github.com/chriskempson/base16-vim.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
ColorSamplerPack - Color schemes and theme menu         *notes_colorsamplerpack*

Version 2012.10.28 from:
http://www.vim.org/scripts/script.php?script_id=625

Installation:
- Follow bundle installation instructions (|bundle_installation|).
- Unpack in bundle/colorsamplerpack.

------------------------------------------------------------------------------
Dual - Dual color scheme (gvim, vim)                    *notes_dual*

Version 1.1 from:
http://www.vim.org/scripts/script.php?script_id=2688

Installation:
- Copy to ~/.vim/colors/dual.vim

Use: >
    :colorscheme dual

------------------------------------------------------------------------------
Gruvbox - a dark colorscheme                            *notes_gruvbox*

Version 2020-07-03 (bf2885a) from:
https://github.com/morhetz/gruvbox

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Hemisu - A dark colorscheme                             *notes_hemisu*

Version 2013-09-05 (37ea6aa) from:
https://github.com/noahfrederick/vim-hemisu.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Hybrid - A dark colorscheme                             *notes_hybrid*

Version 2014-05-10 (81b7e55) from:
https://github.com/w0ng/vim-hybrid.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Iceberg - A bluish colorscheme                          *notes_iceberg*

Version 2022-11-23 (e01ac08) from:
https://github.com/cocopon/iceberg.vim

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Melange - A dark or light colorscheme                   *notes_melange*

Version 2023-10-19 (ca3444c) from:
https://github.com/savq/melange-nvim

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Monokai - A dark colorscheme                            *notes_monokai*

Version 2014-06-10 (168adea) from:
https://github.com/ku1ik/vim-monokai.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Nightfox - A customizable dark colorscheme              *notes_nightfox*

Version 3.7.1 (fcf699b) from:
https://github.com/EdenEast/nightfox.nvim

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Sonokai -  Monokai colorscheme with less contrast       *notes_sonokai*

Version 2023-10-24 (bdce098) from:
https://github.com/sainnhe/sonokai

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Wombat256i - A dark colorscheme                         *notes_wombat256i*

Version 2013-08-04 (f99475e) from:
https://github.com/dsolstad/vim-wombat256i.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

==============================================================================
Extensions                                              *notes_extensions*

------------------------------------------------------------------------------
C Additions - Extra syntax highlighting for C           *notes_c_additions*

Taken from:
http://www.vim.org/scripts/script.php?script_id=3064

Installation:
- Download the new syntax file from the above url.
- Install it into bundle/c-additions/after/syntax/.

------------------------------------------------------------------------------
Python indentation support                              *notes_python_indent*

Version 2020-03-20 (60ba5e1) from:
https://github.com/hynek/vim-python-pep8-indent.git

Installation:
- Follow bundle installation instructions (|bundle_installation|).

------------------------------------------------------------------------------
Tmux syntax - Syntax definitions for tmux.conf          *notes_tmux_syntax*

Install: >
    wget http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/examples/tmux.vim\?format\=raw -O syntax/tmux.vim

--
  vim:sw=2:sts=2:et:ai:tw=78:fo=tcq2:ft=help:nospell:
